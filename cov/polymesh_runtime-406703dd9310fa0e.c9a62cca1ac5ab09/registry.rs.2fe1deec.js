var data = {lines:[
{"lineNum":"    1","line":"//! A runtime module providing a unique ticker registry"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"use crate::utils;"},
{"lineNum":"    4","line":"use codec::{Decode, Encode};"},
{"lineNum":"    5","line":"use rstd::prelude::*;"},
{"lineNum":"    6","line":"use srml_support::{decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"    7","line":"use system::ensure_signed;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"#[repr(u32)]"},
{"lineNum":"   10","line":"#[derive(Clone, Debug, Eq, PartialEq, Encode, Decode)]"},
{"lineNum":"   11","line":"pub enum TokenType {"},
{"lineNum":"   12","line":"    AssetToken,"},
{"lineNum":"   13","line":"    ConfidentialAssetToken,"},
{"lineNum":"   14","line":"}"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"#[derive(Clone, Debug, Eq, PartialEq, Default, Encode, Decode)]","class":"linePartCov","hits":"10","order":"6360","possible_hits":"19",},
{"lineNum":"   17","line":"pub struct RegistryEntry {","class":"lineCov","hits":"1","order":"6389","possible_hits":"1",},
{"lineNum":"   18","line":"    pub token_type: u32,","class":"linePartCov","hits":"7","order":"6383","possible_hits":"11",},
{"lineNum":"   19","line":"    pub owner_did: Vec<u8>,","class":"linePartCov","hits":"7","order":"6387","possible_hits":"13",},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// Default on TokenType is there only to please the storage macro."},
{"lineNum":"   23","line":"impl Default for TokenType {"},
{"lineNum":"   24","line":"    fn default() -> Self {"},
{"lineNum":"   25","line":"        TokenType::AssetToken"},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"/// The module\'s configuration trait."},
{"lineNum":"   30","line":"pub trait Trait: system::Trait {"},
{"lineNum":"   31","line":"    // TODO: Add other types and constants required configure this module."},
{"lineNum":"   32","line":"}"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"decl_storage! {","class":"linePartCov","hits":"3","order":"6349","possible_hits":"5",},
{"lineNum":"   35","line":"    trait Store for Module<T: Trait> as Registry {"},
{"lineNum":"   36","line":"        // Tokens by ticker. This represents the global namespace for tokens of all kinds. Entry"},
{"lineNum":"   37","line":"        // keys MUST be in full caps. To ensure this the storage item is private and using the"},
{"lineNum":"   38","line":"        // custom access methods is mandatory"},
{"lineNum":"   39","line":"        pub Tokens get(tokens): map Vec<u8> => RegistryEntry;"},
{"lineNum":"   40","line":"    }"},
{"lineNum":"   41","line":"}","class":"linePartCov","hits":"2","order":"6352","possible_hits":"6",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"decl_module! {"},
{"lineNum":"   44","line":"    /// The module declaration."},
{"lineNum":"   45","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   46","line":"        pub fn print_ticker_availability(origin, ticker: Vec<u8>) -> Result {"},
{"lineNum":"   47","line":"            let _sender = ensure_signed(origin)?;"},
{"lineNum":"   48","line":"            let upper_ticker = utils::bytes_to_upper(&ticker);"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"            if <Tokens>::exists(&upper_ticker) {"},
{"lineNum":"   51","line":"                sr_primitives::print(\"Ticker not available\");"},
{"lineNum":"   52","line":"            } else {"},
{"lineNum":"   53","line":"                sr_primitives::print(\"Ticker available\");"},
{"lineNum":"   54","line":"            }"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            Ok(())"},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":"}"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"   62","line":"    pub fn get(ticker: &Vec<u8>) -> Option<RegistryEntry> {","class":"linePartCov","hits":"3","order":"6370","possible_hits":"6",},
{"lineNum":"   63","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"6","order":"6372","possible_hits":"6",},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        if <Tokens>::exists(&upper_ticker) {","class":"linePartCov","hits":"5","order":"6375","possible_hits":"6",},
{"lineNum":"   66","line":"            Some(<Tokens>::get(upper_ticker))","class":"linePartCov","hits":"1","order":"6377","possible_hits":"3",},
{"lineNum":"   67","line":"        } else {"},
{"lineNum":"   68","line":"            None","class":"linePartCov","hits":"2","order":"6615","possible_hits":"3",},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":"    }","class":"linePartCov","hits":"1","order":"6402","possible_hits":"3",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"    pub fn put(ticker: &Vec<u8>, entry: &RegistryEntry) -> Result {","class":"linePartCov","hits":"3","order":"6255","possible_hits":"6",},
{"lineNum":"   73","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"6","order":"6256","possible_hits":"6",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"        ensure!(!<Tokens>::exists(&upper_ticker), \"Token ticker exists\");","class":"linePartCov","hits":"5","order":"6347","possible_hits":"9",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        <Tokens>::insert(upper_ticker, entry);","class":"lineCov","hits":"3","order":"6354","possible_hits":"3",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"        Ok(())","class":"lineCov","hits":"3","order":"6363","possible_hits":"3",},
{"lineNum":"   80","line":"    }","class":"linePartCov","hits":"4","order":"6365","possible_hits":"6",},
{"lineNum":"   81","line":"}"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"/// tests for this module"},
{"lineNum":"   84","line":"#[cfg(test)]"},
{"lineNum":"   85","line":"mod tests {"},
{"lineNum":"   86","line":"    use super::*;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    use sr_io::with_externalities;"},
{"lineNum":"   89","line":"    use sr_primitives::{"},
{"lineNum":"   90","line":"        testing::Header,"},
{"lineNum":"   91","line":"        traits::{BlakeTwo256, IdentityLookup},"},
{"lineNum":"   92","line":"        Perbill,"},
{"lineNum":"   93","line":"    };"},
{"lineNum":"   94","line":"    use srml_support::{assert_ok, impl_outer_origin, parameter_types};"},
{"lineNum":"   95","line":"    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"    impl_outer_origin! {"},
{"lineNum":"   98","line":"        pub enum Origin for Test {}"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  102","line":"    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  103","line":"    // configuration traits of modules we want to use."},
{"lineNum":"  104","line":"    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  105","line":"    pub struct Test;"},
{"lineNum":"  106","line":"    parameter_types! {"},
{"lineNum":"  107","line":"        pub const BlockHashCount: u32 = 250;"},
{"lineNum":"  108","line":"        pub const MaximumBlockWeight: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  109","line":"        pub const MaximumBlockLength: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  110","line":"        pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);"},
{"lineNum":"  111","line":"    }"},
{"lineNum":"  112","line":"    impl system::Trait for Test {"},
{"lineNum":"  113","line":"        type Origin = Origin;"},
{"lineNum":"  114","line":"        type Call = ();"},
{"lineNum":"  115","line":"        type Index = u64;"},
{"lineNum":"  116","line":"        type BlockNumber = u64;"},
{"lineNum":"  117","line":"        type Hash = H256;"},
{"lineNum":"  118","line":"        type Hashing = BlakeTwo256;"},
{"lineNum":"  119","line":"        type AccountId = u64;"},
{"lineNum":"  120","line":"        type Lookup = IdentityLookup<u64>;"},
{"lineNum":"  121","line":"        type WeightMultiplierUpdate = ();"},
{"lineNum":"  122","line":"        type Header = Header;"},
{"lineNum":"  123","line":"        type Event = ();"},
{"lineNum":"  124","line":"        type BlockHashCount = BlockHashCount;"},
{"lineNum":"  125","line":"        type MaximumBlockWeight = MaximumBlockWeight;"},
{"lineNum":"  126","line":"        type AvailableBlockRatio = AvailableBlockRatio;"},
{"lineNum":"  127","line":"        type MaximumBlockLength = MaximumBlockLength;"},
{"lineNum":"  128","line":"        type Version = ();"},
{"lineNum":"  129","line":"    }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    impl Trait for Test {}"},
{"lineNum":"  132","line":"    type Registry = Module<Test>;"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    // This function basically just builds a genesis storage key/value store according to"},
{"lineNum":"  135","line":"    // our desired mockup."},
{"lineNum":"  136","line":"    fn new_test_ext() -> sr_io::TestExternalities<Blake2Hasher> {","class":"lineCov","hits":"1","order":"6246","possible_hits":"1",},
{"lineNum":"  137","line":"        let t = system::GenesisConfig::default()","class":"lineCov","hits":"1","order":"6247","possible_hits":"1",},
{"lineNum":"  138","line":"            .build_storage::<Test>()"},
{"lineNum":"  139","line":"            .unwrap();"},
{"lineNum":"  140","line":"        sr_io::TestExternalities::new(t)","class":"lineCov","hits":"1","order":"6250","possible_hits":"1",},
{"lineNum":"  141","line":"    }","class":"linePartCov","hits":"1","order":"6251","possible_hits":"2",},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    #[test]"},
{"lineNum":"  144","line":"    fn registry_ignores_case() {","class":"linePartCov","hits":"3","order":"6242","possible_hits":"4",},
{"lineNum":"  145","line":"        with_externalities(&mut new_test_ext(), || {","class":"linePartCov","hits":"3","order":"6245","possible_hits":"4",},
{"lineNum":"  146","line":"            let entry = RegistryEntry {","class":"lineCov","hits":"1","order":"6253","possible_hits":"1",},
{"lineNum":"  147","line":"                token_type: TokenType::AssetToken as u32,"},
{"lineNum":"  148","line":"                owner_did: \"did:poly:some_did\".as_bytes().to_vec(),","class":"lineCov","hits":"2","order":"6252","possible_hits":"2",},
{"lineNum":"  149","line":"            };"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"            assert_ok!(Registry::put(&\"SOMETOKEN\".as_bytes().to_vec(), &entry));","class":"lineCov","hits":"2","order":"6254","possible_hits":"2",},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"            // Verify that the entry corresponds to what we intended to insert"},
{"lineNum":"  154","line":"            assert_eq!(","class":"linePartCov","hits":"1","order":"6411","possible_hits":"2",},
{"lineNum":"  155","line":"                Registry::get(&\"SOMETOKEN\".as_bytes().to_vec()),","class":"lineCov","hits":"1","order":"6368","possible_hits":"1",},
{"lineNum":"  156","line":"                Some(entry.clone())","class":"lineCov","hits":"2","order":"6404","possible_hits":"2",},
{"lineNum":"  157","line":"            );"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"            // Effectively treated as identical ticker"},
{"lineNum":"  160","line":"            assert!(Registry::put(&\"sOmEtOkEn\".as_bytes().to_vec(), &entry).is_err());","class":"linePartCov","hits":"1","order":"6413","possible_hits":"2",},
{"lineNum":"  161","line":"        });","class":"linePartCov","hits":"3","order":"6421","possible_hits":"4",},
{"lineNum":"  162","line":"    }","class":"linePartCov","hits":"2","order":"6423","possible_hits":"3",},
{"lineNum":"  163","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 33, "covered" : 33,};
var merged_data = [];
