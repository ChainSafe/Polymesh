var data = {lines:[
{"lineNum":"    1","line":"use crate::{"},
{"lineNum":"    2","line":"    asset::{self, AssetTrait},"},
{"lineNum":"    3","line":"    constants::*,"},
{"lineNum":"    4","line":"    identity, utils,"},
{"lineNum":"    5","line":"};"},
{"lineNum":"    6","line":"use primitives::Key;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"use codec::Encode;"},
{"lineNum":"    9","line":"use core::result::Result as StdResult;"},
{"lineNum":"   10","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"   11","line":"use srml_support::{decl_event, decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"   12","line":"use system::{self, ensure_signed};"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"/// The module\'s configuration trait."},
{"lineNum":"   15","line":"pub trait Trait: timestamp::Trait + system::Trait + utils::Trait + identity::Trait {"},
{"lineNum":"   16","line":"    // TODO: Add other types and constants required configure this module."},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"    /// The overarching event type."},
{"lineNum":"   19","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   20","line":"    type Asset: asset::AssetTrait<Self::TokenBalance>;"},
{"lineNum":"   21","line":"}"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Debug)]","class":"linePartCov","hits":"8","order":"6880","possible_hits":"17",},
{"lineNum":"   24","line":"pub struct Whitelist<U> {","class":"lineCov","hits":"1","order":"6895","possible_hits":"1",},
{"lineNum":"   25","line":"    investor: Vec<u8>,","class":"linePartCov","hits":"4","order":"6881","possible_hits":"7",},
{"lineNum":"   26","line":"    can_send_after: U,","class":"linePartCov","hits":"4","order":"6882","possible_hits":"9",},
{"lineNum":"   27","line":"    can_receive_after: U,","class":"linePartCov","hits":"4","order":"6883","possible_hits":"9",},
{"lineNum":"   28","line":"}","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"decl_storage! {","class":"linePartCov","hits":"42","order":"6870","possible_hits":"46",},
{"lineNum":"   31","line":"    trait Store for Module<T: Trait> as GeneralTM {"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"        // Tokens can have multiple whitelists that (for now) check entries individually within each other"},
{"lineNum":"   34","line":"        WhitelistsByToken get(whitelists_by_token): map (Vec<u8>, u32) => Vec<Whitelist<T::Moment>>;"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"        // (Ticker, ID, DID) -> whitelist entry"},
{"lineNum":"   37","line":"        WhitelistForTokenAndAddress get(whitelist_for_restriction): map (Vec<u8>, u32, Vec<u8>) => Whitelist<T::Moment>;"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"        WhitelistEntriesCount get(whitelist_entries_count): map (Vec<u8>,u32) => u64;"},
{"lineNum":"   40","line":"        WhitelistCount get(whitelist_count): u32;"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    }"},
{"lineNum":"   43","line":"}","class":"linePartCov","hits":"18","order":"6871","possible_hits":"46",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"decl_module! {"},
{"lineNum":"   46","line":"    /// The module declaration."},
{"lineNum":"   47","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   48","line":"        // Initializing events"},
{"lineNum":"   49","line":"        // this is needed only if you are using events in your module"},
{"lineNum":"   50","line":"        fn deposit_event() = default;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        pub fn add_to_whitelist(origin, did: Vec<u8>, ticker: Vec<u8>, whitelist_id: u32, investor_did: Vec<u8>, expiry: T::Moment) -> Result {"},
{"lineNum":"   53","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"6","order":"6848","possible_hits":"10",},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   56","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"4","order":"6849","possible_hits":"8",},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"            let upper_ticker = utils::bytes_to_upper(&ticker);","class":"lineCov","hits":"4","order":"6850","possible_hits":"4",},
{"lineNum":"   59","line":"            ensure!(Self::is_owner(&upper_ticker, &did),\"Sender must be the token owner\");","class":"linePartCov","hits":"2","order":"6851","possible_hits":"6",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            let whitelist = Whitelist {","class":"lineCov","hits":"2","order":"6867","possible_hits":"2",},
{"lineNum":"   62","line":"                investor: investor_did.clone(),","class":"lineCov","hits":"2","order":"6864","possible_hits":"2",},
{"lineNum":"   63","line":"                can_send_after:expiry.clone(),","class":"lineCov","hits":"2","order":"6865","possible_hits":"2",},
{"lineNum":"   64","line":"                can_receive_after:expiry","class":"lineCov","hits":"2","order":"6866","possible_hits":"2",},
{"lineNum":"   65","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"            //Get whitelist entries for this token + whitelistId"},
{"lineNum":"   68","line":"            let ticker_whitelist_id = (upper_ticker.clone(), whitelist_id);","class":"lineCov","hits":"4","order":"6868","possible_hits":"4",},
{"lineNum":"   69","line":"            let mut whitelists_for_token = Self::whitelists_by_token(&ticker_whitelist_id);","class":"lineCov","hits":"4","order":"6869","possible_hits":"4",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"            //Get how many entries this whiteslist has and increase it if we are adding a new entry"},
{"lineNum":"   72","line":"            let entries_count = Self::whitelist_entries_count(&ticker_whitelist_id);","class":"lineCov","hits":"4","order":"6872","possible_hits":"4",},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"            // TODO: Make sure we are only increasing the count if it\'s a new entry and not just an update of an existing entry"},
{"lineNum":"   75","line":"            let new_entries_count = entries_count.checked_add(1).ok_or(\"overflow in calculating next entry count\")?;","class":"linePartCov","hits":"2","order":"6873","possible_hits":"4",},
{"lineNum":"   76","line":"            <WhitelistEntriesCount>::insert( &ticker_whitelist_id, new_entries_count);","class":"lineCov","hits":"2","order":"6874","possible_hits":"2",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"            // If this is the first entry for this whitelist, increase the whitelists count so then we can loop through them."},
{"lineNum":"   79","line":"            if new_entries_count == 1 {","class":"lineCov","hits":"4","order":"6875","possible_hits":"4",},
{"lineNum":"   80","line":"                let whitelist_count = Self::whitelist_count();","class":"lineCov","hits":"2","order":"6876","possible_hits":"2",},
{"lineNum":"   81","line":"                let new_whitelist_count = whitelist_count.checked_add(1).ok_or(\"overflow in calculating next whitelist count\")?;","class":"lineCov","hits":"2","order":"6877","possible_hits":"2",},
{"lineNum":"   82","line":"                <WhitelistCount>::put(new_whitelist_count);","class":"lineCov","hits":"2","order":"6878","possible_hits":"2",},
{"lineNum":"   83","line":"            }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"            whitelists_for_token.push(whitelist.clone());","class":"lineCov","hits":"2","order":"6879","possible_hits":"2",},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"            //PABLO: TODO: don\'t add the restriction to the array if it already exists"},
{"lineNum":"   88","line":"            <WhitelistsByToken<T>>::insert(&ticker_whitelist_id, whitelists_for_token);","class":"lineCov","hits":"2","order":"6884","possible_hits":"2",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"            <WhitelistForTokenAndAddress<T>>::insert((upper_ticker, whitelist_id, investor_did),whitelist);","class":"lineCov","hits":"2","order":"6885","possible_hits":"2",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"            sr_primitives::print(\"Created restriction!!!\");","class":"lineCov","hits":"2","order":"6886","possible_hits":"2",},
{"lineNum":"   93","line":"            //<general_tm::Module<T>>::add_to_whitelist(sender,token_id,investor_did,expiry);"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"            Ok(())","class":"lineCov","hits":"2","order":"6887","possible_hits":"2",},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"decl_event!("},
{"lineNum":"  101","line":"    pub enum Event<T>"},
{"lineNum":"  102","line":"    where"},
{"lineNum":"  103","line":"        AccountId = <T as system::Trait>::AccountId,"},
{"lineNum":"  104","line":"    {"},
{"lineNum":"  105","line":"        Example(u32, AccountId, AccountId),"},
{"lineNum":"  106","line":"    }"},
{"lineNum":"  107","line":");"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"  110","line":"    pub fn is_owner(ticker: &Vec<u8>, sender_did: &Vec<u8>) -> bool {","class":"linePartCov","hits":"2","order":"6852","possible_hits":"4",},
{"lineNum":"  111","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"4","order":"6853","possible_hits":"4",},
{"lineNum":"  112","line":"        T::Asset::is_owner(&upper_ticker, sender_did)","class":"lineCov","hits":"2","order":"6854","possible_hits":"2",},
{"lineNum":"  113","line":"        // let token = T::Asset::token_details(token_id);"},
{"lineNum":"  114","line":"        // token.owner == sender"},
{"lineNum":"  115","line":"    }","class":"lineCov","hits":"2","order":"6863","possible_hits":"2",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"    ///  Sender restriction verification"},
{"lineNum":"  118","line":"    pub fn verify_restriction(","class":"linePartCov","hits":"2","order":"6910","possible_hits":"4",},
{"lineNum":"  119","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  120","line":"        from_did: &Vec<u8>,"},
{"lineNum":"  121","line":"        to_did: &Vec<u8>,"},
{"lineNum":"  122","line":"        _value: T::TokenBalance,"},
{"lineNum":"  123","line":"    ) -> StdResult<u8, &\'static str> {"},
{"lineNum":"  124","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"4","order":"6911","possible_hits":"4",},
{"lineNum":"  125","line":"        let now = <timestamp::Module<T>>::get();","class":"lineCov","hits":"2","order":"6912","possible_hits":"2",},
{"lineNum":"  126","line":"        let empty_did: Vec<u8> = vec![];","class":"lineCov","hits":"2","order":"6913","possible_hits":"2",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"        // issuance case"},
{"lineNum":"  129","line":"        if *from_did == empty_did {","class":"lineCov","hits":"2","order":"6914","possible_hits":"2",},
{"lineNum":"  130","line":"            if !Self::_check_investor_status(to_did).is_ok() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                sr_primitives::print(\"to account is not active\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  132","line":"                return Ok(ERC1400_INVALID_RECEIVER);","class":"linePartCov","hits":"2","order":"6933","possible_hits":"4",},
{"lineNum":"  133","line":"            }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            if !Self::is_whitelisted(&upper_ticker, to_did).is_ok() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  136","line":"                sr_primitives::print(\"to account is not whitelisted\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"                return Ok(ERC1400_INVALID_RECEIVER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"            sr_primitives::print(\"GTM: Passed from the issuance case\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  141","line":"            return Ok(ERC1400_TRANSFER_SUCCESS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"        } else if *to_did == empty_did {","class":"lineCov","hits":"4","order":"6915","possible_hits":"4",},
{"lineNum":"  143","line":"            if !Self::_check_investor_status(from_did).is_ok() {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  144","line":"                sr_primitives::print(\"from account is not active\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"                return Ok(ERC1400_INVALID_SENDER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"            }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"            if !Self::is_whitelisted(&upper_ticker, from_did).is_ok() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  149","line":"                sr_primitives::print(\"from account is not whitelisted\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"                return Ok(ERC1400_INVALID_SENDER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  151","line":"            }"},
{"lineNum":"  152","line":"            sr_primitives::print(\"GTM: Passed from the burn case\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  153","line":"            return Ok(ERC1400_TRANSFER_SUCCESS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  154","line":"        } else {"},
{"lineNum":"  155","line":"            // loop through existing whitelists"},
{"lineNum":"  156","line":"            let whitelist_count = Self::whitelist_count();","class":"lineCov","hits":"4","order":"6916","possible_hits":"4",},
{"lineNum":"  157","line":"            if whitelist_count > 0 {"},
{"lineNum":"  158","line":"                //sr_primitives::print(\"We have at least one entry to verify\");"},
{"lineNum":"  159","line":"            }"},
{"lineNum":"  160","line":"            if !Self::_check_investor_status(from_did).is_ok() {","class":"lineCov","hits":"2","order":"6917","possible_hits":"2",},
{"lineNum":"  161","line":"                sr_primitives::print(\"from account is not active\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"                return Ok(ERC1400_INVALID_SENDER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"            }"},
{"lineNum":"  164","line":"            if !Self::_check_investor_status(to_did).is_ok() {","class":"lineCov","hits":"4","order":"6921","possible_hits":"4",},
{"lineNum":"  165","line":"                sr_primitives::print(\"to account is not active\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"                return Ok(ERC1400_INVALID_RECEIVER);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"            }"},
{"lineNum":"  168","line":"            for x in 0..whitelist_count {","class":"linePartCov","hits":"4","order":"6922","possible_hits":"8",},
{"lineNum":"  169","line":"                let whitelist_for_from ="},
{"lineNum":"  170","line":"                    Self::whitelist_for_restriction((ticker.clone(), x, from_did.clone()));","class":"lineCov","hits":"2","order":"6923","possible_hits":"2",},
{"lineNum":"  171","line":"                let whitelist_for_to ="},
{"lineNum":"  172","line":"                    Self::whitelist_for_restriction((ticker.clone(), x, to_did.clone()));","class":"lineCov","hits":"4","order":"6924","possible_hits":"4",},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"                if (whitelist_for_from.can_send_after > 0.into()","class":"lineCov","hits":"10","order":"6925","possible_hits":"10",},
{"lineNum":"  175","line":"                    && now >= whitelist_for_from.can_send_after)","class":"lineCov","hits":"2","order":"6927","possible_hits":"2",},
{"lineNum":"  176","line":"                    && (whitelist_for_to.can_receive_after > 0.into()","class":"lineCov","hits":"6","order":"6929","possible_hits":"6",},
{"lineNum":"  177","line":"                        && now > whitelist_for_to.can_receive_after)","class":"lineCov","hits":"2","order":"6930","possible_hits":"2",},
{"lineNum":"  178","line":"                {"},
{"lineNum":"  179","line":"                    return Ok(ERC1400_TRANSFER_SUCCESS);","class":"lineCov","hits":"4","order":"6931","possible_hits":"4",},
{"lineNum":"  180","line":"                }"},
{"lineNum":"  181","line":"            }","class":"linePartCov","hits":"2","order":"6932","possible_hits":"10",},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":"        sr_primitives::print(\"GTM: Not going through the restriction\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  184","line":"        Ok(ERC1400_TRANSFER_FAILURE)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  185","line":"    }","class":"linePartCov","hits":"2","order":"6934","possible_hits":"8",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    pub fn is_whitelisted(ticker: &[u8], holder_did: &Vec<u8>) -> Result {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  188","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  189","line":"        let now = <timestamp::Module<T>>::get();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  190","line":"        ensure!(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  191","line":"            Self::_check_investor_status(holder_did).is_ok(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  192","line":"            \"Account is not active\""},
{"lineNum":"  193","line":"        );"},
{"lineNum":"  194","line":"        // loop through existing whitelists"},
{"lineNum":"  195","line":"        let whitelist_count = Self::whitelist_count();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        for x in 0..whitelist_count {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  198","line":"            let whitelist_for_holder ="},
{"lineNum":"  199","line":"                Self::whitelist_for_restriction((upper_ticker.clone(), x, holder_did.clone()));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            if whitelist_for_holder.can_send_after > 0.into()","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  202","line":"                && now >= whitelist_for_holder.can_send_after","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"            {"},
{"lineNum":"  204","line":"                return Ok(());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  205","line":"            }"},
{"lineNum":"  206","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  207","line":"        Err(\"Not whitelisted\")","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  208","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    fn _check_investor_status(_holder_did: &Vec<u8>) -> Result {","class":"lineCov","hits":"2","order":"6918","possible_hits":"2",},
{"lineNum":"  211","line":"        // TODO check with claim."},
{"lineNum":"  212","line":"        /*let investor = <identity::DidRecords<T>>::get(holder_did);"},
{"lineNum":"  213","line":"        ensure!("},
{"lineNum":"  214","line":"            investor.has_signing_keys_role(IdentityRole::Investor),"},
{"lineNum":"  215","line":"            \"Account is not an investor\""},
{"lineNum":"  216","line":"        );*/"},
{"lineNum":"  217","line":"        Ok(())","class":"lineCov","hits":"2","order":"6919","possible_hits":"2",},
{"lineNum":"  218","line":"    }","class":"linePartCov","hits":"2","order":"6920","possible_hits":"4",},
{"lineNum":"  219","line":"}"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"/// tests for this module"},
{"lineNum":"  222","line":"#[cfg(test)]"},
{"lineNum":"  223","line":"mod tests {"},
{"lineNum":"  224","line":"    /*"},
{"lineNum":"  225","line":"     *    use super::*;"},
{"lineNum":"  226","line":"     *"},
{"lineNum":"  227","line":"     *    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  228","line":"     *    use sr_io::with_externalities;"},
{"lineNum":"  229","line":"     *    use sr_primitives::{"},
{"lineNum":"  230","line":"     *        testing::{Digest, DigestItem, Header},"},
{"lineNum":"  231","line":"     *        traits::{BlakeTwo256, IdentityLookup},"},
{"lineNum":"  232","line":"     *        BuildStorage,"},
{"lineNum":"  233","line":"     *    };"},
{"lineNum":"  234","line":"     *    use srml_support::{assert_ok, impl_outer_origin};"},
{"lineNum":"  235","line":"     *"},
{"lineNum":"  236","line":"     *    impl_outer_origin! {"},
{"lineNum":"  237","line":"     *        pub enum Origin for Test {}"},
{"lineNum":"  238","line":"     *    }"},
{"lineNum":"  239","line":"     *"},
{"lineNum":"  240","line":"     *    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  241","line":"     *    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  242","line":"     *    // configuration traits of modules we want to use."},
{"lineNum":"  243","line":"     *    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  244","line":"     *    pub struct Test;"},
{"lineNum":"  245","line":"     *    impl system::Trait for Test {"},
{"lineNum":"  246","line":"     *        type Origin = Origin;"},
{"lineNum":"  247","line":"     *        type Index = u64;"},
{"lineNum":"  248","line":"     *        type BlockNumber = u64;"},
{"lineNum":"  249","line":"     *        type Hash = H256;"},
{"lineNum":"  250","line":"     *        type Hashing = BlakeTwo256;"},
{"lineNum":"  251","line":"     *        type Digest = H256;"},
{"lineNum":"  252","line":"     *        type AccountId = u64;"},
{"lineNum":"  253","line":"     *        type Lookup = IdentityLookup<Self::AccountId>;"},
{"lineNum":"  254","line":"     *        type Header = Header;"},
{"lineNum":"  255","line":"     *        type Event = ();"},
{"lineNum":"  256","line":"     *        type Log = DigestItem;"},
{"lineNum":"  257","line":"     *    }"},
{"lineNum":"  258","line":"     *    impl Trait for Test {"},
{"lineNum":"  259","line":"     *        type Event = ();"},
{"lineNum":"  260","line":"     *    }"},
{"lineNum":"  261","line":"     *    type TransferValidationModule = Module<Test>;"},
{"lineNum":"  262","line":"     *"},
{"lineNum":"  263","line":"     *    // This function basically just builds a genesis storage key/value store according to"},
{"lineNum":"  264","line":"     *    // our desired mockup."},
{"lineNum":"  265","line":"     *    fn new_test_ext() -> sr_io::TestExternalities<Blake2Hasher> {"},
{"lineNum":"  266","line":"     *        system::GenesisConfig::default()"},
{"lineNum":"  267","line":"     *            .build_storage()"},
{"lineNum":"  268","line":"     *            .unwrap()"},
{"lineNum":"  269","line":"     *            .0"},
{"lineNum":"  270","line":"     *            .into()"},
{"lineNum":"  271","line":"     *    }"},
{"lineNum":"  272","line":"     */"},
{"lineNum":"  273","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 93, "covered" : 56,};
var merged_data = [];
