var data = {lines:[
{"lineNum":"    1","line":"#![cfg_attr(not(feature = \"std\"), no_std)]","class":"lineCov","hits":"1","order":"6416","possible_hits":"1",},
{"lineNum":"    2","line":"// `construct_runtime!` does a lot of recursion and requires us to increase the limit to 256."},
{"lineNum":"    3","line":"#![recursion_limit = \"256\"]"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"use authority_discovery_primitives::{"},
{"lineNum":"    6","line":"    AuthorityId as EncodedAuthorityId, Signature as EncodedSignature,"},
{"lineNum":"    7","line":"};"},
{"lineNum":"    8","line":"use babe_primitives::AuthorityId as BabeId;"},
{"lineNum":"    9","line":"use client::{"},
{"lineNum":"   10","line":"    block_builder::api::{self as block_builder_api, CheckInherentsResult, InherentData},"},
{"lineNum":"   11","line":"    impl_runtime_apis, runtime_api as client_api,"},
{"lineNum":"   12","line":"};"},
{"lineNum":"   13","line":"use codec::{Decode, Encode};"},
{"lineNum":"   14","line":"pub use contracts::Gas;"},
{"lineNum":"   15","line":"use elections::VoteIndex;"},
{"lineNum":"   16","line":"use grandpa::{fg_primitives, AuthorityId as GrandpaId};"},
{"lineNum":"   17","line":"use im_online::sr25519::{AuthorityId as ImOnlineId, AuthoritySignature as ImOnlineSignature};"},
{"lineNum":"   18","line":"use primitives::{AccountId, AccountIndex, Balance, BlockNumber, Hash, Moment, Nonce, Signature};"},
{"lineNum":"   19","line":"use rstd::prelude::*;"},
{"lineNum":"   20","line":"use sr_primitives::{"},
{"lineNum":"   21","line":"    create_runtime_str,"},
{"lineNum":"   22","line":"    curve::PiecewiseLinear,"},
{"lineNum":"   23","line":"    generic, impl_opaque_keys, key_types,"},
{"lineNum":"   24","line":"    traits::{BlakeTwo256, Block as BlockT, StaticLookup},"},
{"lineNum":"   25","line":"    transaction_validity::TransactionValidity,"},
{"lineNum":"   26","line":"    weights::Weight,"},
{"lineNum":"   27","line":"    ApplyResult,"},
{"lineNum":"   28","line":"};"},
{"lineNum":"   29","line":"use sr_staking_primitives::SessionIndex;"},
{"lineNum":"   30","line":"use srml_support::{"},
{"lineNum":"   31","line":"    construct_runtime, parameter_types,"},
{"lineNum":"   32","line":"    traits::{Currency, SplitTwoWays},"},
{"lineNum":"   33","line":"};"},
{"lineNum":"   34","line":"use substrate_primitives::u32_trait::{_1, _2, _3, _4};"},
{"lineNum":"   35","line":"use substrate_primitives::OpaqueMetadata;"},
{"lineNum":"   36","line":"#[cfg(any(feature = \"std\", test))]"},
{"lineNum":"   37","line":"use version::NativeVersion;"},
{"lineNum":"   38","line":"use version::RuntimeVersion;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub use balances::Call as BalancesCall;"},
{"lineNum":"   41","line":"#[cfg(any(feature = \"std\", test))]"},
{"lineNum":"   42","line":"pub use sr_primitives::BuildStorage;"},
{"lineNum":"   43","line":"pub use sr_primitives::{Perbill, Permill};"},
{"lineNum":"   44","line":"pub use srml_support::StorageValue;"},
{"lineNum":"   45","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"   46","line":"pub use staking::StakerStatus;"},
{"lineNum":"   47","line":"use system::offchain::TransactionSubmitter;"},
{"lineNum":"   48","line":"pub use timestamp::Call as TimestampCall;"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"/// Implementations of some helper traits passed into runtime modules as associated types."},
{"lineNum":"   51","line":"pub mod impls;"},
{"lineNum":"   52","line":"use impls::{CurrencyToVoteHandler, ToAuthor, WeightMultiplierUpdateHandler, WeightToFee};"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"/// Constant values used within the runtime."},
{"lineNum":"   55","line":"pub mod constants;"},
{"lineNum":"   56","line":"use constants::{currency::*, time::*};"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"mod asset;"},
{"lineNum":"   59","line":"mod balances;"},
{"lineNum":"   60","line":"mod contracts_wrapper;"},
{"lineNum":"   61","line":"mod dividend;"},
{"lineNum":"   62","line":"mod exemption;"},
{"lineNum":"   63","line":"mod general_tm;"},
{"lineNum":"   64","line":"mod identity;"},
{"lineNum":"   65","line":"mod percentage_tm;"},
{"lineNum":"   66","line":"mod registry;"},
{"lineNum":"   67","line":"mod simple_token;"},
{"lineNum":"   68","line":"mod sto_capped;"},
{"lineNum":"   69","line":"mod utils;"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"// Make the WASM binary available."},
{"lineNum":"   72","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"   73","line":"include!(concat!(env!(\"OUT_DIR\"), \"/wasm_binary.rs\"));"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"/// Runtime version."},
{"lineNum":"   76","line":"pub const VERSION: RuntimeVersion = RuntimeVersion {"},
{"lineNum":"   77","line":"    spec_name: create_runtime_str!(\"polymesh\"),"},
{"lineNum":"   78","line":"    impl_name: create_runtime_str!(\"polymath-polymesh\"),"},
{"lineNum":"   79","line":"    authoring_version: 1,"},
{"lineNum":"   80","line":"    spec_version: 1002,"},
{"lineNum":"   81","line":"    impl_version: 0,"},
{"lineNum":"   82","line":"    apis: RUNTIME_API_VERSIONS,"},
{"lineNum":"   83","line":"};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/// Native version."},
{"lineNum":"   86","line":"#[cfg(any(feature = \"std\", test))]"},
{"lineNum":"   87","line":"pub fn native_version() -> NativeVersion {"},
{"lineNum":"   88","line":"    NativeVersion {"},
{"lineNum":"   89","line":"        runtime_version: VERSION,"},
{"lineNum":"   90","line":"        can_author_with: Default::default(),"},
{"lineNum":"   91","line":"    }"},
{"lineNum":"   92","line":"}"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"type NegativeImbalance = <Balances as Currency<AccountId>>::NegativeImbalance;"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"parameter_types! {"},
{"lineNum":"   97","line":"    pub const BlockHashCount: BlockNumber = 250;"},
{"lineNum":"   98","line":"    pub const MaximumBlockWeight: Weight = 1_000_000_000;"},
{"lineNum":"   99","line":"    pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);"},
{"lineNum":"  100","line":"    pub const MaximumBlockLength: u32 = 5 * 1024 * 1024;"},
{"lineNum":"  101","line":"    pub const Version: RuntimeVersion = VERSION;"},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"impl system::Trait for Runtime {"},
{"lineNum":"  105","line":"    type Origin = Origin;"},
{"lineNum":"  106","line":"    type Call = Call;"},
{"lineNum":"  107","line":"    type Index = Nonce;"},
{"lineNum":"  108","line":"    type BlockNumber = BlockNumber;"},
{"lineNum":"  109","line":"    type Hash = Hash;"},
{"lineNum":"  110","line":"    type Hashing = BlakeTwo256;"},
{"lineNum":"  111","line":"    type AccountId = AccountId;"},
{"lineNum":"  112","line":"    type Lookup = Indices;"},
{"lineNum":"  113","line":"    type Header = generic::Header<BlockNumber, BlakeTwo256>;"},
{"lineNum":"  114","line":"    type WeightMultiplierUpdate = WeightMultiplierUpdateHandler;"},
{"lineNum":"  115","line":"    type Event = Event;"},
{"lineNum":"  116","line":"    type BlockHashCount = BlockHashCount;"},
{"lineNum":"  117","line":"    type MaximumBlockWeight = MaximumBlockWeight;"},
{"lineNum":"  118","line":"    type MaximumBlockLength = MaximumBlockLength;"},
{"lineNum":"  119","line":"    type AvailableBlockRatio = AvailableBlockRatio;"},
{"lineNum":"  120","line":"    type Version = Version;"},
{"lineNum":"  121","line":"}"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"parameter_types! {"},
{"lineNum":"  124","line":"    pub const EpochDuration: u64 = EPOCH_DURATION_IN_BLOCKS as u64;"},
{"lineNum":"  125","line":"    pub const ExpectedBlockTime: Moment = MILLISECS_PER_BLOCK;"},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"impl babe::Trait for Runtime {"},
{"lineNum":"  129","line":"    type EpochDuration = EpochDuration;"},
{"lineNum":"  130","line":"    type ExpectedBlockTime = ExpectedBlockTime;"},
{"lineNum":"  131","line":"}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"impl indices::Trait for Runtime {"},
{"lineNum":"  134","line":"    type IsDeadAccount = Balances;"},
{"lineNum":"  135","line":"    type AccountIndex = AccountIndex;"},
{"lineNum":"  136","line":"    type ResolveHint = indices::SimpleResolveHint<Self::AccountId, Self::AccountIndex>;"},
{"lineNum":"  137","line":"    type Event = Event;"},
{"lineNum":"  138","line":"}"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"parameter_types! {"},
{"lineNum":"  141","line":"    pub const ExistentialDeposit: Balance = 10 * CENTS;"},
{"lineNum":"  142","line":"    pub const TransferFee: Balance = 1 * CENTS;"},
{"lineNum":"  143","line":"    pub const CreationFee: Balance = 1 * CENTS;"},
{"lineNum":"  144","line":"    pub const TransactionBaseFee: Balance = 1 * CENTS;"},
{"lineNum":"  145","line":"    pub const TransactionByteFee: Balance = 10 * MILLICENTS;"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"/// Splits fees 80/20 between treasury and block author."},
{"lineNum":"  149","line":"pub type DealWithFees = SplitTwoWays<"},
{"lineNum":"  150","line":"    Balance,"},
{"lineNum":"  151","line":"    NegativeImbalance,"},
{"lineNum":"  152","line":"    _4,"},
{"lineNum":"  153","line":"    Treasury, // 4 parts (80%) goes to the treasury."},
{"lineNum":"  154","line":"    _1,"},
{"lineNum":"  155","line":"    ToAuthor, // 1 part (20%) goes to the block author."},
{"lineNum":"  156","line":">;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"impl balances::Trait for Runtime {"},
{"lineNum":"  159","line":"    type Balance = Balance;"},
{"lineNum":"  160","line":"    type OnFreeBalanceZero = ((Staking, Contracts), Session);"},
{"lineNum":"  161","line":"    type OnNewAccount = Indices;"},
{"lineNum":"  162","line":"    type Event = Event;"},
{"lineNum":"  163","line":"    type TransactionPayment = DealWithFees;"},
{"lineNum":"  164","line":"    type DustRemoval = ();"},
{"lineNum":"  165","line":"    type TransferPayment = ();"},
{"lineNum":"  166","line":"    type ExistentialDeposit = ExistentialDeposit;"},
{"lineNum":"  167","line":"    type TransferFee = TransferFee;"},
{"lineNum":"  168","line":"    type CreationFee = CreationFee;"},
{"lineNum":"  169","line":"    type TransactionBaseFee = TransactionBaseFee;"},
{"lineNum":"  170","line":"    type TransactionByteFee = TransactionByteFee;"},
{"lineNum":"  171","line":"    type WeightToFee = WeightToFee;"},
{"lineNum":"  172","line":"    type Identity = Identity;"},
{"lineNum":"  173","line":"}"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"parameter_types! {"},
{"lineNum":"  176","line":"    pub const MinimumPeriod: u64 = SLOT_DURATION / 2;"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"impl timestamp::Trait for Runtime {"},
{"lineNum":"  180","line":"    type Moment = u64;"},
{"lineNum":"  181","line":"    type OnTimestampSet = Babe;"},
{"lineNum":"  182","line":"    type MinimumPeriod = MinimumPeriod;"},
{"lineNum":"  183","line":"}"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"parameter_types! {"},
{"lineNum":"  186","line":"    pub const UncleGenerations: u32 = 0;"},
{"lineNum":"  187","line":"}"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"// TODO: substrate#2986 implement this properly"},
{"lineNum":"  190","line":"impl authorship::Trait for Runtime {"},
{"lineNum":"  191","line":"    type FindAuthor = session::FindAccountFromAuthorIndex<Self, Babe>;"},
{"lineNum":"  192","line":"    type UncleGenerations = UncleGenerations;"},
{"lineNum":"  193","line":"    type FilterUncle = ();"},
{"lineNum":"  194","line":"    type EventHandler = Staking;"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"parameter_types! {"},
{"lineNum":"  198","line":"    pub const Period: BlockNumber = 10 * MINUTES;"},
{"lineNum":"  199","line":"    pub const Offset: BlockNumber = 0;"},
{"lineNum":"  200","line":"}"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"type SessionHandlers = (Grandpa, Babe, ImOnline, AuthorityDiscovery);"},
{"lineNum":"  203","line":"impl_opaque_keys! {"},
{"lineNum":"  204","line":"    pub struct SessionKeys {"},
{"lineNum":"  205","line":"        #[id(key_types::GRANDPA)]"},
{"lineNum":"  206","line":"        pub grandpa: GrandpaId,"},
{"lineNum":"  207","line":"        #[id(key_types::BABE)]"},
{"lineNum":"  208","line":"        pub babe: BabeId,"},
{"lineNum":"  209","line":"        #[id(key_types::IM_ONLINE)]"},
{"lineNum":"  210","line":"        pub im_online: ImOnlineId,"},
{"lineNum":"  211","line":"    }"},
{"lineNum":"  212","line":"}"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"// NOTE: `SessionHandler` and `SessionKeys` are co-dependent: One key will be used for each handler."},
{"lineNum":"  215","line":"// The number and order of items in `SessionHandler` *MUST* be the same number and order of keys in"},
{"lineNum":"  216","line":"// `SessionKeys`."},
{"lineNum":"  217","line":"// TODO: Introduce some structure to tie these together to make it a bit less of a footgun. This"},
{"lineNum":"  218","line":"// should be easy, since OneSessionHandler trait provides the `Key` as an associated type. #2858"},
{"lineNum":"  219","line":"parameter_types! {"},
{"lineNum":"  220","line":"    pub const DisabledValidatorsThreshold: Perbill = Perbill::from_percent(17);"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"impl session::Trait for Runtime {"},
{"lineNum":"  224","line":"    type OnSessionEnding = Staking;"},
{"lineNum":"  225","line":"    type SessionHandler = SessionHandlers;"},
{"lineNum":"  226","line":"    type ShouldEndSession = Babe;"},
{"lineNum":"  227","line":"    type Event = Event;"},
{"lineNum":"  228","line":"    type Keys = SessionKeys;"},
{"lineNum":"  229","line":"    type SelectInitialValidators = Staking;"},
{"lineNum":"  230","line":"    type ValidatorId = AccountId;"},
{"lineNum":"  231","line":"    type ValidatorIdOf = staking::StashOf<Self>;"},
{"lineNum":"  232","line":"    type DisabledValidatorsThreshold = DisabledValidatorsThreshold;"},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"impl session::historical::Trait for Runtime {"},
{"lineNum":"  236","line":"    type FullIdentification = staking::Exposure<AccountId, Balance>;"},
{"lineNum":"  237","line":"    type FullIdentificationOf = staking::ExposureOf<Self>;"},
{"lineNum":"  238","line":"}"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"srml_staking_reward_curve::build! {","class":"linePartCov","hits":"10","order":"7775","possible_hits":"13",},
{"lineNum":"  241","line":"    const REWARD_CURVE: PiecewiseLinear<\'static> = curve!("},
{"lineNum":"  242","line":"        min_inflation: 0_025_000,"},
{"lineNum":"  243","line":"        max_inflation: 0_100_000,"},
{"lineNum":"  244","line":"        ideal_stake: 0_500_000,"},
{"lineNum":"  245","line":"        falloff: 0_050_000,"},
{"lineNum":"  246","line":"        max_piece_count: 40,"},
{"lineNum":"  247","line":"        test_precision: 0_005_000,"},
{"lineNum":"  248","line":"    );"},
{"lineNum":"  249","line":"}","class":"linePartCov","hits":"5","order":"7801","possible_hits":"8",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"parameter_types! {"},
{"lineNum":"  252","line":"    // Six sessions in an era (24 hours)."},
{"lineNum":"  253","line":"    pub const SessionsPerEra: SessionIndex = 6;"},
{"lineNum":"  254","line":"    // 28 eras for unbonding (28 days)."},
{"lineNum":"  255","line":"    pub const BondingDuration: staking::EraIndex = 28;"},
{"lineNum":"  256","line":"    pub const RewardCurve: &\'static PiecewiseLinear<\'static> = &REWARD_CURVE;"},
{"lineNum":"  257","line":"}"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"impl staking::Trait for Runtime {"},
{"lineNum":"  260","line":"    type OnRewardMinted = Treasury;"},
{"lineNum":"  261","line":"    type CurrencyToVote = CurrencyToVoteHandler;"},
{"lineNum":"  262","line":"    type Event = Event;"},
{"lineNum":"  263","line":"    type Currency = Balances;"},
{"lineNum":"  264","line":"    type Slash = Treasury;"},
{"lineNum":"  265","line":"    type Reward = ();"},
{"lineNum":"  266","line":"    type SessionsPerEra = SessionsPerEra;"},
{"lineNum":"  267","line":"    type BondingDuration = BondingDuration;"},
{"lineNum":"  268","line":"    type SessionInterface = Self;"},
{"lineNum":"  269","line":"    type Time = Timestamp;"},
{"lineNum":"  270","line":"    type RewardCurve = RewardCurve;"},
{"lineNum":"  271","line":"}"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"parameter_types! {"},
{"lineNum":"  274","line":"    pub const LaunchPeriod: BlockNumber = 28 * 24 * 60 * MINUTES;"},
{"lineNum":"  275","line":"    pub const VotingPeriod: BlockNumber = 28 * 24 * 60 * MINUTES;"},
{"lineNum":"  276","line":"    pub const EmergencyVotingPeriod: BlockNumber = 3 * 24 * 60 * MINUTES;"},
{"lineNum":"  277","line":"    pub const MinimumDeposit: Balance = 100 * DOLLARS;"},
{"lineNum":"  278","line":"    pub const EnactmentPeriod: BlockNumber = 30 * 24 * 60 * MINUTES;"},
{"lineNum":"  279","line":"    pub const CooloffPeriod: BlockNumber = 28 * 24 * 60 * MINUTES;"},
{"lineNum":"  280","line":"}"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"impl democracy::Trait for Runtime {"},
{"lineNum":"  283","line":"    type Proposal = Call;"},
{"lineNum":"  284","line":"    type Event = Event;"},
{"lineNum":"  285","line":"    type Currency = Balances;"},
{"lineNum":"  286","line":"    type EnactmentPeriod = EnactmentPeriod;"},
{"lineNum":"  287","line":"    type LaunchPeriod = LaunchPeriod;"},
{"lineNum":"  288","line":"    type VotingPeriod = VotingPeriod;"},
{"lineNum":"  289","line":"    type EmergencyVotingPeriod = EmergencyVotingPeriod;"},
{"lineNum":"  290","line":"    type MinimumDeposit = MinimumDeposit;"},
{"lineNum":"  291","line":"    /// A straight majority of the council can decide what their next motion is."},
{"lineNum":"  292","line":"    type ExternalOrigin = collective::EnsureProportionAtLeast<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  293","line":"    /// A super-majority can have the next scheduled referendum be a straight majority-carries vote."},
{"lineNum":"  294","line":"    type ExternalMajorityOrigin ="},
{"lineNum":"  295","line":"        collective::EnsureProportionAtLeast<_3, _4, AccountId, CouncilCollective>;"},
{"lineNum":"  296","line":"    /// A unanimous council can have the next scheduled referendum be a straight default-carries"},
{"lineNum":"  297","line":"    /// (NTB) vote."},
{"lineNum":"  298","line":"    type ExternalDefaultOrigin ="},
{"lineNum":"  299","line":"        collective::EnsureProportionAtLeast<_1, _1, AccountId, CouncilCollective>;"},
{"lineNum":"  300","line":"    /// Two thirds of the technical committee can have an ExternalMajority/ExternalDefault vote"},
{"lineNum":"  301","line":"    /// be tabled immediately and with a shorter voting/enactment period."},
{"lineNum":"  302","line":"    type FastTrackOrigin ="},
{"lineNum":"  303","line":"        collective::EnsureProportionAtLeast<_2, _3, AccountId, TechnicalCollective>;"},
{"lineNum":"  304","line":"    // To cancel a proposal which has been passed, 2/3 of the council must agree to it."},
{"lineNum":"  305","line":"    type CancellationOrigin ="},
{"lineNum":"  306","line":"        collective::EnsureProportionAtLeast<_2, _3, AccountId, CouncilCollective>;"},
{"lineNum":"  307","line":"    // Any single technical committee member may veto a coming council proposal, however they can"},
{"lineNum":"  308","line":"    // only do it once and it lasts only for the cooloff period."},
{"lineNum":"  309","line":"    type VetoOrigin = collective::EnsureMember<AccountId, TechnicalCollective>;"},
{"lineNum":"  310","line":"    type CooloffPeriod = CooloffPeriod;"},
{"lineNum":"  311","line":"}"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"type CouncilCollective = collective::Instance1;"},
{"lineNum":"  314","line":"impl collective::Trait<CouncilCollective> for Runtime {"},
{"lineNum":"  315","line":"    type Origin = Origin;"},
{"lineNum":"  316","line":"    type Proposal = Call;"},
{"lineNum":"  317","line":"    type Event = Event;"},
{"lineNum":"  318","line":"}"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"parameter_types! {"},
{"lineNum":"  321","line":"    pub const ContractTransferFee: Balance = 9999999999 * DOLLARS;"},
{"lineNum":"  322","line":"    pub const ContractCreationFee: Balance = 1 * CENTS;"},
{"lineNum":"  323","line":"    pub const ContractTransactionBaseFee: Balance = 1 * CENTS;"},
{"lineNum":"  324","line":"    pub const ContractTransactionByteFee: Balance = 10 * MILLICENTS;"},
{"lineNum":"  325","line":"    pub const ContractFee: Balance = 1 * CENTS;"},
{"lineNum":"  326","line":"    pub const TombstoneDeposit: Balance = 1 * DOLLARS;"},
{"lineNum":"  327","line":"    pub const RentByteFee: Balance = 1 * DOLLARS;"},
{"lineNum":"  328","line":"    pub const RentDepositOffset: Balance = 1000 * DOLLARS;"},
{"lineNum":"  329","line":"    pub const SurchargeReward: Balance = 150 * DOLLARS;"},
{"lineNum":"  330","line":"}"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"impl contracts::Trait for Runtime {"},
{"lineNum":"  333","line":"    type Currency = Balances;"},
{"lineNum":"  334","line":"    type Call = Call;"},
{"lineNum":"  335","line":"    type Event = Event;"},
{"lineNum":"  336","line":"    type DetermineContractAddress = contracts::SimpleAddressDeterminator<Runtime>;"},
{"lineNum":"  337","line":"    type ComputeDispatchFee = contracts::DefaultDispatchFeeComputor<Runtime>;"},
{"lineNum":"  338","line":"    type TrieIdGenerator = contracts::TrieIdFromParentCounter<Runtime>;"},
{"lineNum":"  339","line":"    type GasPayment = ();"},
{"lineNum":"  340","line":"    type SignedClaimHandicap = contracts::DefaultSignedClaimHandicap;"},
{"lineNum":"  341","line":"    type TombstoneDeposit = TombstoneDeposit;"},
{"lineNum":"  342","line":"    type StorageSizeOffset = contracts::DefaultStorageSizeOffset;"},
{"lineNum":"  343","line":"    type RentByteFee = RentByteFee;"},
{"lineNum":"  344","line":"    type RentDepositOffset = RentDepositOffset;"},
{"lineNum":"  345","line":"    type SurchargeReward = SurchargeReward;"},
{"lineNum":"  346","line":"    type TransferFee = ContractTransferFee;"},
{"lineNum":"  347","line":"    type CreationFee = ContractCreationFee;"},
{"lineNum":"  348","line":"    type TransactionBaseFee = ContractTransactionBaseFee;"},
{"lineNum":"  349","line":"    type TransactionByteFee = ContractTransactionByteFee;"},
{"lineNum":"  350","line":"    type ContractFee = ContractFee;"},
{"lineNum":"  351","line":"    type CallBaseFee = contracts::DefaultCallBaseFee;"},
{"lineNum":"  352","line":"    type InstantiateBaseFee = contracts::DefaultInstantiateBaseFee;"},
{"lineNum":"  353","line":"    type MaxDepth = contracts::DefaultMaxDepth;"},
{"lineNum":"  354","line":"    type MaxValueSize = contracts::DefaultMaxValueSize;"},
{"lineNum":"  355","line":"    type BlockGasLimit = contracts::DefaultBlockGasLimit;"},
{"lineNum":"  356","line":"}"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"parameter_types! {"},
{"lineNum":"  359","line":"    pub const CandidacyBond: Balance = 10 * DOLLARS;"},
{"lineNum":"  360","line":"    pub const VotingBond: Balance = 1 * DOLLARS;"},
{"lineNum":"  361","line":"    pub const VotingFee: Balance = 2 * DOLLARS;"},
{"lineNum":"  362","line":"    pub const MinimumVotingLock: Balance = 1 * DOLLARS;"},
{"lineNum":"  363","line":"    pub const PresentSlashPerVoter: Balance = 1 * CENTS;"},
{"lineNum":"  364","line":"    pub const CarryCount: u32 = 6;"},
{"lineNum":"  365","line":"    // one additional vote should go by before an inactive voter can be reaped."},
{"lineNum":"  366","line":"    pub const InactiveGracePeriod: VoteIndex = 1;"},
{"lineNum":"  367","line":"    pub const ElectionsVotingPeriod: BlockNumber = 2 * DAYS;"},
{"lineNum":"  368","line":"    pub const DecayRatio: u32 = 0;"},
{"lineNum":"  369","line":"}"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"impl elections::Trait for Runtime {"},
{"lineNum":"  372","line":"    type Event = Event;"},
{"lineNum":"  373","line":"    type Currency = Balances;"},
{"lineNum":"  374","line":"    type BadPresentation = ();"},
{"lineNum":"  375","line":"    type BadReaper = ();"},
{"lineNum":"  376","line":"    type BadVoterIndex = ();"},
{"lineNum":"  377","line":"    type LoserCandidate = ();"},
{"lineNum":"  378","line":"    type ChangeMembers = Council;"},
{"lineNum":"  379","line":"    type CandidacyBond = CandidacyBond;"},
{"lineNum":"  380","line":"    type VotingBond = VotingBond;"},
{"lineNum":"  381","line":"    type VotingFee = VotingFee;"},
{"lineNum":"  382","line":"    type MinimumVotingLock = MinimumVotingLock;"},
{"lineNum":"  383","line":"    type PresentSlashPerVoter = PresentSlashPerVoter;"},
{"lineNum":"  384","line":"    type CarryCount = CarryCount;"},
{"lineNum":"  385","line":"    type InactiveGracePeriod = InactiveGracePeriod;"},
{"lineNum":"  386","line":"    type VotingPeriod = ElectionsVotingPeriod;"},
{"lineNum":"  387","line":"    type DecayRatio = DecayRatio;"},
{"lineNum":"  388","line":"}"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"type TechnicalCollective = collective::Instance2;"},
{"lineNum":"  391","line":"impl collective::Trait<TechnicalCollective> for Runtime {"},
{"lineNum":"  392","line":"    type Origin = Origin;"},
{"lineNum":"  393","line":"    type Proposal = Call;"},
{"lineNum":"  394","line":"    type Event = Event;"},
{"lineNum":"  395","line":"}"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"impl membership::Trait<membership::Instance1> for Runtime {"},
{"lineNum":"  398","line":"    type Event = Event;"},
{"lineNum":"  399","line":"    type AddOrigin = collective::EnsureProportionMoreThan<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  400","line":"    type RemoveOrigin = collective::EnsureProportionMoreThan<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  401","line":"    type SwapOrigin = collective::EnsureProportionMoreThan<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  402","line":"    type ResetOrigin = collective::EnsureProportionMoreThan<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  403","line":"    type MembershipInitialized = TechnicalCommittee;"},
{"lineNum":"  404","line":"    type MembershipChanged = TechnicalCommittee;"},
{"lineNum":"  405","line":"}"},
{"lineNum":"  406","line":""},
{"lineNum":"  407","line":"parameter_types! {"},
{"lineNum":"  408","line":"    pub const ProposalBond: Permill = Permill::from_percent(5);"},
{"lineNum":"  409","line":"    pub const ProposalBondMinimum: Balance = 100 * DOLLARS;"},
{"lineNum":"  410","line":"    pub const SpendPeriod: BlockNumber = 24 * DAYS;"},
{"lineNum":"  411","line":"    pub const Burn: Permill = Permill::from_percent(5);"},
{"lineNum":"  412","line":"}"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"impl treasury::Trait for Runtime {"},
{"lineNum":"  415","line":"    type Currency = Balances;"},
{"lineNum":"  416","line":"    type ApproveOrigin = collective::EnsureProportionAtLeast<_2, _3, AccountId, CouncilCollective>;"},
{"lineNum":"  417","line":"    type RejectOrigin = collective::EnsureProportionMoreThan<_1, _2, AccountId, CouncilCollective>;"},
{"lineNum":"  418","line":"    type Event = Event;"},
{"lineNum":"  419","line":"    type MintedForSpending = ();"},
{"lineNum":"  420","line":"    type ProposalRejection = ();"},
{"lineNum":"  421","line":"    type ProposalBond = ProposalBond;"},
{"lineNum":"  422","line":"    type ProposalBondMinimum = ProposalBondMinimum;"},
{"lineNum":"  423","line":"    type SpendPeriod = SpendPeriod;"},
{"lineNum":"  424","line":"    type Burn = Burn;"},
{"lineNum":"  425","line":"}"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"impl offences::Trait for Runtime {"},
{"lineNum":"  428","line":"    type Event = Event;"},
{"lineNum":"  429","line":"    type IdentificationTuple = session::historical::IdentificationTuple<Self>;"},
{"lineNum":"  430","line":"    type OnOffenceHandler = Staking;"},
{"lineNum":"  431","line":"}"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"type SubmitTransaction = TransactionSubmitter<ImOnlineId, Runtime, UncheckedExtrinsic>;"},
{"lineNum":"  434","line":"impl im_online::Trait for Runtime {"},
{"lineNum":"  435","line":"    type AuthorityId = ImOnlineId;"},
{"lineNum":"  436","line":"    type Event = Event;"},
{"lineNum":"  437","line":"    type Call = Call;"},
{"lineNum":"  438","line":"    type SubmitTransaction = SubmitTransaction;"},
{"lineNum":"  439","line":"    type ReportUnresponsiveness = ();"},
{"lineNum":"  440","line":"}"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"impl grandpa::Trait for Runtime {"},
{"lineNum":"  443","line":"    type Event = Event;"},
{"lineNum":"  444","line":"}"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"impl authority_discovery::Trait for Runtime {}"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"parameter_types! {"},
{"lineNum":"  449","line":"    pub const WindowSize: BlockNumber = finality_tracker::DEFAULT_WINDOW_SIZE.into();"},
{"lineNum":"  450","line":"    pub const ReportLatency: BlockNumber = finality_tracker::DEFAULT_REPORT_LATENCY.into();"},
{"lineNum":"  451","line":"}"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"impl finality_tracker::Trait for Runtime {"},
{"lineNum":"  454","line":"    type OnFinalizationStalled = ();"},
{"lineNum":"  455","line":"    type WindowSize = WindowSize;"},
{"lineNum":"  456","line":"    type ReportLatency = ReportLatency;"},
{"lineNum":"  457","line":"}"},
{"lineNum":"  458","line":""},
{"lineNum":"  459","line":"parameter_types! {"},
{"lineNum":"  460","line":"    pub const Prefix: &\'static [u8] = b\"Pay POLY to the Polymesh account:\";"},
{"lineNum":"  461","line":"}"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"impl sudo::Trait for Runtime {"},
{"lineNum":"  464","line":"    type Event = Event;"},
{"lineNum":"  465","line":"    type Proposal = Call;"},
{"lineNum":"  466","line":"}"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"impl asset::Trait for Runtime {"},
{"lineNum":"  469","line":"    type Event = Event;"},
{"lineNum":"  470","line":"    //type TokenBalance = u128;"},
{"lineNum":"  471","line":"    type Currency = Balances;"},
{"lineNum":"  472","line":"}"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"impl utils::Trait for Runtime {"},
{"lineNum":"  475","line":"    type TokenBalance = u128;"},
{"lineNum":"  476","line":"    fn as_u128(v: Self::TokenBalance) -> u128 {"},
{"lineNum":"  477","line":"        v"},
{"lineNum":"  478","line":"    }"},
{"lineNum":"  479","line":"    fn as_tb(v: u128) -> Self::TokenBalance {"},
{"lineNum":"  480","line":"        v"},
{"lineNum":"  481","line":"    }"},
{"lineNum":"  482","line":"    fn token_balance_to_balance(v: Self::TokenBalance) -> <Self as balances::Trait>::Balance {"},
{"lineNum":"  483","line":"        v"},
{"lineNum":"  484","line":"    }"},
{"lineNum":"  485","line":"    fn balance_to_token_balance(v: <Self as balances::Trait>::Balance) -> Self::TokenBalance {"},
{"lineNum":"  486","line":"        v"},
{"lineNum":"  487","line":"    }"},
{"lineNum":"  488","line":"    fn validator_id_to_account_id(v: <Self as session::Trait>::ValidatorId) -> Self::AccountId {"},
{"lineNum":"  489","line":"        v"},
{"lineNum":"  490","line":"    }"},
{"lineNum":"  491","line":"}"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"impl simple_token::Trait for Runtime {"},
{"lineNum":"  494","line":"    type Event = Event;"},
{"lineNum":"  495","line":"}"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"impl general_tm::Trait for Runtime {"},
{"lineNum":"  498","line":"    type Event = Event;"},
{"lineNum":"  499","line":"    type Asset = Asset;"},
{"lineNum":"  500","line":"}"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"impl sto_capped::Trait for Runtime {"},
{"lineNum":"  503","line":"    type Event = Event;"},
{"lineNum":"  504","line":"    type SimpleTokenTrait = SimpleToken;"},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"impl percentage_tm::Trait for Runtime {"},
{"lineNum":"  508","line":"    type Event = Event;"},
{"lineNum":"  509","line":"}"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"impl identity::Trait for Runtime {"},
{"lineNum":"  512","line":"    type Event = Event;"},
{"lineNum":"  513","line":"}"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"impl contracts_wrapper::Trait for Runtime {}"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"impl exemption::Trait for Runtime {"},
{"lineNum":"  518","line":"    type Event = Event;"},
{"lineNum":"  519","line":"    type Asset = Asset;"},
{"lineNum":"  520","line":"}"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"impl dividend::Trait for Runtime {"},
{"lineNum":"  523","line":"    type Event = Event;"},
{"lineNum":"  524","line":"}"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"impl registry::Trait for Runtime {}"},
{"lineNum":"  527","line":""},
{"lineNum":"  528","line":"construct_runtime!("},
{"lineNum":"  529","line":"\tpub enum Runtime where"},
{"lineNum":"  530","line":"\t\tBlock = Block,"},
{"lineNum":"  531","line":"\t\tNodeBlock = primitives::Block,"},
{"lineNum":"  532","line":"\t\tUncheckedExtrinsic = UncheckedExtrinsic"},
{"lineNum":"  533","line":"\t{"},
{"lineNum":"  534","line":"\t\t// Basic stuff; balances is uncallable initially."},
{"lineNum":"  535","line":"\t\tSystem: system::{Module, Call, Storage, Config, Event},"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"\t\t// Must be before session."},
{"lineNum":"  538","line":"\t\tBabe: babe::{Module, Call, Storage, Config, Inherent(Timestamp)},"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"\t\tTimestamp: timestamp::{Module, Call, Storage, Inherent},"},
{"lineNum":"  541","line":"\t\tIndices: indices,"},
{"lineNum":"  542","line":"\t\tBalances: balances::{Module, Call, Storage, Config<T>, Event<T>},"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"\t\t// Consensus srml_support."},
{"lineNum":"  545","line":"\t\tAuthorship: authorship::{Module, Call, Storage},"},
{"lineNum":"  546","line":"\t\tStaking: staking::{default, OfflineWorker},"},
{"lineNum":"  547","line":"\t\tOffences: offences::{Module, Call, Storage, Event},"},
{"lineNum":"  548","line":"\t\tSession: session::{Module, Call, Storage, Event, Config<T>},"},
{"lineNum":"  549","line":"\t\tFinalityTracker: finality_tracker::{Module, Call, Inherent},"},
{"lineNum":"  550","line":"\t\tGrandpa: grandpa::{Module, Call, Storage, Config, Event},"},
{"lineNum":"  551","line":"\t\tImOnline: im_online::{Module, Call, Storage, Event<T>, ValidateUnsigned, Config<T>},"},
{"lineNum":"  552","line":"        AuthorityDiscovery: authority_discovery::{Module, Call, Config<T>},"},
{"lineNum":"  553","line":""},
{"lineNum":"  554","line":"\t\t// Governance stuff; uncallable initially."},
{"lineNum":"  555","line":"\t\tDemocracy: democracy::{Module, Call, Storage, Config, Event<T>},"},
{"lineNum":"  556","line":"\t\tCouncil: collective::<Instance1>::{Module, Call, Storage, Origin<T>, Event<T>, Config<T>},"},
{"lineNum":"  557","line":"\t\tTechnicalCommittee: collective::<Instance2>::{Module, Call, Storage, Origin<T>, Event<T>, Config<T>},"},
{"lineNum":"  558","line":"\t\tElections: elections::{Module, Call, Storage, Event<T>, Config<T>},"},
{"lineNum":"  559","line":"\t\tTechnicalMembership: membership::<Instance1>::{Module, Call, Storage, Event<T>, Config<T>},"},
{"lineNum":"  560","line":"\t\tTreasury: treasury::{Module, Call, Storage, Event<T>},"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"\t\t// Sudo. Usable initially."},
{"lineNum":"  563","line":"\t\t// RELEASE: remove this for release build."},
{"lineNum":"  564","line":"\t\tSudo: sudo,"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"        // Contracts"},
{"lineNum":"  567","line":"        Contracts: contracts::{Module, Call, Storage, Config<T>, Event<T>},"},
{"lineNum":"  568","line":"        // ContractsWrapper: contracts_wrapper::{Module, Call, Storage},"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"\t\t//Polymesh"},
{"lineNum":"  571","line":"\t\tAsset: asset::{Module, Call, Storage, Config<T>, Event<T>},"},
{"lineNum":"  572","line":"        Dividend: dividend::{Module, Call, Storage, Event<T>},"},
{"lineNum":"  573","line":"        Registry: registry::{Module, Call, Storage},"},
{"lineNum":"  574","line":"        Identity: identity::{Module, Call, Storage, Event<T>, Config<T>},"},
{"lineNum":"  575","line":"        GeneralTM: general_tm::{Module, Call, Storage, Event<T>},"},
{"lineNum":"  576","line":"        STOCapped: sto_capped::{Module, Call, Storage, Event<T>},"},
{"lineNum":"  577","line":"        PercentageTM: percentage_tm::{Module, Call, Storage, Event<T>},"},
{"lineNum":"  578","line":"        Exemption: exemption::{Module, Call, Storage, Event},"},
{"lineNum":"  579","line":"\t\tSimpleToken: simple_token::{Module, Call, Storage, Event<T>, Config<T>},"},
{"lineNum":"  580","line":"\t}"},
{"lineNum":"  581","line":");"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"/// The address format for describing accounts."},
{"lineNum":"  584","line":"pub type Address = <Indices as StaticLookup>::Source;"},
{"lineNum":"  585","line":"/// Block header type as expected by this runtime."},
{"lineNum":"  586","line":"pub type Header = generic::Header<BlockNumber, BlakeTwo256>;"},
{"lineNum":"  587","line":"/// Block type as expected by this runtime."},
{"lineNum":"  588","line":"pub type Block = generic::Block<Header, UncheckedExtrinsic>;"},
{"lineNum":"  589","line":"/// A Block signed with a Justification"},
{"lineNum":"  590","line":"pub type SignedBlock = generic::SignedBlock<Block>;"},
{"lineNum":"  591","line":"/// BlockId type as expected by this runtime."},
{"lineNum":"  592","line":"pub type BlockId = generic::BlockId<Block>;"},
{"lineNum":"  593","line":"/// The SignedExtension to the basic transaction logic."},
{"lineNum":"  594","line":"pub type SignedExtra = ("},
{"lineNum":"  595","line":"    system::CheckVersion<Runtime>,"},
{"lineNum":"  596","line":"    system::CheckGenesis<Runtime>,"},
{"lineNum":"  597","line":"    system::CheckEra<Runtime>,"},
{"lineNum":"  598","line":"    system::CheckNonce<Runtime>,"},
{"lineNum":"  599","line":"    system::CheckWeight<Runtime>,"},
{"lineNum":"  600","line":"    balances::TakeFees<Runtime>,"},
{"lineNum":"  601","line":"    contracts::CheckBlockGasLimit<Runtime>,"},
{"lineNum":"  602","line":");"},
{"lineNum":"  603","line":"/// Unchecked extrinsic type as expected by this runtime."},
{"lineNum":"  604","line":"pub type UncheckedExtrinsic = generic::UncheckedExtrinsic<Address, Call, Signature, SignedExtra>;"},
{"lineNum":"  605","line":"/// Extrinsic type that has already been checked."},
{"lineNum":"  606","line":"pub type CheckedExtrinsic = generic::CheckedExtrinsic<AccountId, Nonce, Call>;"},
{"lineNum":"  607","line":"/// Executive: handles dispatch to the various modules."},
{"lineNum":"  608","line":"pub type Executive ="},
{"lineNum":"  609","line":"    executive::Executive<Runtime, Block, system::ChainContext<Runtime>, Runtime, AllModules>;"},
{"lineNum":"  610","line":""},
{"lineNum":"  611","line":"impl_runtime_apis! {"},
{"lineNum":"  612","line":"    impl client_api::Core<Block> for Runtime {"},
{"lineNum":"  613","line":"        fn version() -> RuntimeVersion {"},
{"lineNum":"  614","line":"            VERSION"},
{"lineNum":"  615","line":"        }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"        fn execute_block(block: Block) {"},
{"lineNum":"  618","line":"            Executive::execute_block(block)"},
{"lineNum":"  619","line":"        }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        fn initialize_block(header: &<Block as BlockT>::Header) {"},
{"lineNum":"  622","line":"            Executive::initialize_block(header)"},
{"lineNum":"  623","line":"        }"},
{"lineNum":"  624","line":"    }"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"    impl client_api::Metadata<Block> for Runtime {"},
{"lineNum":"  627","line":"        fn metadata() -> OpaqueMetadata {"},
{"lineNum":"  628","line":"            Runtime::metadata().into()"},
{"lineNum":"  629","line":"        }"},
{"lineNum":"  630","line":"    }"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    impl block_builder_api::BlockBuilder<Block> for Runtime {"},
{"lineNum":"  633","line":"        fn apply_extrinsic(extrinsic: <Block as BlockT>::Extrinsic) -> ApplyResult {"},
{"lineNum":"  634","line":"            Executive::apply_extrinsic(extrinsic)"},
{"lineNum":"  635","line":"        }"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"        fn finalize_block() -> <Block as BlockT>::Header {"},
{"lineNum":"  638","line":"            Executive::finalize_block()"},
{"lineNum":"  639","line":"        }"},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"        fn inherent_extrinsics(data: InherentData) -> Vec<<Block as BlockT>::Extrinsic> {"},
{"lineNum":"  642","line":"            data.create_extrinsics()"},
{"lineNum":"  643","line":"        }"},
{"lineNum":"  644","line":""},
{"lineNum":"  645","line":"        fn check_inherents(block: Block, data: InherentData) -> CheckInherentsResult {"},
{"lineNum":"  646","line":"            data.check_extrinsics(&block)"},
{"lineNum":"  647","line":"        }"},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"        fn random_seed() -> <Block as BlockT>::Hash {"},
{"lineNum":"  650","line":"            System::random_seed()"},
{"lineNum":"  651","line":"        }"},
{"lineNum":"  652","line":"    }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    impl client_api::TaggedTransactionQueue<Block> for Runtime {"},
{"lineNum":"  655","line":"        fn validate_transaction(tx: <Block as BlockT>::Extrinsic) -> TransactionValidity {"},
{"lineNum":"  656","line":"            Executive::validate_transaction(tx)"},
{"lineNum":"  657","line":"        }"},
{"lineNum":"  658","line":"    }"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"    impl offchain_primitives::OffchainWorkerApi<Block> for Runtime {"},
{"lineNum":"  661","line":"        fn offchain_worker(number: sr_primitives::traits::NumberFor<Block>) {"},
{"lineNum":"  662","line":"            Executive::offchain_worker(number)"},
{"lineNum":"  663","line":"        }"},
{"lineNum":"  664","line":"    }"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    impl fg_primitives::GrandpaApi<Block> for Runtime {"},
{"lineNum":"  667","line":"        fn grandpa_authorities() -> Vec<(GrandpaId, u64)> {"},
{"lineNum":"  668","line":"            Grandpa::grandpa_authorities()"},
{"lineNum":"  669","line":"        }"},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    impl babe_primitives::BabeApi<Block> for Runtime {"},
{"lineNum":"  673","line":"        fn configuration() -> babe_primitives::BabeConfiguration {"},
{"lineNum":"  674","line":"            // The choice of `c` parameter (where `1 - c` represents the"},
{"lineNum":"  675","line":"            // probability of a slot being empty), is done in accordance to the"},
{"lineNum":"  676","line":"            // slot duration and expected target block time, for safely"},
{"lineNum":"  677","line":"            // resisting network delays of maximum two seconds."},
{"lineNum":"  678","line":"            // <https://research.web3.foundation/en/latest/polkadot/BABE/Babe/#6-practical-results>"},
{"lineNum":"  679","line":"            babe_primitives::BabeConfiguration {"},
{"lineNum":"  680","line":"                slot_duration: Babe::slot_duration(),"},
{"lineNum":"  681","line":"                epoch_length: EpochDuration::get(),"},
{"lineNum":"  682","line":"                c: PRIMARY_PROBABILITY,"},
{"lineNum":"  683","line":"                genesis_authorities: Babe::authorities(),"},
{"lineNum":"  684","line":"                randomness: Babe::randomness(),"},
{"lineNum":"  685","line":"                secondary_slots: true,"},
{"lineNum":"  686","line":"            }"},
{"lineNum":"  687","line":"        }"},
{"lineNum":"  688","line":"    }"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"    impl authority_discovery_primitives::AuthorityDiscoveryApi<Block> for Runtime {"},
{"lineNum":"  691","line":"        fn authorities() -> Vec<EncodedAuthorityId> {"},
{"lineNum":"  692","line":"            AuthorityDiscovery::authorities().into_iter()"},
{"lineNum":"  693","line":"                .map(|id| id.encode())"},
{"lineNum":"  694","line":"                .map(EncodedAuthorityId)"},
{"lineNum":"  695","line":"                .collect()"},
{"lineNum":"  696","line":"        }"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"        fn sign(payload: &Vec<u8>) -> Option<(EncodedSignature, EncodedAuthorityId)> {"},
{"lineNum":"  699","line":"            AuthorityDiscovery::sign(payload).map(|(sig, id)| {"},
{"lineNum":"  700","line":"                (EncodedSignature(sig.encode()), EncodedAuthorityId(id.encode()))"},
{"lineNum":"  701","line":"            })"},
{"lineNum":"  702","line":"        }"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"        fn verify(payload: &Vec<u8>, signature: &EncodedSignature, authority_id: &EncodedAuthorityId) -> bool {"},
{"lineNum":"  705","line":"            let signature = match ImOnlineSignature::decode(&mut &signature.0[..]) {"},
{"lineNum":"  706","line":"                Ok(s) => s,"},
{"lineNum":"  707","line":"                _ => return false,"},
{"lineNum":"  708","line":"            };"},
{"lineNum":"  709","line":""},
{"lineNum":"  710","line":"            let authority_id = match ImOnlineId::decode(&mut &authority_id.0[..]) {"},
{"lineNum":"  711","line":"                Ok(id) => id,"},
{"lineNum":"  712","line":"                _ => return false,"},
{"lineNum":"  713","line":"            };"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"            AuthorityDiscovery::verify(payload, signature, authority_id)"},
{"lineNum":"  716","line":"        }"},
{"lineNum":"  717","line":"    }"},
{"lineNum":"  718","line":""},
{"lineNum":"  719","line":"    impl substrate_session::SessionKeys<Block> for Runtime {"},
{"lineNum":"  720","line":"        fn generate_session_keys(seed: Option<Vec<u8>>) -> Vec<u8> {"},
{"lineNum":"  721","line":"            let seed = seed.as_ref().map(|s| rstd::str::from_utf8(&s).expect(\"Seed is an utf8 string\"));"},
{"lineNum":"  722","line":"            SessionKeys::generate(seed)"},
{"lineNum":"  723","line":"        }"},
{"lineNum":"  724","line":"    }"},
{"lineNum":"  725","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 3, "covered" : 3,};
var merged_data = [];
