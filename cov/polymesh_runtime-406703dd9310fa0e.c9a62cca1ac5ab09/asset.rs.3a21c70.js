var data = {lines:[
{"lineNum":"    1","line":"use crate::balances;"},
{"lineNum":"    2","line":"use crate::constants::*;"},
{"lineNum":"    3","line":"use crate::general_tm;"},
{"lineNum":"    4","line":"use crate::identity;"},
{"lineNum":"    5","line":"use crate::percentage_tm;"},
{"lineNum":"    6","line":"use crate::registry::{self, RegistryEntry, TokenType};"},
{"lineNum":"    7","line":"use crate::utils;"},
{"lineNum":"    8","line":"use codec::Encode;"},
{"lineNum":"    9","line":"use core::result::Result as StdResult;"},
{"lineNum":"   10","line":"use primitives::Key;"},
{"lineNum":"   11","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"   12","line":"use session;"},
{"lineNum":"   13","line":"use sr_primitives::traits::{CheckedAdd, CheckedSub};"},
{"lineNum":"   14","line":"use srml_support::traits::{Currency, ExistenceRequirement, WithdrawReason};"},
{"lineNum":"   15","line":"use srml_support::{decl_event, decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"   16","line":"use system::{self, ensure_signed};"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// The module\'s configuration trait."},
{"lineNum":"   19","line":"pub trait Trait:"},
{"lineNum":"   20","line":"    system::Trait"},
{"lineNum":"   21","line":"    + general_tm::Trait"},
{"lineNum":"   22","line":"    + percentage_tm::Trait"},
{"lineNum":"   23","line":"    + utils::Trait"},
{"lineNum":"   24","line":"    + balances::Trait"},
{"lineNum":"   25","line":"    + identity::Trait"},
{"lineNum":"   26","line":"    + session::Trait"},
{"lineNum":"   27","line":"    + registry::Trait"},
{"lineNum":"   28","line":"{"},
{"lineNum":"   29","line":"    /// The overarching event type."},
{"lineNum":"   30","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   31","line":"    //type TokenBalance: Parameter + Member + SimpleArithmetic + Codec + Default + Copy + As<usize> + As<u64>;"},
{"lineNum":"   32","line":"    type Currency: Currency<Self::AccountId>;"},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"// struct to store the token details"},
{"lineNum":"   36","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Debug)]","class":"linePartCov","hits":"11","order":"6637","possible_hits":"33",},
{"lineNum":"   37","line":"pub struct SecurityToken<U> {","class":"lineCov","hits":"1","order":"6963","possible_hits":"1",},
{"lineNum":"   38","line":"    pub name: Vec<u8>,","class":"linePartCov","hits":"7","order":"6799","possible_hits":"12",},
{"lineNum":"   39","line":"    pub total_supply: U,","class":"linePartCov","hits":"8","order":"6800","possible_hits":"15",},
{"lineNum":"   40","line":"    pub owner_did: Vec<u8>,","class":"linePartCov","hits":"9","order":"6801","possible_hits":"17",},
{"lineNum":"   41","line":"    pub granularity: u128,","class":"linePartCov","hits":"8","order":"6802","possible_hits":"14",},
{"lineNum":"   42","line":"    pub decimals: u16,","class":"linePartCov","hits":"7","order":"6803","possible_hits":"12",},
{"lineNum":"   43","line":"}","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"decl_storage! {","class":"linePartCov","hits":"65","order":"6618","possible_hits":"86",},
{"lineNum":"   46","line":"    trait Store for Module<T: Trait> as Asset {"},
{"lineNum":"   47","line":"        // The DID of the fee collector"},
{"lineNum":"   48","line":"        FeeCollector get(fee_collector) config(): T::AccountId;"},
{"lineNum":"   49","line":"        // details of the token corresponding to the token ticker"},
{"lineNum":"   50","line":"        pub Tokens get(token_details): map Vec<u8> => SecurityToken<T::TokenBalance>;"},
{"lineNum":"   51","line":"        // (ticker, did) -> balance"},
{"lineNum":"   52","line":"        pub BalanceOf get(balance_of): map (Vec<u8>, Vec<u8>) => T::TokenBalance;"},
{"lineNum":"   53","line":"        // (ticker, sender, spender) -> allowance amount"},
{"lineNum":"   54","line":"        Allowance get(allowance): map (Vec<u8>, Vec<u8>, Vec<u8>) => T::TokenBalance;"},
{"lineNum":"   55","line":"        // cost in base currency to create a token"},
{"lineNum":"   56","line":"        AssetCreationFee get(asset_creation_fee) config(): T::Balance;"},
{"lineNum":"   57","line":"        // Checkpoints created per token"},
{"lineNum":"   58","line":"        pub TotalCheckpoints get(total_checkpoints_of): map (Vec<u8>) => u64;"},
{"lineNum":"   59","line":"        // Total supply of the token at the checkpoint"},
{"lineNum":"   60","line":"        pub CheckpointTotalSupply get(total_supply_at): map (Vec<u8>, u64) => T::TokenBalance;"},
{"lineNum":"   61","line":"        // Balance of a DID at a checkpoint; (ticker, DID, checkpoint ID)"},
{"lineNum":"   62","line":"        CheckpointBalance get(balance_at_checkpoint): map (Vec<u8>, Vec<u8>, u64) => T::TokenBalance;"},
{"lineNum":"   63","line":"        // Last checkpoint updated for a DID\'s balance; (ticker, DID) -> List of checkpoints where user balance changed"},
{"lineNum":"   64","line":"        UserCheckpoints get(user_checkpoints): map (Vec<u8>, Vec<u8>) => Vec<u64>;"},
{"lineNum":"   65","line":"        // The documents attached to the tokens"},
{"lineNum":"   66","line":"        // (ticker, document name) -> (URI, document hash)"},
{"lineNum":"   67","line":"        Documents get(documents): map (Vec<u8>, Vec<u8>) => (Vec<u8>, Vec<u8>, T::Moment);"},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"}","class":"linePartCov","hits":"29","order":"6619","possible_hits":"86",},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"// public interface for this runtime module"},
{"lineNum":"   72","line":"decl_module! {"},
{"lineNum":"   73","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   74","line":"        // initialize the default event for this module"},
{"lineNum":"   75","line":"        fn deposit_event() = default;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        // multiple tokens in one go"},
{"lineNum":"   78","line":"        pub fn batch_create_token(origin, did: Vec<u8>, names: Vec<Vec<u8>>, tickers: Vec<Vec<u8>>, total_supply_values: Vec<T::TokenBalance>, divisible_values: Vec<bool>) -> Result {"},
{"lineNum":"   79","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"   80","line":"            let sender_key = Key::try_from( sender.encode())?;"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   83","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &sender_key), \"sender must be a signing key for DID\");"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"            // Ensure we get a complete set of parameters for every token"},
{"lineNum":"   86","line":"            ensure!((names.len() == tickers.len()) == (total_supply_values.len() == divisible_values.len()), \"Inconsistent token param vector lengths\");"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"            // bytes_to_upper() all tickers"},
{"lineNum":"   89","line":"            let mut tickers = tickers;"},
{"lineNum":"   90","line":"            tickers.iter_mut().for_each(|ticker| {"},
{"lineNum":"   91","line":"                *ticker = utils::bytes_to_upper(ticker.as_slice());"},
{"lineNum":"   92","line":"            });"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"            // A helper vec for duplicate ticker detection"},
{"lineNum":"   95","line":"            let mut seen_tickers = Vec::new();"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"            let n_tokens = names.len();"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"            // Perform per-token checks beforehand"},
{"lineNum":"  100","line":"            for i in 0..n_tokens {"},
{"lineNum":"  101","line":"                // checking max size for name and ticker"},
{"lineNum":"  102","line":"                // byte arrays (vecs) with no max size should be avoided"},
{"lineNum":"  103","line":"                ensure!(names[i].len() <= 64, \"token name cannot exceed 64 bytes\");"},
{"lineNum":"  104","line":"                ensure!(tickers[i].len() <= 32, \"token ticker cannot exceed 32 bytes\");"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"                ensure!(!seen_tickers.contains(&tickers[i]), \"Duplicate tickers in token batch\");"},
{"lineNum":"  107","line":"                seen_tickers.push(tickers[i].clone());"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"                let granularity = if !divisible_values[i] { (10 as u128).pow(18) } else { 1_u128 };"},
{"lineNum":"  110","line":"                ensure!(<T as utils::Trait>::as_u128(total_supply_values[i]) % granularity == (0 as u128), \"Invalid Total supply\");"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"                // Ensure the uniqueness of the ticker"},
{"lineNum":"  113","line":"                ensure!(!<Tokens<T>>::exists(tickers[i].clone()), \"Ticker is already issued\");"},
{"lineNum":"  114","line":"            }"},
{"lineNum":"  115","line":"            // TODO: Fix fee withdrawal"},
{"lineNum":"  116","line":"            // Withdraw n_tokens * Self::asset_creation_fee() from sender DID"},
{"lineNum":"  117","line":"            // let validators = <session::Module<T>>::validators();"},
{"lineNum":"  118","line":"            // let fee = Self::asset_creation_fee().checked_mul(&<FeeOf<T> as As<usize>>::sa(n_tokens)).ok_or(\"asset_creation_fee() * n_tokens overflows\")?;"},
{"lineNum":"  119","line":"            // let validator_len;"},
{"lineNum":"  120","line":"            // if validators.len() < 1 {"},
{"lineNum":"  121","line":"            //     validator_len = <FeeOf<T> as As<usize>>::sa(1);"},
{"lineNum":"  122","line":"            // } else {"},
{"lineNum":"  123","line":"            //     validator_len = <FeeOf<T> as As<usize>>::sa(validators.len());"},
{"lineNum":"  124","line":"            // }"},
{"lineNum":"  125","line":"            // let proportional_fee = fee / validator_len;"},
{"lineNum":"  126","line":"            // let proportional_fee_in_balance = <T::CurrencyToBalance as Convert<FeeOf<T>, T::Balance>>::convert(proportional_fee);"},
{"lineNum":"  127","line":"            // for v in &validators {"},
{"lineNum":"  128","line":"            //     <balances::Module<T> as Currency<_>>::transfer(&sender, v, proportional_fee_in_balance)?;"},
{"lineNum":"  129","line":"            // }"},
{"lineNum":"  130","line":"            // let remainder_fee = fee - (proportional_fee * validator_len);"},
{"lineNum":"  131","line":"            // let remainder_fee_balance = <T::CurrencyToBalance as Convert<FeeOf<T>, T::Balance>>::convert(proportional_fee);"},
{"lineNum":"  132","line":"            // <identity::DidRecords<T>>::mutate(did.clone(), |record| -> Result {"},
{"lineNum":"  133","line":"            //     record.balance = record.balance.checked_sub(&remainder_fee_balance).ok_or(\"Could not charge for token issuance\")?;"},
{"lineNum":"  134","line":"            //     Ok(())"},
{"lineNum":"  135","line":"            // })?;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"            // Perform per-ticker issuance"},
{"lineNum":"  138","line":"            for i in 0..n_tokens {"},
{"lineNum":"  139","line":"                let granularity = if !divisible_values[i] { (10 as u128).pow(18) } else { 1_u128 };"},
{"lineNum":"  140","line":"                let token = SecurityToken {"},
{"lineNum":"  141","line":"                    name: names[i].clone(),"},
{"lineNum":"  142","line":"                    total_supply: total_supply_values[i],"},
{"lineNum":"  143","line":"                    owner_did: did.clone(),"},
{"lineNum":"  144","line":"                    granularity: granularity,"},
{"lineNum":"  145","line":"                    decimals: 18"},
{"lineNum":"  146","line":"                };"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"                let reg_entry = RegistryEntry { token_type: TokenType::AssetToken as u32, owner_did: did.clone() };"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"                <registry::Module<T>>::put(&tickers[i], &reg_entry)?;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"                <Tokens<T>>::insert(&tickers[i], token);"},
{"lineNum":"  153","line":"                <BalanceOf<T>>::insert((tickers[i].clone(), did.clone()), total_supply_values[i]);"},
{"lineNum":"  154","line":"                Self::deposit_event(RawEvent::IssuedToken(tickers[i].clone(), total_supply_values[i], did.clone(), granularity, 18));"},
{"lineNum":"  155","line":"                sr_primitives::print(\"Batch token initialized\");"},
{"lineNum":"  156","line":"            }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"            Ok(())"},
{"lineNum":"  159","line":"        }"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"        // initializes a new token"},
{"lineNum":"  162","line":"        // takes a name, ticker, total supply for the token"},
{"lineNum":"  163","line":"        // makes the initiating account the owner of the token"},
{"lineNum":"  164","line":"        // the balance of the owner is set to total supply"},
{"lineNum":"  165","line":"        pub fn create_token(origin, did: Vec<u8>, name: Vec<u8>, _ticker: Vec<u8>, total_supply: T::TokenBalance, divisible: bool) -> Result {"},
{"lineNum":"  166","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());","class":"lineCov","hits":"6","order":"6595","possible_hits":"6",},
{"lineNum":"  167","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"4","order":"6596","possible_hits":"8",},
{"lineNum":"  168","line":"            let sender_key = Key::try_from(sender.encode())?;","class":"linePartCov","hits":"4","order":"6597","possible_hits":"6",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  171","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &sender_key), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"2","order":"6598","possible_hits":"4",},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"            // checking max size for name and ticker"},
{"lineNum":"  174","line":"            // byte arrays (vecs) with no max size should be avoided"},
{"lineNum":"  175","line":"            ensure!(name.len() <= 64, \"token name cannot exceed 64 bytes\");","class":"linePartCov","hits":"4","order":"6599","possible_hits":"6",},
{"lineNum":"  176","line":"            ensure!(ticker.len() <= 32, \"token ticker cannot exceed 32 bytes\");","class":"linePartCov","hits":"4","order":"6600","possible_hits":"6",},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"            let granularity = if !divisible { (10 as u128).pow(18) } else { 1_u128 };","class":"lineCov","hits":"4","order":"6601","possible_hits":"4",},
{"lineNum":"  179","line":"            ensure!(<T as utils::Trait>::as_u128(total_supply) % granularity == (0 as u128), \"Invalid Total supply\");","class":"linePartCov","hits":"2","order":"6602","possible_hits":"6",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"            ensure!(<registry::Module<T>>::get(&ticker).is_none(), \"Ticker is already taken\");","class":"linePartCov","hits":"4","order":"6614","possible_hits":"6",},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            // Alternative way to take a fee - fee is proportionaly paid to the validators and dust is burned"},
{"lineNum":"  184","line":"            let validators = <session::Module<T>>::validators();","class":"lineCov","hits":"2","order":"6616","possible_hits":"2",},
{"lineNum":"  185","line":"            let fee = Self::asset_creation_fee();","class":"lineCov","hits":"2","order":"6617","possible_hits":"2",},
{"lineNum":"  186","line":"            let validator_len:T::Balance;"},
{"lineNum":"  187","line":"            if validators.len() < 1 {","class":"lineCov","hits":"4","order":"6620","possible_hits":"4",},
{"lineNum":"  188","line":"                validator_len = T::Balance::from(1 as u32);","class":"lineCov","hits":"2","order":"6621","possible_hits":"2",},
{"lineNum":"  189","line":"            } else {"},
{"lineNum":"  190","line":"                validator_len = T::Balance::from(validators.len() as u32);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  191","line":"            }"},
{"lineNum":"  192","line":"            let proportional_fee = fee / validator_len;","class":"lineCov","hits":"2","order":"6622","possible_hits":"2",},
{"lineNum":"  193","line":"            for v in validators {","class":"linePartCov","hits":"4","order":"6624","possible_hits":"10",},
{"lineNum":"  194","line":"                <balances::Module<T> as Currency<_>>::transfer(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  195","line":"                    &sender,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"                    &<T as utils::Trait>::validator_id_to_account_id(v),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  197","line":"                    proportional_fee","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  198","line":"                )?;","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  199","line":"            }","class":"linePartCov","hits":"2","order":"6625","possible_hits":"10",},
{"lineNum":"  200","line":"            let remainder_fee = fee - (proportional_fee * validator_len);","class":"lineCov","hits":"2","order":"6626","possible_hits":"2",},
{"lineNum":"  201","line":"            let _withdraw_result = <balances::Module<T>>::withdraw(&sender, remainder_fee, WithdrawReason::Fee, ExistenceRequirement::KeepAlive)?;","class":"linePartCov","hits":"2","order":"6628","possible_hits":"4",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"            let token = SecurityToken {","class":"lineCov","hits":"2","order":"6633","possible_hits":"2",},
{"lineNum":"  204","line":"                name,","class":"lineCov","hits":"2","order":"6629","possible_hits":"2",},
{"lineNum":"  205","line":"                total_supply,","class":"lineCov","hits":"2","order":"6630","possible_hits":"2",},
{"lineNum":"  206","line":"                owner_did: did.clone(),","class":"lineCov","hits":"2","order":"6631","possible_hits":"2",},
{"lineNum":"  207","line":"                granularity: granularity,","class":"lineCov","hits":"2","order":"6632","possible_hits":"2",},
{"lineNum":"  208","line":"                decimals: 18"},
{"lineNum":"  209","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"            let reg_entry = RegistryEntry { token_type: TokenType::AssetToken as u32, owner_did: did.clone() };","class":"lineCov","hits":"4","order":"6634","possible_hits":"4",},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            <registry::Module<T>>::put(&ticker, &reg_entry)?;","class":"linePartCov","hits":"6","order":"6635","possible_hits":"8",},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"            <Tokens<T>>::insert(&ticker, token);","class":"lineCov","hits":"2","order":"6636","possible_hits":"2",},
{"lineNum":"  216","line":"            <BalanceOf<T>>::insert((ticker.clone(), did.clone()), total_supply);","class":"lineCov","hits":"2","order":"6638","possible_hits":"2",},
{"lineNum":"  217","line":"            Self::deposit_event(RawEvent::IssuedToken(ticker, total_supply, did, granularity, 18));","class":"lineCov","hits":"2","order":"6639","possible_hits":"2",},
{"lineNum":"  218","line":"            sr_primitives::print(\"Initialized!!!\");","class":"lineCov","hits":"2","order":"6640","possible_hits":"2",},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"            Ok(())","class":"lineCov","hits":"2","order":"6663","possible_hits":"2",},
{"lineNum":"  221","line":"        }"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"        // transfer tokens from one account to another"},
{"lineNum":"  224","line":"        // origin is assumed as sender"},
{"lineNum":"  225","line":"        pub fn transfer(_origin, did: Vec<u8>, _ticker: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance) -> Result {"},
{"lineNum":"  226","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());","class":"lineCov","hits":"4","order":"6904","possible_hits":"4",},
{"lineNum":"  227","line":"            let sender = ensure_signed(_origin)?;","class":"linePartCov","hits":"6","order":"6905","possible_hits":"10",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  230","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"4","order":"6906","possible_hits":"8",},
{"lineNum":"  231","line":""},
{"lineNum":"  232","line":"            ensure!(Self::_is_valid_transfer(&ticker, &did, &to_did, value)? == ERC1400_TRANSFER_SUCCESS, \"Transfer restrictions failed\");","class":"linePartCov","hits":"4","order":"6907","possible_hits":"6",},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"            Self::_transfer(&ticker, &did, &to_did, value)","class":"lineCov","hits":"4","order":"6953","possible_hits":"4",},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"        /// Forces a transfer between two accounts. Can only be called by token owner"},
{"lineNum":"  238","line":"        pub fn controller_transfer(_origin, did: Vec<u8>, _ticker: Vec<u8>, from_did: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance, data: Vec<u8>, operator_data: Vec<u8>) -> Result {"},
{"lineNum":"  239","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"  240","line":"            let sender = ensure_signed(_origin)?;"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  243","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from( sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"            ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"            Self::_transfer(&ticker, &from_did, &to_did, value.clone())?;"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"            Self::deposit_event(RawEvent::ControllerTransfer(did, ticker, from_did, to_did, value, data, operator_data));"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"            Ok(())"},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        // approve token transfer from one account to another"},
{"lineNum":"  255","line":"        // once this is done, transfer_from can be called with corresponding values"},
{"lineNum":"  256","line":"        fn approve(_origin, did: Vec<u8>, _ticker: Vec<u8>, spender_did: Vec<u8>, value: T::TokenBalance) -> Result {"},
{"lineNum":"  257","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"  258","line":"            let sender = ensure_signed(_origin)?;"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  261","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from( sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"            ensure!(<BalanceOf<T>>::exists((ticker.clone(), did.clone())), \"Account does not own this token\");"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            let allowance = Self::allowance((ticker.clone(), did.clone(), spender_did.clone()));"},
{"lineNum":"  266","line":"            let updated_allowance = allowance.checked_add(&value).ok_or(\"overflow in calculating allowance\")?;"},
{"lineNum":"  267","line":"            <Allowance<T>>::insert((ticker.clone(), did.clone(), spender_did.clone()), updated_allowance);"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"            Self::deposit_event(RawEvent::Approval(ticker, did, spender_did, value));"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"            Ok(())"},
{"lineNum":"  272","line":"        }"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"        // implemented in the open-zeppelin way - increase/decrease allownace"},
{"lineNum":"  275","line":"        // if approved, transfer from an account to another account without owner\'s signature"},
{"lineNum":"  276","line":"        pub fn transfer_from(_origin, did: Vec<u8>,  _ticker: Vec<u8>, from_did: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance) -> Result {"},
{"lineNum":"  277","line":"            let spender = ensure_signed(_origin)?;"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"            // Check that spender is allowed to act on behalf of `did`"},
{"lineNum":"  280","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from( spender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"  283","line":"            let ticker_from_did_did = (ticker.clone(), from_did.clone(), did.clone());"},
{"lineNum":"  284","line":"            ensure!(<Allowance<T>>::exists(&ticker_from_did_did), \"Allowance does not exist\");"},
{"lineNum":"  285","line":"            let allowance = Self::allowance(&ticker_from_did_did);"},
{"lineNum":"  286","line":"            ensure!(allowance >= value, \"Not enough allowance\");"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"            // using checked_sub (safe math) to avoid overflow"},
{"lineNum":"  289","line":"            let updated_allowance = allowance.checked_sub(&value).ok_or(\"overflow in calculating allowance\")?;"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"            ensure!(Self::_is_valid_transfer(&ticker, &from_did, &to_did, value)? == ERC1400_TRANSFER_SUCCESS, \"Transfer restrictions failed\");"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"            Self::_transfer(&ticker, &from_did, &to_did, value)?;"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"            // Change allowance afterwards"},
{"lineNum":"  296","line":"            <Allowance<T>>::insert(&ticker_from_did_did, updated_allowance);"},
{"lineNum":"  297","line":""},
{"lineNum":"  298","line":"            Self::deposit_event(RawEvent::Approval(ticker, from_did, did, value));"},
{"lineNum":"  299","line":"            Ok(())"},
{"lineNum":"  300","line":"        }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"        // called by issuer to create checkpoints"},
{"lineNum":"  303","line":"        pub fn create_checkpoint(_origin, did: Vec<u8>, _ticker: Vec<u8>) -> Result {"},
{"lineNum":"  304","line":"            let ticker = utils::bytes_to_upper(_ticker.as_slice());","class":"lineCov","hits":"4","order":"6996","possible_hits":"4",},
{"lineNum":"  305","line":"            let sender = ensure_signed(_origin)?;","class":"linePartCov","hits":"6","order":"6997","possible_hits":"10",},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  308","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from( sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"4","order":"6998","possible_hits":"8",},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"            ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");","class":"linePartCov","hits":"4","order":"6999","possible_hits":"6",},
{"lineNum":"  311","line":"            Self::_create_checkpoint(&ticker)","class":"lineCov","hits":"4","order":"7007","possible_hits":"4",},
{"lineNum":"  312","line":"        }"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"        pub fn issue(origin, did: Vec<u8>, ticker: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance, _data: Vec<u8>) -> Result {"},
{"lineNum":"  315","line":"            let upper_ticker = utils::bytes_to_upper(&ticker);"},
{"lineNum":"  316","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  319","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, & Key::try_from( sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"            ensure!(Self::is_owner(&upper_ticker, &did), \"user is not authorized\");"},
{"lineNum":"  322","line":"            Self::_mint(&upper_ticker, &to_did, value)"},
{"lineNum":"  323","line":"        }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"        // Mint a token to multiple investors"},
{"lineNum":"  326","line":"        pub fn batch_issue(origin, did: Vec<u8>, ticker: Vec<u8>, investor_dids: Vec<Vec<u8>>, values: Vec<T::TokenBalance>) -> Result {"},
{"lineNum":"  327","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  330","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from( sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"            ensure!(investor_dids.len() == values.len(), \"Investor/amount list length inconsistent\");"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"            ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"            // A helper vec for calculated new investor balances"},
{"lineNum":"  338","line":"            let mut updated_balances = Vec::with_capacity(investor_dids.len());"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"            // A helper vec for calculated new investor balances"},
{"lineNum":"  341","line":"            let mut current_balances = Vec::with_capacity(investor_dids.len());"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"            // Get current token details for supply update"},
{"lineNum":"  344","line":"            let mut token = Self::token_details(ticker.clone());"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"            // A round of per-investor checks"},
{"lineNum":"  347","line":"            for i in 0..investor_dids.len() {"},
{"lineNum":"  348","line":"                ensure!("},
{"lineNum":"  349","line":"                    Self::check_granularity(&ticker, values[i]),"},
{"lineNum":"  350","line":"                    \"Invalid granularity\""},
{"lineNum":"  351","line":"                );"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"                current_balances.push(Self::balance_of((ticker.clone(), investor_dids[i].clone())));"},
{"lineNum":"  354","line":"                updated_balances.push(current_balances[i]"},
{"lineNum":"  355","line":"                    .checked_add(&values[i])"},
{"lineNum":"  356","line":"                    .ok_or(\"overflow in calculating balance\")?);"},
{"lineNum":"  357","line":""},
{"lineNum":"  358","line":"                // verify transfer check"},
{"lineNum":"  359","line":"                ensure!(Self::_is_valid_transfer(&ticker, &vec![], &investor_dids[i], values[i])? == ERC1400_TRANSFER_SUCCESS, \"Transfer restrictions failed\");"},
{"lineNum":"  360","line":""},
{"lineNum":"  361","line":"                // New total supply must be valid"},
{"lineNum":"  362","line":"                token.total_supply = token"},
{"lineNum":"  363","line":"                    .total_supply"},
{"lineNum":"  364","line":"                    .checked_add(&values[i])"},
{"lineNum":"  365","line":"                    .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  366","line":"            }"},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"            // After checks are ensured introduce side effects"},
{"lineNum":"  369","line":"            for i in 0..investor_dids.len() {"},
{"lineNum":"  370","line":"                Self::_update_checkpoint(&ticker, &investor_dids[i], current_balances[i]);"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"                <BalanceOf<T>>::insert((ticker.clone(), investor_dids[i].clone()), updated_balances[i]);"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"                Self::deposit_event(RawEvent::Issued(ticker.clone(), investor_dids[i].clone(), values[i]));"},
{"lineNum":"  375","line":"            }"},
{"lineNum":"  376","line":"            <Tokens<T>>::insert(ticker.clone(), token);"},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"            Ok(())"},
{"lineNum":"  379","line":"        }"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"        pub fn redeem(_origin, did: Vec<u8>, _ticker: Vec<u8>, value: T::TokenBalance, _data: Vec<u8>) -> Result {"},
{"lineNum":"  382","line":"            let upper_ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"  383","line":"            let sender = ensure_signed(_origin)?;"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  386","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"            // Granularity check"},
{"lineNum":"  389","line":"            ensure!("},
{"lineNum":"  390","line":"                Self::check_granularity(&upper_ticker, value),"},
{"lineNum":"  391","line":"                \"Invalid granularity\""},
{"lineNum":"  392","line":"                );"},
{"lineNum":"  393","line":"            let ticker_did = (upper_ticker.clone(), did.clone());"},
{"lineNum":"  394","line":"            ensure!(<BalanceOf<T>>::exists(&ticker_did), \"Account does not own this token\");"},
{"lineNum":"  395","line":"            let burner_balance = Self::balance_of(&ticker_did);"},
{"lineNum":"  396","line":"            ensure!(burner_balance >= value, \"Not enough balance.\");"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"            // Reduce sender\'s balance"},
{"lineNum":"  399","line":"            let updated_burner_balance = burner_balance"},
{"lineNum":"  400","line":"                .checked_sub(&value)"},
{"lineNum":"  401","line":"                .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"            // verify transfer check"},
{"lineNum":"  404","line":"            ensure!(Self::_is_valid_transfer(&upper_ticker, &did, &vec![], value)? == ERC1400_TRANSFER_SUCCESS, \"Transfer restrictions failed\");"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"            //Decrease total supply"},
{"lineNum":"  407","line":"            let mut token = Self::token_details(&upper_ticker);"},
{"lineNum":"  408","line":"            token.total_supply = token.total_supply.checked_sub(&value).ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"            Self::_update_checkpoint(&upper_ticker, &did, burner_balance);"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"            <BalanceOf<T>>::insert((upper_ticker.clone(), did.clone()), updated_burner_balance);"},
{"lineNum":"  413","line":"            <Tokens<T>>::insert(&upper_ticker, token);"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"            Self::deposit_event(RawEvent::Redeemed(upper_ticker, did, value));"},
{"lineNum":"  416","line":""},
{"lineNum":"  417","line":"            Ok(())"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        pub fn redeem_from(_origin, did: Vec<u8>, _ticker: Vec<u8>, from_did: Vec<u8>, value: T::TokenBalance, _data: Vec<u8>) -> Result {"},
{"lineNum":"  422","line":"            let upper_ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"  423","line":"            let sender = ensure_signed(_origin)?;"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  426","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"            // Granularity check"},
{"lineNum":"  429","line":"            ensure!("},
{"lineNum":"  430","line":"                Self::check_granularity(&upper_ticker, value),"},
{"lineNum":"  431","line":"                \"Invalid granularity\""},
{"lineNum":"  432","line":"                );"},
{"lineNum":"  433","line":"            let ticker_did = (upper_ticker.clone(), did.clone());"},
{"lineNum":"  434","line":"            ensure!(<BalanceOf<T>>::exists(&ticker_did), \"Account does not own this token\");"},
{"lineNum":"  435","line":"            let burner_balance = Self::balance_of(&ticker_did);"},
{"lineNum":"  436","line":"            ensure!(burner_balance >= value, \"Not enough balance.\");"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"            // Reduce sender\'s balance"},
{"lineNum":"  439","line":"            let updated_burner_balance = burner_balance"},
{"lineNum":"  440","line":"                .checked_sub(&value)"},
{"lineNum":"  441","line":"                .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"            let ticker_from_did_did = (upper_ticker.clone(), from_did.clone(), did.clone());"},
{"lineNum":"  444","line":"            ensure!(<Allowance<T>>::exists(&ticker_from_did_did), \"Allowance does not exist\");"},
{"lineNum":"  445","line":"            let allowance = Self::allowance(&ticker_from_did_did);"},
{"lineNum":"  446","line":"            ensure!(allowance >= value, \"Not enough allowance\");"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"            ensure!(Self::_is_valid_transfer( &upper_ticker, &from_did, &vec![], value)? == ERC1400_TRANSFER_SUCCESS, \"Transfer restrictions failed\");"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"            let updated_allowance = allowance.checked_sub(&value).ok_or(\"overflow in calculating allowance\")?;"},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"            //Decrease total suply"},
{"lineNum":"  453","line":"            let mut token = Self::token_details(&upper_ticker);"},
{"lineNum":"  454","line":"            token.total_supply = token.total_supply.checked_sub(&value).ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"            Self::_update_checkpoint(&upper_ticker, &did, burner_balance);"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"            <Allowance<T>>::insert(&ticker_from_did_did, updated_allowance);"},
{"lineNum":"  459","line":"            <BalanceOf<T>>::insert(&ticker_did, updated_burner_balance);"},
{"lineNum":"  460","line":"            <Tokens<T>>::insert(&upper_ticker, token);"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"            Self::deposit_event(RawEvent::Redeemed(upper_ticker.clone(), did.clone(), value));"},
{"lineNum":"  463","line":"            Self::deposit_event(RawEvent::Approval(upper_ticker, from_did, did, value));"},
{"lineNum":"  464","line":""},
{"lineNum":"  465","line":"            Ok(())"},
{"lineNum":"  466","line":"        }"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"        /// Forces a redemption of an account\'s tokens. Can only be called by token owner"},
{"lineNum":"  469","line":"        pub fn controller_redeem(origin, did: Vec<u8>, ticker: Vec<u8>, token_holder_did: Vec<u8>, value: T::TokenBalance, data: Vec<u8>, operator_data: Vec<u8>) -> Result {"},
{"lineNum":"  470","line":"            let ticker = utils::bytes_to_upper(ticker.as_slice());"},
{"lineNum":"  471","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  474","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  475","line":"            ensure!(Self::is_owner(&ticker, &did), \"user is not token owner\");"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"            // Granularity check"},
{"lineNum":"  478","line":"            ensure!("},
{"lineNum":"  479","line":"                Self::check_granularity(&ticker, value),"},
{"lineNum":"  480","line":"                \"Invalid granularity\""},
{"lineNum":"  481","line":"                );"},
{"lineNum":"  482","line":"            let ticker_token_holder_did = (ticker.clone(), token_holder_did.clone());"},
{"lineNum":"  483","line":"            ensure!(<BalanceOf<T>>::exists( &ticker_token_holder_did), \"Account does not own this token\");"},
{"lineNum":"  484","line":"            let burner_balance = Self::balance_of(&ticker_token_holder_did);"},
{"lineNum":"  485","line":"            ensure!(burner_balance >= value, \"Not enough balance.\");"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"            // Reduce sender\'s balance"},
{"lineNum":"  488","line":"            let updated_burner_balance = burner_balance"},
{"lineNum":"  489","line":"                .checked_sub(&value)"},
{"lineNum":"  490","line":"                .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"            //Decrease total suply"},
{"lineNum":"  493","line":"            let mut token = Self::token_details(&ticker);"},
{"lineNum":"  494","line":"            token.total_supply = token.total_supply.checked_sub(&value).ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"            Self::_update_checkpoint(&ticker, &token_holder_did, burner_balance);"},
{"lineNum":"  497","line":""},
{"lineNum":"  498","line":"            <BalanceOf<T>>::insert(&ticker_token_holder_did, updated_burner_balance);"},
{"lineNum":"  499","line":"            <Tokens<T>>::insert(&ticker, token);"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"            Self::deposit_event(RawEvent::ControllerRedemption(ticker, did, token_holder_did, value, data, operator_data));"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"            Ok(())"},
{"lineNum":"  504","line":"        }"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"        pub fn change_granularity(origin, did: Vec<u8>, ticker: Vec<u8>, granularity: u128) -> Result {"},
{"lineNum":"  508","line":"            let ticker = utils::bytes_to_upper(ticker.as_slice());"},
{"lineNum":"  509","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  510","line":""},
{"lineNum":"  511","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  512","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"            ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");"},
{"lineNum":"  515","line":"            ensure!(granularity != 0_u128, \"Invalid granularity\");"},
{"lineNum":"  516","line":"            // Read the token details"},
{"lineNum":"  517","line":"            let mut token = Self::token_details(&ticker);"},
{"lineNum":"  518","line":"            //Increase total suply"},
{"lineNum":"  519","line":"            token.granularity = granularity;"},
{"lineNum":"  520","line":"            <Tokens<T>>::insert(&ticker, token);"},
{"lineNum":"  521","line":"            Self::deposit_event(RawEvent::GranularityChanged(ticker, granularity));"},
{"lineNum":"  522","line":"            Ok(())"},
{"lineNum":"  523","line":"        }"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"        /// Checks whether a transaction with given parameters can take place"},
{"lineNum":"  526","line":"        pub fn can_transfer(_origin, ticker: Vec<u8>, from_did: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance, data: Vec<u8>) {"},
{"lineNum":"  527","line":"            match Self::_is_valid_transfer(&ticker, &from_did, &to_did, value) {"},
{"lineNum":"  528","line":"                Ok(code) =>"},
{"lineNum":"  529","line":"                {"},
{"lineNum":"  530","line":"                    Self::deposit_event(RawEvent::CanTransfer(ticker, from_did, to_did, value, data, code as u32));"},
{"lineNum":"  531","line":"                },"},
{"lineNum":"  532","line":"                Err(msg) => {"},
{"lineNum":"  533","line":"                    // We emit a generic error with the event whenever there\'s an internal issue - i.e. captured"},
{"lineNum":"  534","line":"                    // in a string error and not using the status codes"},
{"lineNum":"  535","line":"                    sr_primitives::print(msg);"},
{"lineNum":"  536","line":"                    Self::deposit_event(RawEvent::CanTransfer(ticker, from_did, to_did, value, data, ERC1400_TRANSFER_FAILURE as u32));"},
{"lineNum":"  537","line":"                }"},
{"lineNum":"  538","line":"            }"},
{"lineNum":"  539","line":"        }"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"    /// An ERC1594 transfer with data"},
{"lineNum":"  542","line":"    pub fn transfer_with_data(origin, did: Vec<u8>, ticker: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance, data: Vec<u8>) -> Result {"},
{"lineNum":"  543","line":"        Self::transfer(origin, did.clone(), ticker.clone(), to_did.clone(), value)?;"},
{"lineNum":"  544","line":"        Self::deposit_event(RawEvent::TransferWithData(ticker, did, to_did, value, data));"},
{"lineNum":"  545","line":"        Ok(())"},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    /// An ERC1594 transfer_from with data"},
{"lineNum":"  549","line":"    pub fn transfer_from_with_data(origin, did: Vec<u8>, ticker: Vec<u8>, from_did: Vec<u8>, to_did: Vec<u8>, value: T::TokenBalance, data: Vec<u8>) -> Result {"},
{"lineNum":"  550","line":"        Self::transfer_from(origin, did.clone(), ticker.clone(), from_did.clone(),  to_did.clone(), value)?;"},
{"lineNum":"  551","line":"        Self::deposit_event(RawEvent::TransferWithData(ticker, from_did, to_did, value, data));"},
{"lineNum":"  552","line":"        Ok(())"},
{"lineNum":"  553","line":"    }"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"    pub fn is_issuable(_origin, ticker: Vec<u8>) {"},
{"lineNum":"  557","line":"        Self::deposit_event(RawEvent::IsIssuable(ticker, true));"},
{"lineNum":"  558","line":"    }"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"    pub fn get_document(_origin, ticker: Vec<u8>, name: Vec<u8>) -> Result {"},
{"lineNum":"  561","line":"        let record = <Documents<T>>::get((ticker.clone(), name.clone()));"},
{"lineNum":"  562","line":"        Self::deposit_event(RawEvent::GetDocument(ticker, name, record.0, record.1, record.2));"},
{"lineNum":"  563","line":"        Ok(())"},
{"lineNum":"  564","line":"    }"},
{"lineNum":"  565","line":""},
{"lineNum":"  566","line":"    pub fn set_document(origin, did: Vec<u8>, ticker: Vec<u8>, name: Vec<u8>, uri: Vec<u8>, document_hash: Vec<u8>) -> Result {"},
{"lineNum":"  567","line":"        let ticker = utils::bytes_to_upper(ticker.as_slice());"},
{"lineNum":"  568","line":"        let sender = ensure_signed(origin)?;"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"        // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  571","line":"        ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  572","line":"        ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"        <Documents<T>>::insert((ticker, name), (uri, document_hash, <timestamp::Module<T>>::get()));"},
{"lineNum":"  575","line":"        Ok(())"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    pub fn remove_document(origin, did: Vec<u8>, ticker: Vec<u8>, name: Vec<u8>) -> Result {"},
{"lineNum":"  579","line":"        let ticker = utils::bytes_to_upper(ticker.as_slice());"},
{"lineNum":"  580","line":"        let sender = ensure_signed(origin)?;"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"        // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  583","line":"        ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  584","line":"        ensure!(Self::is_owner(&ticker, &did), \"user is not authorized\");"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"        <Documents<T>>::remove((ticker, name));"},
{"lineNum":"  587","line":"        Ok(())"},
{"lineNum":"  588","line":"    }"},
{"lineNum":"  589","line":"}"},
{"lineNum":"  590","line":"}"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"decl_event! {"},
{"lineNum":"  593","line":"    pub enum Event<T>"},
{"lineNum":"  594","line":"        where"},
{"lineNum":"  595","line":"        Balance = <T as utils::Trait>::TokenBalance,"},
{"lineNum":"  596","line":"        Moment = <T as timestamp::Trait>::Moment,"},
{"lineNum":"  597","line":"        {"},
{"lineNum":"  598","line":"            // event for transfer of tokens"},
{"lineNum":"  599","line":"            // ticker, from DID, to DID, value"},
{"lineNum":"  600","line":"            Transfer(Vec<u8>, Vec<u8>, Vec<u8>, Balance),"},
{"lineNum":"  601","line":"            // event when an approval is made"},
{"lineNum":"  602","line":"            // ticker, owner DID, spender DID, value"},
{"lineNum":"  603","line":"            Approval(Vec<u8>, Vec<u8>, Vec<u8>, Balance),"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"            // ticker, beneficiary DID, value"},
{"lineNum":"  606","line":"            Issued(Vec<u8>, Vec<u8>, Balance),"},
{"lineNum":"  607","line":""},
{"lineNum":"  608","line":"            // ticker, DID, value"},
{"lineNum":"  609","line":"            Redeemed(Vec<u8>, Vec<u8>, Balance),"},
{"lineNum":"  610","line":"            // event for forced transfer of tokens"},
{"lineNum":"  611","line":"            // ticker, controller DID, from DID, to DID, value, data, operator data"},
{"lineNum":"  612","line":"            ControllerTransfer(Vec<u8>, Vec<u8>, Vec<u8>, Vec<u8>, Balance, Vec<u8>, Vec<u8>),"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"            // event for when a forced redemption takes place"},
{"lineNum":"  615","line":"            // ticker, controller DID, token holder DID, value, data, operator data"},
{"lineNum":"  616","line":"            ControllerRedemption(Vec<u8>, Vec<u8>, Vec<u8>, Balance, Vec<u8>, Vec<u8>),"},
{"lineNum":"  617","line":""},
{"lineNum":"  618","line":"            // Event for creation of the asset"},
{"lineNum":"  619","line":"            // ticker, total supply, owner DID, decimal"},
{"lineNum":"  620","line":"            IssuedToken(Vec<u8>, Balance, Vec<u8>, u128, u16),"},
{"lineNum":"  621","line":"            // Event for change granularity"},
{"lineNum":"  622","line":"            // ticker, granularity"},
{"lineNum":"  623","line":"            GranularityChanged(Vec<u8>, u128),"},
{"lineNum":"  624","line":""},
{"lineNum":"  625","line":"            // can_transfer() output"},
{"lineNum":"  626","line":"            // ticker, from_did, to_did, value, data, ERC1066 status"},
{"lineNum":"  627","line":"            // 0 - OK"},
{"lineNum":"  628","line":"            // 1,2... - Error, meanings TBD"},
{"lineNum":"  629","line":"            CanTransfer(Vec<u8>, Vec<u8>, Vec<u8>, Balance, Vec<u8>, u32),"},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"            // An additional event to Transfer; emitted when transfer_with_data is called; similar to"},
{"lineNum":"  632","line":"            // Transfer with data added at the end."},
{"lineNum":"  633","line":"            // ticker, from DID, to DID, value, data"},
{"lineNum":"  634","line":"            TransferWithData(Vec<u8>, Vec<u8>, Vec<u8>, Balance, Vec<u8>),"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"            // is_issuable() output"},
{"lineNum":"  637","line":"            // ticker, return value (true if issuable)"},
{"lineNum":"  638","line":"            IsIssuable(Vec<u8>, bool),"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"            // get_document() output"},
{"lineNum":"  641","line":"            // ticker, name, uri, hash, last modification date"},
{"lineNum":"  642","line":"            GetDocument(Vec<u8>, Vec<u8>, Vec<u8>, Vec<u8>, Moment),"},
{"lineNum":"  643","line":"        }"},
{"lineNum":"  644","line":"}"},
{"lineNum":"  645","line":""},
{"lineNum":"  646","line":"pub trait AssetTrait<V> {"},
{"lineNum":"  647","line":"    fn total_supply(ticker: &[u8]) -> V;"},
{"lineNum":"  648","line":"    fn balance(ticker: &[u8], did: Vec<u8>) -> V;"},
{"lineNum":"  649","line":"    fn _mint_from_sto(ticker: &[u8], sender_did: &Vec<u8>, tokens_purchased: V) -> Result;"},
{"lineNum":"  650","line":"    fn is_owner(ticker: &Vec<u8>, did: &Vec<u8>) -> bool;"},
{"lineNum":"  651","line":"}"},
{"lineNum":"  652","line":""},
{"lineNum":"  653","line":"impl<T: Trait> AssetTrait<T::TokenBalance> for Module<T> {"},
{"lineNum":"  654","line":"    fn _mint_from_sto("},
{"lineNum":"  655","line":"        ticker: &[u8],"},
{"lineNum":"  656","line":"        sender: &Vec<u8>,"},
{"lineNum":"  657","line":"        tokens_purchased: T::TokenBalance,"},
{"lineNum":"  658","line":"    ) -> Result {"},
{"lineNum":"  659","line":"        let upper_ticker = utils::bytes_to_upper(ticker);"},
{"lineNum":"  660","line":"        Self::_mint(&upper_ticker, sender, tokens_purchased)"},
{"lineNum":"  661","line":"    }"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    fn is_owner(ticker: &Vec<u8>, did: &Vec<u8>) -> bool {","class":"lineCov","hits":"1","order":"7275","possible_hits":"1",},
{"lineNum":"  664","line":"        Self::_is_owner(ticker, did)","class":"lineCov","hits":"1","order":"7276","possible_hits":"1",},
{"lineNum":"  665","line":"    }","class":"linePartCov","hits":"1","order":"7277","possible_hits":"2",},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    /// Get the asset `id` balance of `who`."},
{"lineNum":"  668","line":"    fn balance(ticker: &[u8], who: Vec<u8>) -> T::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  669","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"        return Self::balance_of((upper_ticker, who));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  671","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"    // Get the total supply of an asset `id`"},
{"lineNum":"  674","line":"    fn total_supply(ticker: &[u8]) -> T::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"        return Self::token_details(upper_ticker).total_supply;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  678","line":"}"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"/// All functions in the decl_module macro become part of the public interface of the module"},
{"lineNum":"  681","line":"/// If they are there, they are accessible via extrinsics calls whether they are public or not"},
{"lineNum":"  682","line":"/// However, in the impl module section (this, below) the functions can be public and private"},
{"lineNum":"  683","line":"/// Private functions are internal to this module e.g.: _transfer"},
{"lineNum":"  684","line":"/// Public functions can be called from other modules e.g.: lock and unlock (being called from the tcr module)"},
{"lineNum":"  685","line":"/// All functions in the impl module section are not part of public interface because they are not part of the Call enum"},
{"lineNum":"  686","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"  687","line":"    // Public immutables"},
{"lineNum":"  688","line":"    pub fn _is_owner(ticker: &Vec<u8>, did: &Vec<u8>) -> bool {","class":"linePartCov","hits":"2","order":"7002","possible_hits":"4",},
{"lineNum":"  689","line":"        let token = Self::token_details(ticker);","class":"lineCov","hits":"2","order":"7003","possible_hits":"2",},
{"lineNum":"  690","line":"        token.owner_did == *did","class":"lineCov","hits":"2","order":"7004","possible_hits":"2",},
{"lineNum":"  691","line":"    }","class":"lineCov","hits":"2","order":"7005","possible_hits":"2",},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"    /// Get the asset `id` balance of `who`."},
{"lineNum":"  694","line":"    pub fn balance(ticker: &Vec<u8>, did: Vec<u8>) -> T::TokenBalance {"},
{"lineNum":"  695","line":"        let upper_ticker = utils::bytes_to_upper(ticker);"},
{"lineNum":"  696","line":"        Self::balance_of((upper_ticker, did))"},
{"lineNum":"  697","line":"    }"},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"    // Get the total supply of an asset `id`"},
{"lineNum":"  700","line":"    pub fn total_supply(ticker: &[u8]) -> T::TokenBalance {"},
{"lineNum":"  701","line":"        let upper_ticker = utils::bytes_to_upper(ticker);"},
{"lineNum":"  702","line":"        Self::token_details(upper_ticker).total_supply"},
{"lineNum":"  703","line":"    }"},
{"lineNum":"  704","line":""},
{"lineNum":"  705","line":"    pub fn get_balance_at(ticker: &Vec<u8>, did: &Vec<u8>, at: u64) -> T::TokenBalance {","class":"linePartCov","hits":"2","order":"7163","possible_hits":"4",},
{"lineNum":"  706","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"4","order":"7164","possible_hits":"4",},
{"lineNum":"  707","line":"        let ticker_did = (upper_ticker.clone(), did.clone());","class":"linePartCov","hits":"4","order":"7165","possible_hits":"6",},
{"lineNum":"  708","line":"        if !<TotalCheckpoints>::exists(upper_ticker.clone()) ||","class":"linePartCov","hits":"11","order":"7166","possible_hits":"12",},
{"lineNum":"  709","line":"            at == 0 || //checkpoints start from 1","class":"lineCov","hits":"2","order":"7167","possible_hits":"2",},
{"lineNum":"  710","line":"            at > Self::total_checkpoints_of(&upper_ticker)","class":"lineCov","hits":"4","order":"7168","possible_hits":"4",},
{"lineNum":"  711","line":"        {"},
{"lineNum":"  712","line":"            // No checkpoints data exist"},
{"lineNum":"  713","line":"            return Self::balance_of(&ticker_did);","class":"linePartCov","hits":"1","order":"7695","possible_hits":"2",},
{"lineNum":"  714","line":"        }"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"        if <UserCheckpoints>::exists(&ticker_did) {","class":"lineCov","hits":"4","order":"7169","possible_hits":"4",},
{"lineNum":"  717","line":"            let user_checkpoints = Self::user_checkpoints(&ticker_did);","class":"linePartCov","hits":"1","order":"7745","possible_hits":"2",},
{"lineNum":"  718","line":"            if at > *user_checkpoints.last().unwrap() {","class":"linePartCov","hits":"2","order":"7746","possible_hits":"4",},
{"lineNum":"  719","line":"                // User has not transacted after checkpoint creation."},
{"lineNum":"  720","line":"                // This means their current balance = their balance at that cp."},
{"lineNum":"  721","line":"                return Self::balance_of(&ticker_did);","class":"linePartCov","hits":"2","order":"7768","possible_hits":"4",},
{"lineNum":"  722","line":"            }"},
{"lineNum":"  723","line":"            // Uses the first checkpoint that was created after target checpoint"},
{"lineNum":"  724","line":"            // and the user has data for that checkpoint"},
{"lineNum":"  725","line":"            return Self::balance_at_checkpoint((","class":"linePartCov","hits":"2","order":"7766","possible_hits":"4",},
{"lineNum":"  726","line":"                upper_ticker.clone(),","class":"linePartCov","hits":"1","order":"7754","possible_hits":"2",},
{"lineNum":"  727","line":"                did.clone(),","class":"linePartCov","hits":"1","order":"7755","possible_hits":"2",},
{"lineNum":"  728","line":"                Self::find_ceiling(&user_checkpoints, at),","class":"linePartCov","hits":"1","order":"7756","possible_hits":"2",},
{"lineNum":"  729","line":"            ));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  730","line":"        }","class":"linePartCov","hits":"1","order":"7767","possible_hits":"4",},
{"lineNum":"  731","line":"        // User has no checkpoint data."},
{"lineNum":"  732","line":"        // This means that user\'s balance has not changed since first checkpoint was created."},
{"lineNum":"  733","line":"        // Maybe the user never held any balance."},
{"lineNum":"  734","line":"        return Self::balance_of(&ticker_did);","class":"lineCov","hits":"4","order":"7170","possible_hits":"4",},
{"lineNum":"  735","line":"    }","class":"linePartCov","hits":"2","order":"7171","possible_hits":"6",},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"    fn find_ceiling(arr: &Vec<u64>, key: u64) -> u64 {","class":"linePartCov","hits":"1","order":"7757","possible_hits":"2",},
{"lineNum":"  738","line":"        // This function assumes that key <= last element of the array,"},
{"lineNum":"  739","line":"        // the array consists of unique sorted elements,"},
{"lineNum":"  740","line":"        // array len > 0"},
{"lineNum":"  741","line":"        let mut end = arr.len();","class":"linePartCov","hits":"1","order":"7758","possible_hits":"2",},
{"lineNum":"  742","line":"        let mut start = 0;","class":"linePartCov","hits":"1","order":"7759","possible_hits":"2",},
{"lineNum":"  743","line":"        let mut mid = (start + end) / 2;","class":"linePartCov","hits":"1","order":"7760","possible_hits":"4",},
{"lineNum":"  744","line":""},
{"lineNum":"  745","line":"        while mid != 0 && end >= start {","class":"linePartCov","hits":"2","order":"7761","possible_hits":"4",},
{"lineNum":"  746","line":"            // Due to our assumptions, we can even remove end >= start condition from here"},
{"lineNum":"  747","line":"            if key > arr[mid - 1] && key <= arr[mid] {","class":"linePartCov","hits":"1","order":"7769","possible_hits":"4",},
{"lineNum":"  748","line":"                // This condition and the fact that key <= last element of the array mean that"},
{"lineNum":"  749","line":"                // start should never become greater than end."},
{"lineNum":"  750","line":"                return arr[mid];","class":"linePartCov","hits":"1","order":"7773","possible_hits":"2",},
{"lineNum":"  751","line":"            } else if key > arr[mid] {","class":"linePartCov","hits":"3","order":"7770","possible_hits":"6",},
{"lineNum":"  752","line":"                start = mid + 1;","class":"linePartCov","hits":"1","order":"7774","possible_hits":"4",},
{"lineNum":"  753","line":"            } else {"},
{"lineNum":"  754","line":"                end = mid;","class":"linePartCov","hits":"1","order":"7771","possible_hits":"2",},
{"lineNum":"  755","line":"            }"},
{"lineNum":"  756","line":"            mid = (start + end) / 2;","class":"linePartCov","hits":"1","order":"7772","possible_hits":"6",},
{"lineNum":"  757","line":"        }"},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"        // This should only be reached when mid becomes 0."},
{"lineNum":"  760","line":"        return arr[0];","class":"linePartCov","hits":"2","order":"7762","possible_hits":"4",},
{"lineNum":"  761","line":"    }","class":"linePartCov","hits":"1","order":"7765","possible_hits":"2",},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    fn _is_valid_transfer(","class":"lineCov","hits":"2","order":"6908","possible_hits":"2",},
{"lineNum":"  764","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  765","line":"        from_did: &Vec<u8>,"},
{"lineNum":"  766","line":"        to_did: &Vec<u8>,"},
{"lineNum":"  767","line":"        value: T::TokenBalance,"},
{"lineNum":"  768","line":"    ) -> StdResult<u8, &\'static str> {"},
{"lineNum":"  769","line":"        let general_status_code ="},
{"lineNum":"  770","line":"            <general_tm::Module<T>>::verify_restriction(ticker, from_did, to_did, value)?;","class":"linePartCov","hits":"2","order":"6909","possible_hits":"4",},
{"lineNum":"  771","line":"        Ok(if general_status_code != ERC1400_TRANSFER_SUCCESS {","class":"linePartCov","hits":"4","order":"6935","possible_hits":"6",},
{"lineNum":"  772","line":"            general_status_code","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  773","line":"        } else {"},
{"lineNum":"  774","line":"            <percentage_tm::Module<T>>::verify_restriction(ticker, from_did, to_did, value)?","class":"lineCov","hits":"4","order":"6936","possible_hits":"4",},
{"lineNum":"  775","line":"        })"},
{"lineNum":"  776","line":"    }","class":"linePartCov","hits":"4","order":"6952","possible_hits":"6",},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"    // the SimpleToken standard transfer function"},
{"lineNum":"  779","line":"    // internal"},
{"lineNum":"  780","line":"    fn _transfer(","class":"linePartCov","hits":"2","order":"6954","possible_hits":"4",},
{"lineNum":"  781","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  782","line":"        from_did: &Vec<u8>,"},
{"lineNum":"  783","line":"        to_did: &Vec<u8>,"},
{"lineNum":"  784","line":"        value: T::TokenBalance,"},
{"lineNum":"  785","line":"    ) -> Result {"},
{"lineNum":"  786","line":"        // Granularity check"},
{"lineNum":"  787","line":"        ensure!(","class":"linePartCov","hits":"4","order":"6955","possible_hits":"6",},
{"lineNum":"  788","line":"            Self::check_granularity(ticker, value),","class":"lineCov","hits":"2","order":"6956","possible_hits":"2",},
{"lineNum":"  789","line":"            \"Invalid granularity\""},
{"lineNum":"  790","line":"        );"},
{"lineNum":"  791","line":"        let ticket_from_did = (ticker.clone(), from_did.clone());","class":"linePartCov","hits":"4","order":"6966","possible_hits":"6",},
{"lineNum":"  792","line":"        ensure!(","class":"linePartCov","hits":"2","order":"6968","possible_hits":"6",},
{"lineNum":"  793","line":"            <BalanceOf<T>>::exists(&ticket_from_did),","class":"lineCov","hits":"2","order":"6967","possible_hits":"2",},
{"lineNum":"  794","line":"            \"Account does not own this token\""},
{"lineNum":"  795","line":"        );"},
{"lineNum":"  796","line":"        let sender_balance = Self::balance_of(&ticket_from_did);","class":"lineCov","hits":"4","order":"6969","possible_hits":"4",},
{"lineNum":"  797","line":"        ensure!(sender_balance >= value, \"Not enough balance.\");","class":"linePartCov","hits":"2","order":"6970","possible_hits":"4",},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"        let updated_from_balance = sender_balance","class":"linePartCov","hits":"6","order":"6971","possible_hits":"8",},
{"lineNum":"  800","line":"            .checked_sub(&value)"},
{"lineNum":"  801","line":"            .ok_or(\"overflow in calculating balance\")?;","class":"linePartCov","hits":"2","order":"6972","possible_hits":"4",},
{"lineNum":"  802","line":"        let ticket_to_did = (ticker.clone(), to_did.clone());","class":"linePartCov","hits":"2","order":"6973","possible_hits":"4",},
{"lineNum":"  803","line":"        let receiver_balance = Self::balance_of(&ticket_to_did);","class":"lineCov","hits":"4","order":"6974","possible_hits":"4",},
{"lineNum":"  804","line":"        let updated_to_balance = receiver_balance","class":"linePartCov","hits":"4","order":"6975","possible_hits":"6",},
{"lineNum":"  805","line":"            .checked_add(&value)"},
{"lineNum":"  806","line":"            .ok_or(\"overflow in calculating balance\")?;","class":"linePartCov","hits":"2","order":"6976","possible_hits":"6",},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"        Self::_update_checkpoint(ticker, from_did, sender_balance);","class":"lineCov","hits":"2","order":"6977","possible_hits":"2",},
{"lineNum":"  809","line":"        Self::_update_checkpoint(ticker, to_did, receiver_balance);","class":"lineCov","hits":"2","order":"6981","possible_hits":"2",},
{"lineNum":"  810","line":"        // reduce sender\'s balance"},
{"lineNum":"  811","line":"        <BalanceOf<T>>::insert(ticket_from_did, updated_from_balance);","class":"lineCov","hits":"2","order":"6982","possible_hits":"2",},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"        // increase receiver\'s balance"},
{"lineNum":"  814","line":"        <BalanceOf<T>>::insert(ticket_to_did, updated_to_balance);","class":"lineCov","hits":"2","order":"6983","possible_hits":"2",},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"        Self::deposit_event(RawEvent::Transfer(","class":"lineCov","hits":"2","order":"6988","possible_hits":"2",},
{"lineNum":"  817","line":"            ticker.clone(),","class":"lineCov","hits":"2","order":"6984","possible_hits":"2",},
{"lineNum":"  818","line":"            from_did.clone(),","class":"lineCov","hits":"2","order":"6985","possible_hits":"2",},
{"lineNum":"  819","line":"            to_did.clone(),","class":"lineCov","hits":"2","order":"6986","possible_hits":"2",},
{"lineNum":"  820","line":"            value,","class":"lineCov","hits":"2","order":"6987","possible_hits":"2",},
{"lineNum":"  821","line":"        ));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  822","line":"        Ok(())","class":"lineCov","hits":"2","order":"6989","possible_hits":"2",},
{"lineNum":"  823","line":"    }","class":"linePartCov","hits":"4","order":"6990","possible_hits":"10",},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"    pub fn _create_checkpoint(ticker: &Vec<u8>) -> Result {","class":"linePartCov","hits":"2","order":"7008","possible_hits":"4",},
{"lineNum":"  826","line":"        if <TotalCheckpoints>::exists(ticker) {","class":"linePartCov","hits":"7","order":"7009","possible_hits":"8",},
{"lineNum":"  827","line":"            let mut checkpoint_count = Self::total_checkpoints_of(ticker);","class":"linePartCov","hits":"1","order":"7737","possible_hits":"2",},
{"lineNum":"  828","line":"            checkpoint_count = checkpoint_count","class":"linePartCov","hits":"2","order":"7738","possible_hits":"6",},
{"lineNum":"  829","line":"                .checked_add(1)"},
{"lineNum":"  830","line":"                .ok_or(\"overflow in adding checkpoint\")?;","class":"linePartCov","hits":"1","order":"7739","possible_hits":"6",},
{"lineNum":"  831","line":"            <TotalCheckpoints>::insert(ticker, checkpoint_count);","class":"linePartCov","hits":"1","order":"7740","possible_hits":"2",},
{"lineNum":"  832","line":"            <CheckpointTotalSupply<T>>::insert(","class":"linePartCov","hits":"1","order":"7743","possible_hits":"2",},
{"lineNum":"  833","line":"                (ticker.clone(), checkpoint_count),","class":"linePartCov","hits":"1","order":"7741","possible_hits":"2",},
{"lineNum":"  834","line":"                Self::token_details(ticker).total_supply,","class":"linePartCov","hits":"2","order":"7742","possible_hits":"4",},
{"lineNum":"  835","line":"            );","class":"linePartCov","hits":"1","order":"7744","possible_hits":"4",},
{"lineNum":"  836","line":"        } else {"},
{"lineNum":"  837","line":"            <TotalCheckpoints>::insert(ticker, 1);","class":"lineCov","hits":"2","order":"7010","possible_hits":"2",},
{"lineNum":"  838","line":"            <CheckpointTotalSupply<T>>::insert(","class":"lineCov","hits":"2","order":"7013","possible_hits":"2",},
{"lineNum":"  839","line":"                (ticker.clone(), 1),","class":"lineCov","hits":"2","order":"7011","possible_hits":"2",},
{"lineNum":"  840","line":"                Self::token_details(ticker).total_supply,","class":"lineCov","hits":"4","order":"7012","possible_hits":"4",},
{"lineNum":"  841","line":"            );","class":"linePartCov","hits":"2","order":"7014","possible_hits":"4",},
{"lineNum":"  842","line":"        }"},
{"lineNum":"  843","line":"        Ok(())","class":"lineCov","hits":"2","order":"7015","possible_hits":"2",},
{"lineNum":"  844","line":"    }","class":"lineCov","hits":"4","order":"7016","possible_hits":"4",},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"    fn _update_checkpoint(ticker: &Vec<u8>, user_did: &Vec<u8>, user_balance: T::TokenBalance) {","class":"linePartCov","hits":"2","order":"6978","possible_hits":"4",},
{"lineNum":"  847","line":"        if <TotalCheckpoints>::exists(ticker) {","class":"linePartCov","hits":"5","order":"6979","possible_hits":"6",},
{"lineNum":"  848","line":"            let checkpoint_count = Self::total_checkpoints_of(ticker);","class":"linePartCov","hits":"1","order":"7729","possible_hits":"2",},
{"lineNum":"  849","line":"            let ticker_user_did_checkpont = (ticker.clone(), user_did.clone(), checkpoint_count);","class":"linePartCov","hits":"1","order":"7730","possible_hits":"4",},
{"lineNum":"  850","line":"            if !<CheckpointBalance<T>>::exists(&ticker_user_did_checkpont) {","class":"linePartCov","hits":"3","order":"7731","possible_hits":"6",},
{"lineNum":"  851","line":"                <CheckpointBalance<T>>::insert(&ticker_user_did_checkpont, user_balance);","class":"linePartCov","hits":"1","order":"7732","possible_hits":"2",},
{"lineNum":"  852","line":"                <UserCheckpoints>::mutate((ticker.clone(), user_did.clone()), |user_checkpoints| {","class":"linePartCov","hits":"2","order":"7733","possible_hits":"4",},
{"lineNum":"  853","line":"                    user_checkpoints.push(checkpoint_count);","class":"linePartCov","hits":"1","order":"7734","possible_hits":"2",},
{"lineNum":"  854","line":"                });","class":"linePartCov","hits":"1","order":"7735","possible_hits":"4",},
{"lineNum":"  855","line":"            }"},
{"lineNum":"  856","line":"        }","class":"linePartCov","hits":"1","order":"7736","possible_hits":"4",},
{"lineNum":"  857","line":"    }","class":"lineCov","hits":"2","order":"6980","possible_hits":"2",},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    fn is_owner(ticker: &Vec<u8>, did: &Vec<u8>) -> bool {","class":"lineCov","hits":"2","order":"7000","possible_hits":"2",},
{"lineNum":"  860","line":"        Self::_is_owner(ticker, did)","class":"lineCov","hits":"2","order":"7001","possible_hits":"2",},
{"lineNum":"  861","line":"    }","class":"linePartCov","hits":"2","order":"7006","possible_hits":"4",},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"    pub fn _mint(ticker: &Vec<u8>, to_did: &Vec<u8>, value: T::TokenBalance) -> Result {"},
{"lineNum":"  864","line":"        // Granularity check"},
{"lineNum":"  865","line":"        ensure!("},
{"lineNum":"  866","line":"            Self::check_granularity(ticker, value),"},
{"lineNum":"  867","line":"            \"Invalid granularity\""},
{"lineNum":"  868","line":"        );"},
{"lineNum":"  869","line":"        //Increase receiver balance"},
{"lineNum":"  870","line":"        let ticker_to_did = (ticker.clone(), to_did.clone());"},
{"lineNum":"  871","line":"        let current_to_balance = Self::balance_of(&ticker_to_did);"},
{"lineNum":"  872","line":"        let updated_to_balance = current_to_balance"},
{"lineNum":"  873","line":"            .checked_add(&value)"},
{"lineNum":"  874","line":"            .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  875","line":"        // verify transfer check"},
{"lineNum":"  876","line":"        ensure!("},
{"lineNum":"  877","line":"            Self::_is_valid_transfer(ticker, &vec![], to_did, value)? == ERC1400_TRANSFER_SUCCESS,"},
{"lineNum":"  878","line":"            \"Transfer restrictions failed\""},
{"lineNum":"  879","line":"        );"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"        // Read the token details"},
{"lineNum":"  882","line":"        let mut token = Self::token_details(ticker);"},
{"lineNum":"  883","line":"        //Increase total suply"},
{"lineNum":"  884","line":"        token.total_supply = token"},
{"lineNum":"  885","line":"            .total_supply"},
{"lineNum":"  886","line":"            .checked_add(&value)"},
{"lineNum":"  887","line":"            .ok_or(\"overflow in calculating balance\")?;"},
{"lineNum":"  888","line":""},
{"lineNum":"  889","line":"        Self::_update_checkpoint(ticker, to_did, current_to_balance);"},
{"lineNum":"  890","line":""},
{"lineNum":"  891","line":"        <BalanceOf<T>>::insert(&ticker_to_did, updated_to_balance);"},
{"lineNum":"  892","line":"        <Tokens<T>>::insert(ticker, token);"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"        Self::deposit_event(RawEvent::Issued(ticker.clone(), to_did.clone(), value));"},
{"lineNum":"  895","line":""},
{"lineNum":"  896","line":"        Ok(())"},
{"lineNum":"  897","line":"    }"},
{"lineNum":"  898","line":""},
{"lineNum":"  899","line":"    fn check_granularity(ticker: &Vec<u8>, value: T::TokenBalance) -> bool {","class":"linePartCov","hits":"2","order":"6957","possible_hits":"4",},
{"lineNum":"  900","line":"        // Read the token details"},
{"lineNum":"  901","line":"        let token = Self::token_details(ticker);","class":"lineCov","hits":"2","order":"6958","possible_hits":"2",},
{"lineNum":"  902","line":"        // Check the granularity"},
{"lineNum":"  903","line":"        <T as utils::Trait>::as_u128(value) % token.granularity == (0 as u128)","class":"linePartCov","hits":"4","order":"6964","possible_hits":"6",},
{"lineNum":"  904","line":"    }","class":"linePartCov","hits":"2","order":"6965","possible_hits":"4",},
{"lineNum":"  905","line":"}"},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"/// tests for this module"},
{"lineNum":"  908","line":"#[cfg(test)]"},
{"lineNum":"  909","line":"mod tests {"},
{"lineNum":"  910","line":"    use super::*;"},
{"lineNum":"  911","line":"    use crate::{exemption, identity};"},
{"lineNum":"  912","line":"    use primitives::Key;"},
{"lineNum":"  913","line":"    use rand::Rng;"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"    use chrono::{prelude::*, Duration};"},
{"lineNum":"  916","line":"    use lazy_static::lazy_static;"},
{"lineNum":"  917","line":"    use sr_io::with_externalities;"},
{"lineNum":"  918","line":"    use sr_primitives::{"},
{"lineNum":"  919","line":"        testing::{Header, UintAuthorityId},"},
{"lineNum":"  920","line":"        traits::{BlakeTwo256, ConvertInto, IdentityLookup, OpaqueKeys},"},
{"lineNum":"  921","line":"        Perbill,"},
{"lineNum":"  922","line":"    };"},
{"lineNum":"  923","line":"    use srml_support::{assert_noop, assert_ok, impl_outer_origin, parameter_types};"},
{"lineNum":"  924","line":"    use std::sync::{Arc, Mutex};"},
{"lineNum":"  925","line":"    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  926","line":""},
{"lineNum":"  927","line":"    type SessionIndex = u32;"},
{"lineNum":"  928","line":"    type AuthorityId = u64;"},
{"lineNum":"  929","line":"    type BlockNumber = u64;"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"    pub struct TestOnSessionEnding;"},
{"lineNum":"  932","line":"    impl session::OnSessionEnding<AuthorityId> for TestOnSessionEnding {"},
{"lineNum":"  933","line":"        fn on_session_ending(_: SessionIndex, _: SessionIndex) -> Option<Vec<AuthorityId>> {"},
{"lineNum":"  934","line":"            None"},
{"lineNum":"  935","line":"        }"},
{"lineNum":"  936","line":"    }"},
{"lineNum":"  937","line":""},
{"lineNum":"  938","line":"    pub struct TestSessionHandler;"},
{"lineNum":"  939","line":"    impl session::SessionHandler<AuthorityId> for TestSessionHandler {"},
{"lineNum":"  940","line":"        fn on_new_session<Ks: OpaqueKeys>("},
{"lineNum":"  941","line":"            _changed: bool,"},
{"lineNum":"  942","line":"            _validators: &[(AuthorityId, Ks)],"},
{"lineNum":"  943","line":"            _queued_validators: &[(AuthorityId, Ks)],"},
{"lineNum":"  944","line":"        ) {"},
{"lineNum":"  945","line":"        }"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"        fn on_disabled(_validator_index: usize) {}"},
{"lineNum":"  948","line":""},
{"lineNum":"  949","line":"        fn on_genesis_session<Ks: OpaqueKeys>(_validators: &[(AuthorityId, Ks)]) {}"},
{"lineNum":"  950","line":"    }"},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    impl_outer_origin! {","class":"lineCov","hits":"1","order":"7233","possible_hits":"1",},
{"lineNum":"  953","line":"        pub enum Origin for Test {}"},
{"lineNum":"  954","line":"    }"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  957","line":"    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  958","line":"    // configuration traits of modules we want to use."},
{"lineNum":"  959","line":"    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  960","line":"    pub struct Test;"},
{"lineNum":"  961","line":"    parameter_types! {"},
{"lineNum":"  962","line":"        pub const Period: BlockNumber = 1;"},
{"lineNum":"  963","line":"        pub const Offset: BlockNumber = 0;"},
{"lineNum":"  964","line":"        pub const BlockHashCount: u32 = 250;"},
{"lineNum":"  965","line":"        pub const MaximumBlockWeight: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  966","line":"        pub const MaximumBlockLength: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  967","line":"        pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);"},
{"lineNum":"  968","line":"    }"},
{"lineNum":"  969","line":"    impl system::Trait for Test {"},
{"lineNum":"  970","line":"        type Origin = Origin;"},
{"lineNum":"  971","line":"        type Call = ();"},
{"lineNum":"  972","line":"        type Index = u64;"},
{"lineNum":"  973","line":"        type BlockNumber = BlockNumber;"},
{"lineNum":"  974","line":"        type Hash = H256;"},
{"lineNum":"  975","line":"        type Hashing = BlakeTwo256;"},
{"lineNum":"  976","line":"        type AccountId = u64;"},
{"lineNum":"  977","line":"        // type AccountId = <AnySignature as Verify>::Signer;"},
{"lineNum":"  978","line":"        type Lookup = IdentityLookup<u64>;"},
{"lineNum":"  979","line":"        type WeightMultiplierUpdate = ();"},
{"lineNum":"  980","line":"        type Header = Header;"},
{"lineNum":"  981","line":"        type Event = ();"},
{"lineNum":"  982","line":"        type BlockHashCount = BlockHashCount;"},
{"lineNum":"  983","line":"        type MaximumBlockWeight = MaximumBlockWeight;"},
{"lineNum":"  984","line":"        type AvailableBlockRatio = AvailableBlockRatio;"},
{"lineNum":"  985","line":"        type MaximumBlockLength = MaximumBlockLength;"},
{"lineNum":"  986","line":"        type Version = ();"},
{"lineNum":"  987","line":"    }"},
{"lineNum":"  988","line":""},
{"lineNum":"  989","line":"    parameter_types! {"},
{"lineNum":"  990","line":"        pub const DisabledValidatorsThreshold: Perbill = Perbill::from_percent(33);"},
{"lineNum":"  991","line":"    }"},
{"lineNum":"  992","line":""},
{"lineNum":"  993","line":"    impl session::Trait for Test {"},
{"lineNum":"  994","line":"        type OnSessionEnding = TestOnSessionEnding;"},
{"lineNum":"  995","line":"        type Keys = UintAuthorityId;"},
{"lineNum":"  996","line":"        type ShouldEndSession = session::PeriodicSessions<Period, Offset>;"},
{"lineNum":"  997","line":"        type SessionHandler = TestSessionHandler;"},
{"lineNum":"  998","line":"        type Event = ();"},
{"lineNum":"  999","line":"        type ValidatorId = AuthorityId;"},
{"lineNum":" 1000","line":"        type ValidatorIdOf = ConvertInto;"},
{"lineNum":" 1001","line":"        type SelectInitialValidators = ();"},
{"lineNum":" 1002","line":"        type DisabledValidatorsThreshold = DisabledValidatorsThreshold;"},
{"lineNum":" 1003","line":"    }"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"    impl session::historical::Trait for Test {"},
{"lineNum":" 1006","line":"        type FullIdentification = ();"},
{"lineNum":" 1007","line":"        type FullIdentificationOf = ();"},
{"lineNum":" 1008","line":"    }"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"    parameter_types! {","class":"linePartCov","hits":"1","order":"7231","possible_hits":"3",},
{"lineNum":" 1011","line":"        pub const ExistentialDeposit: u64 = 0;"},
{"lineNum":" 1012","line":"        pub const TransferFee: u64 = 0;"},
{"lineNum":" 1013","line":"        pub const CreationFee: u64 = 0;"},
{"lineNum":" 1014","line":"        pub const TransactionBaseFee: u64 = 0;"},
{"lineNum":" 1015","line":"        pub const TransactionByteFee: u64 = 0;"},
{"lineNum":" 1016","line":"    }"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"    impl balances::Trait for Test {"},
{"lineNum":" 1019","line":"        type Balance = u128;"},
{"lineNum":" 1020","line":"        type OnFreeBalanceZero = ();"},
{"lineNum":" 1021","line":"        type OnNewAccount = ();"},
{"lineNum":" 1022","line":"        type Event = ();"},
{"lineNum":" 1023","line":"        type TransactionPayment = ();"},
{"lineNum":" 1024","line":"        type DustRemoval = ();"},
{"lineNum":" 1025","line":"        type TransferPayment = ();"},
{"lineNum":" 1026","line":"        type ExistentialDeposit = ExistentialDeposit;"},
{"lineNum":" 1027","line":"        type TransferFee = TransferFee;"},
{"lineNum":" 1028","line":"        type CreationFee = CreationFee;"},
{"lineNum":" 1029","line":"        type TransactionBaseFee = TransactionBaseFee;"},
{"lineNum":" 1030","line":"        type TransactionByteFee = TransactionByteFee;"},
{"lineNum":" 1031","line":"        type WeightToFee = ConvertInto;"},
{"lineNum":" 1032","line":"        type Identity = identity::Module<Test>;"},
{"lineNum":" 1033","line":"    }"},
{"lineNum":" 1034","line":""},
{"lineNum":" 1035","line":"    impl general_tm::Trait for Test {"},
{"lineNum":" 1036","line":"        type Event = ();"},
{"lineNum":" 1037","line":"        type Asset = Module<Test>;"},
{"lineNum":" 1038","line":"    }"},
{"lineNum":" 1039","line":"    impl identity::Trait for Test {"},
{"lineNum":" 1040","line":"        type Event = ();"},
{"lineNum":" 1041","line":"    }"},
{"lineNum":" 1042","line":"    impl percentage_tm::Trait for Test {"},
{"lineNum":" 1043","line":"        type Event = ();"},
{"lineNum":" 1044","line":"    }"},
{"lineNum":" 1045","line":""},
{"lineNum":" 1046","line":"    impl exemption::Trait for Test {"},
{"lineNum":" 1047","line":"        type Event = ();"},
{"lineNum":" 1048","line":"        type Asset = Module<Test>;"},
{"lineNum":" 1049","line":"    }"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"    parameter_types! {"},
{"lineNum":" 1052","line":"        pub const MinimumPeriod: u64 = 3;"},
{"lineNum":" 1053","line":"    }"},
{"lineNum":" 1054","line":""},
{"lineNum":" 1055","line":"    impl timestamp::Trait for Test {"},
{"lineNum":" 1056","line":"        type Moment = u64;"},
{"lineNum":" 1057","line":"        type OnTimestampSet = ();"},
{"lineNum":" 1058","line":"        type MinimumPeriod = MinimumPeriod;"},
{"lineNum":" 1059","line":"    }"},
{"lineNum":" 1060","line":""},
{"lineNum":" 1061","line":"    impl utils::Trait for Test {"},
{"lineNum":" 1062","line":"        type TokenBalance = u128;"},
{"lineNum":" 1063","line":"        fn as_u128(v: Self::TokenBalance) -> u128 {","class":"lineCov","hits":"1","order":"7265","possible_hits":"1",},
{"lineNum":" 1064","line":"            v","class":"lineCov","hits":"1","order":"7266","possible_hits":"1",},
{"lineNum":" 1065","line":"        }","class":"linePartCov","hits":"1","order":"7267","possible_hits":"2",},
{"lineNum":" 1066","line":"        fn as_tb(v: u128) -> Self::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1067","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1068","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1069","line":"        fn token_balance_to_balance(v: Self::TokenBalance) -> <Self as balances::Trait>::Balance {"},
{"lineNum":" 1070","line":"            v"},
{"lineNum":" 1071","line":"        }"},
{"lineNum":" 1072","line":"        fn balance_to_token_balance(v: <Self as balances::Trait>::Balance) -> Self::TokenBalance {"},
{"lineNum":" 1073","line":"            v"},
{"lineNum":" 1074","line":"        }"},
{"lineNum":" 1075","line":"        fn validator_id_to_account_id(v: <Self as session::Trait>::ValidatorId) -> Self::AccountId {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1076","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1077","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1078","line":"    }"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"    impl registry::Trait for Test {}"},
{"lineNum":" 1081","line":"    impl Trait for Test {"},
{"lineNum":" 1082","line":"        type Event = ();"},
{"lineNum":" 1083","line":"        type Currency = balances::Module<Test>;"},
{"lineNum":" 1084","line":"    }"},
{"lineNum":" 1085","line":"    type Asset = Module<Test>;"},
{"lineNum":" 1086","line":"    type Balances = balances::Module<Test>;"},
{"lineNum":" 1087","line":"    type Identity = identity::Module<Test>;"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"    lazy_static! {"},
{"lineNum":" 1090","line":"        static ref INVESTOR_MAP_OUTER_LOCK: Arc<Mutex<()>> = Arc::new(Mutex::new(()));"},
{"lineNum":" 1091","line":"    }"},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"    /// Build a genesis identity instance owned by account No. 1"},
{"lineNum":" 1094","line":"    fn identity_owned_by_1() -> sr_io::TestExternalities<Blake2Hasher> {","class":"linePartCov","hits":"1","order":"7217","possible_hits":"2",},
{"lineNum":" 1095","line":"        let mut t = system::GenesisConfig::default()","class":"lineCov","hits":"2","order":"7218","possible_hits":"2",},
{"lineNum":" 1096","line":"            .build_storage::<Test>()"},
{"lineNum":" 1097","line":"            .unwrap();","class":"lineCov","hits":"1","order":"7219","possible_hits":"1",},
{"lineNum":" 1098","line":"        identity::GenesisConfig::<Test> {","class":"lineCov","hits":"1","order":"7220","possible_hits":"1",},
{"lineNum":" 1099","line":"            owner: 1,"},
{"lineNum":" 1100","line":"            did_creation_fee: 250,"},
{"lineNum":" 1101","line":"        }"},
{"lineNum":" 1102","line":"        .assimilate_storage(&mut t)"},
{"lineNum":" 1103","line":"        .unwrap();"},
{"lineNum":" 1104","line":"        sr_io::TestExternalities::new(t)","class":"lineCov","hits":"1","order":"7221","possible_hits":"1",},
{"lineNum":" 1105","line":"    }","class":"lineCov","hits":"1","order":"7222","possible_hits":"1",},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"    #[test]","class":"lineCov","hits":"1","order":"7303","possible_hits":"1",},
{"lineNum":" 1108","line":"    fn issuers_can_create_tokens() {","class":"linePartCov","hits":"3","order":"7302","possible_hits":"4",},
{"lineNum":" 1109","line":"        with_externalities(&mut identity_owned_by_1(), || {","class":"linePartCov","hits":"3","order":"7304","possible_hits":"4",},
{"lineNum":" 1110","line":"            let owner_acc = 1;","class":"lineCov","hits":"1","order":"7305","possible_hits":"1",},
{"lineNum":" 1111","line":"            let _owner_key = Key::try_from(owner_acc.encode()).unwrap();","class":"lineCov","hits":"2","order":"7306","possible_hits":"2",},
{"lineNum":" 1112","line":"            let owner_did = \"did:poly:1\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7307","possible_hits":"1",},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"            // Raise the owner\'s base currency balance"},
{"lineNum":" 1115","line":"            Balances::make_free_balance_be(&owner_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7308","possible_hits":"1",},
{"lineNum":" 1116","line":"            Identity::register_did(Origin::signed(owner_acc), owner_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7309","possible_hits":"2",},
{"lineNum":" 1117","line":"                .expect(\"Could not create owner_did\");"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"            // Expected token entry"},
{"lineNum":" 1120","line":"            let token = SecurityToken {","class":"lineCov","hits":"1","order":"7312","possible_hits":"1",},
{"lineNum":" 1121","line":"                name: vec![0x01],","class":"lineCov","hits":"1","order":"7310","possible_hits":"1",},
{"lineNum":" 1122","line":"                owner_did: owner_did.clone(),","class":"lineCov","hits":"1","order":"7311","possible_hits":"1",},
{"lineNum":" 1123","line":"                total_supply: 1_000_000,"},
{"lineNum":" 1124","line":"                granularity: 1,"},
{"lineNum":" 1125","line":"                decimals: 18,"},
{"lineNum":" 1126","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"            Identity::fund_poly(Origin::signed(owner_acc), owner_did.clone(), 500_000)","class":"linePartCov","hits":"2","order":"7313","possible_hits":"3",},
{"lineNum":" 1129","line":"                .expect(\"Could not add funds to DID\");"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"            // identity::Module::<Test>::do_create_issuer(&owner_did, &owner_key)"},
{"lineNum":" 1132","line":"            //    .expect(\"Could not make token.owner an issuer\");"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"            // Issuance is successful"},
{"lineNum":" 1135","line":"            assert_ok!(Asset::create_token(","class":"linePartCov","hits":"2","order":"7319","possible_hits":"3",},
{"lineNum":" 1136","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7314","possible_hits":"1",},
{"lineNum":" 1137","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7315","possible_hits":"1",},
{"lineNum":" 1138","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7316","possible_hits":"1",},
{"lineNum":" 1139","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7317","possible_hits":"1",},
{"lineNum":" 1140","line":"                token.total_supply,","class":"lineCov","hits":"1","order":"7318","possible_hits":"1",},
{"lineNum":" 1141","line":"                true"},
{"lineNum":" 1142","line":"            ));","class":"linePartCov","hits":"1","order":"7320","possible_hits":"2",},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"            // A correct entry is added"},
{"lineNum":" 1145","line":"            assert_eq!(Asset::token_details(token.name.clone()), token);","class":"lineCov","hits":"2","order":"7321","possible_hits":"2",},
{"lineNum":" 1146","line":"        });","class":"linePartCov","hits":"2","order":"7322","possible_hits":"4",},
{"lineNum":" 1147","line":"    }","class":"linePartCov","hits":"2","order":"7323","possible_hits":"3",},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"    /// # TODO"},
{"lineNum":" 1150","line":"    /// It should be re-enable once issuer claim is re-enabled."},
{"lineNum":" 1151","line":"    #[test]"},
{"lineNum":" 1152","line":"    #[ignore]"},
{"lineNum":" 1153","line":"    fn non_issuers_cant_create_tokens() {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1154","line":"        with_externalities(&mut identity_owned_by_1(), || {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1155","line":"            let owner_did = \"did:poly:1\".as_bytes().to_vec();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1156","line":"            let owner_acc = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1157","line":""},
{"lineNum":" 1158","line":"            // Expected token entry"},
{"lineNum":" 1159","line":"            let token = SecurityToken {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1160","line":"                name: vec![0x01],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1161","line":"                owner_did: owner_did.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1162","line":"                total_supply: 1_000_000,"},
{"lineNum":" 1163","line":"                granularity: 1,"},
{"lineNum":" 1164","line":"                decimals: 18,"},
{"lineNum":" 1165","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1166","line":""},
{"lineNum":" 1167","line":"            let wrong_acc = owner_acc + 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"            Balances::make_free_balance_be(&wrong_acc, 1_000_000);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"            let wrong_did = \"did:poly:wrong\".as_bytes().to_vec();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1172","line":"            Identity::register_did(Origin::signed(wrong_acc), wrong_did.clone(), vec![])","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1173","line":"                .expect(\"Could not create other DID\");"},
{"lineNum":" 1174","line":""},
{"lineNum":" 1175","line":"            // Issuance is unsuccessful"},
{"lineNum":" 1176","line":"            assert_noop!(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1177","line":"                Asset::create_token(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1178","line":"                    Origin::signed(owner_acc + 1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1179","line":"                    wrong_did.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1180","line":"                    token.name.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1181","line":"                    token.name.clone(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1182","line":"                    token.total_supply,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1183","line":"                    true"},
{"lineNum":" 1184","line":"                ),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1185","line":"                \"DID is not an issuer\""},
{"lineNum":" 1186","line":"            );"},
{"lineNum":" 1187","line":""},
{"lineNum":" 1188","line":"            // Entry is not added"},
{"lineNum":" 1189","line":"            assert_ne!(Asset::token_details(token.name.clone()), token);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1190","line":"        });","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 1191","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"    #[test]","class":"lineCov","hits":"1","order":"7215","possible_hits":"1",},
{"lineNum":" 1194","line":"    fn valid_transfers_pass() {","class":"linePartCov","hits":"3","order":"7214","possible_hits":"4",},
{"lineNum":" 1195","line":"        with_externalities(&mut identity_owned_by_1(), || {","class":"linePartCov","hits":"3","order":"7216","possible_hits":"4",},
{"lineNum":" 1196","line":"            let now = Utc::now();","class":"lineCov","hits":"1","order":"7223","possible_hits":"1",},
{"lineNum":" 1197","line":"            <timestamp::Module<Test>>::set_timestamp(now.timestamp() as u64);","class":"lineCov","hits":"1","order":"7224","possible_hits":"1",},
{"lineNum":" 1198","line":""},
{"lineNum":" 1199","line":"            let owner_acc = 1;","class":"lineCov","hits":"1","order":"7225","possible_hits":"1",},
{"lineNum":" 1200","line":"            let owner_did = \"did:poly:1\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7226","possible_hits":"1",},
{"lineNum":" 1201","line":"            // let owner_key = Key::try_from(owner_acc.encode()).unwrap();"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"            // Expected token entry"},
{"lineNum":" 1204","line":"            let token = SecurityToken {","class":"lineCov","hits":"1","order":"7229","possible_hits":"1",},
{"lineNum":" 1205","line":"                name: vec![0x01],","class":"lineCov","hits":"1","order":"7227","possible_hits":"1",},
{"lineNum":" 1206","line":"                owner_did: owner_did.clone(),","class":"lineCov","hits":"1","order":"7228","possible_hits":"1",},
{"lineNum":" 1207","line":"                total_supply: 1_000_000,"},
{"lineNum":" 1208","line":"                granularity: 1,"},
{"lineNum":" 1209","line":"                decimals: 18,"},
{"lineNum":" 1210","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"            Balances::make_free_balance_be(&owner_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7230","possible_hits":"1",},
{"lineNum":" 1213","line":"            Identity::register_did(Origin::signed(owner_acc), owner_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7232","possible_hits":"2",},
{"lineNum":" 1214","line":"                .expect(\"Could not create owner_did\");"},
{"lineNum":" 1215","line":"            // identity::Module::<Test>::do_create_investor(&owner_did)"},
{"lineNum":" 1216","line":"            //    .expect(\"Could not make token.owner an issuer\");"},
{"lineNum":" 1217","line":""},
{"lineNum":" 1218","line":"            let alice_acc = 2;","class":"lineCov","hits":"1","order":"7234","possible_hits":"1",},
{"lineNum":" 1219","line":"            let alice_did = \"did:poly:alice\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7235","possible_hits":"1",},
{"lineNum":" 1220","line":""},
{"lineNum":" 1221","line":"            Balances::make_free_balance_be(&alice_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7236","possible_hits":"1",},
{"lineNum":" 1222","line":"            Identity::register_did(Origin::signed(alice_acc), alice_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7237","possible_hits":"2",},
{"lineNum":" 1223","line":"                .expect(\"Could not create alice_did\");"},
{"lineNum":" 1224","line":"            // identity::Module::<Test>::do_create_investor(alice_did.clone())"},
{"lineNum":" 1225","line":"            //    .expect(\"Could not make token.owner an issuer\");"},
{"lineNum":" 1226","line":"            let bob_acc = 3;","class":"lineCov","hits":"1","order":"7240","possible_hits":"1",},
{"lineNum":" 1227","line":"            let bob_did = \"did:poly:bob\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7241","possible_hits":"1",},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"            Balances::make_free_balance_be(&bob_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7242","possible_hits":"1",},
{"lineNum":" 1230","line":"            Identity::register_did(Origin::signed(bob_acc), bob_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7243","possible_hits":"2",},
{"lineNum":" 1231","line":"                .expect(\"Could not create bob_did\");"},
{"lineNum":" 1232","line":"            // identity::Module::<Test>::do_create_investor(bob_did.clone())"},
{"lineNum":" 1233","line":"            //     .expect(\"Could not make token.owner an issuer\");"},
{"lineNum":" 1234","line":"            Identity::fund_poly(Origin::signed(owner_acc), owner_did.clone(), 500_000)","class":"linePartCov","hits":"1","order":"7244","possible_hits":"2",},
{"lineNum":" 1235","line":"                .expect(\"Could not add funds to DID\");"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"            // identity::Module::<Test>::do_create_issuer(&owner_did)"},
{"lineNum":" 1238","line":"            //    .expect(\"Could not make token.owner an issuer\");"},
{"lineNum":" 1239","line":""},
{"lineNum":" 1240","line":"            // Issuance is successful"},
{"lineNum":" 1241","line":"            assert_ok!(Asset::create_token(","class":"linePartCov","hits":"2","order":"7264","possible_hits":"3",},
{"lineNum":" 1242","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7259","possible_hits":"1",},
{"lineNum":" 1243","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7260","possible_hits":"1",},
{"lineNum":" 1244","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7261","possible_hits":"1",},
{"lineNum":" 1245","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7262","possible_hits":"1",},
{"lineNum":" 1246","line":"                token.total_supply,","class":"lineCov","hits":"1","order":"7263","possible_hits":"1",},
{"lineNum":" 1247","line":"                true"},
{"lineNum":" 1248","line":"            ));","class":"linePartCov","hits":"1","order":"7268","possible_hits":"2",},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"            general_tm::Module::<Test>::add_to_whitelist(","class":"lineCov","hits":"2","order":"7274","possible_hits":"2",},
{"lineNum":" 1251","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"2","order":"7269","possible_hits":"2",},
{"lineNum":" 1252","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7270","possible_hits":"1",},
{"lineNum":" 1253","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7271","possible_hits":"1",},
{"lineNum":" 1254","line":"                0,"},
{"lineNum":" 1255","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7272","possible_hits":"1",},
{"lineNum":" 1256","line":"                (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"7273","possible_hits":"1",},
{"lineNum":" 1257","line":"            )","class":"linePartCov","hits":"1","order":"7278","possible_hits":"2",},
{"lineNum":" 1258","line":"            .expect(\"Could not configure general_tm for owner\");"},
{"lineNum":" 1259","line":""},
{"lineNum":" 1260","line":"            general_tm::Module::<Test>::add_to_whitelist(","class":"lineCov","hits":"2","order":"7284","possible_hits":"2",},
{"lineNum":" 1261","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7279","possible_hits":"1",},
{"lineNum":" 1262","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7280","possible_hits":"1",},
{"lineNum":" 1263","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7281","possible_hits":"1",},
{"lineNum":" 1264","line":"                0,"},
{"lineNum":" 1265","line":"                alice_did.clone(),","class":"lineCov","hits":"1","order":"7282","possible_hits":"1",},
{"lineNum":" 1266","line":"                (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"7283","possible_hits":"1",},
{"lineNum":" 1267","line":"            )","class":"linePartCov","hits":"1","order":"7285","possible_hits":"2",},
{"lineNum":" 1268","line":"            .expect(\"Could not configure general_tm for alice\");"},
{"lineNum":" 1269","line":""},
{"lineNum":" 1270","line":"            general_tm::Module::<Test>::add_to_whitelist(","class":"lineCov","hits":"2","order":"7291","possible_hits":"2",},
{"lineNum":" 1271","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7286","possible_hits":"1",},
{"lineNum":" 1272","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7287","possible_hits":"1",},
{"lineNum":" 1273","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7288","possible_hits":"1",},
{"lineNum":" 1274","line":"                0,"},
{"lineNum":" 1275","line":"                bob_did.clone(),","class":"lineCov","hits":"1","order":"7289","possible_hits":"1",},
{"lineNum":" 1276","line":"                (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"7290","possible_hits":"1",},
{"lineNum":" 1277","line":"            )","class":"linePartCov","hits":"1","order":"7292","possible_hits":"2",},
{"lineNum":" 1278","line":"            .expect(\"Could not configure general_tm for bob\");"},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"            // A correct entry is added"},
{"lineNum":" 1281","line":"            assert_eq!(Asset::token_details(token.name.clone()), token);","class":"lineCov","hits":"1","order":"7293","possible_hits":"1",},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"            assert_ok!(Asset::transfer(","class":"linePartCov","hits":"2","order":"7298","possible_hits":"3",},
{"lineNum":" 1284","line":"                Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7294","possible_hits":"1",},
{"lineNum":" 1285","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"7295","possible_hits":"1",},
{"lineNum":" 1286","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7296","possible_hits":"1",},
{"lineNum":" 1287","line":"                alice_did.clone(),","class":"lineCov","hits":"1","order":"7297","possible_hits":"1",},
{"lineNum":" 1288","line":"                500"},
{"lineNum":" 1289","line":"            ));","class":"linePartCov","hits":"1","order":"7299","possible_hits":"2",},
{"lineNum":" 1290","line":"        })","class":"linePartCov","hits":"2","order":"7300","possible_hits":"6",},
{"lineNum":" 1291","line":"    }","class":"linePartCov","hits":"2","order":"7301","possible_hits":"3",},
{"lineNum":" 1292","line":""},
{"lineNum":" 1293","line":"    #[test]"},
{"lineNum":" 1294","line":"    fn checkpoints_fuzz_test() {","class":"linePartCov","hits":"3","order":"7332","possible_hits":"4",},
{"lineNum":" 1295","line":"        println!(\"Starting\");","class":"lineCov","hits":"2","order":"7333","possible_hits":"2",},
{"lineNum":" 1296","line":"        for i in 0..10 {","class":"linePartCov","hits":"2","order":"7334","possible_hits":"3",},
{"lineNum":" 1297","line":"            // When fuzzing in local, feel free to bump this number to add more fuzz runs."},
{"lineNum":" 1298","line":"            with_externalities(&mut identity_owned_by_1(), || {","class":"linePartCov","hits":"2","order":"7335","possible_hits":"3",},
{"lineNum":" 1299","line":"                let now = Utc::now();","class":"lineCov","hits":"1","order":"7336","possible_hits":"1",},
{"lineNum":" 1300","line":"                <timestamp::Module<Test>>::set_timestamp(now.timestamp() as u64);","class":"lineCov","hits":"1","order":"7337","possible_hits":"1",},
{"lineNum":" 1301","line":""},
{"lineNum":" 1302","line":"                let owner_acc = 1;","class":"lineCov","hits":"1","order":"7338","possible_hits":"1",},
{"lineNum":" 1303","line":"                let owner_did = \"did:poly:1\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7339","possible_hits":"1",},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"                // Expected token entry"},
{"lineNum":" 1306","line":"                let token = SecurityToken {","class":"lineCov","hits":"1","order":"7342","possible_hits":"1",},
{"lineNum":" 1307","line":"                    name: vec![0x01],","class":"lineCov","hits":"1","order":"7340","possible_hits":"1",},
{"lineNum":" 1308","line":"                    owner_did: owner_did.clone(),","class":"lineCov","hits":"1","order":"7341","possible_hits":"1",},
{"lineNum":" 1309","line":"                    total_supply: 1_000_000,"},
{"lineNum":" 1310","line":"                    granularity: 1,"},
{"lineNum":" 1311","line":"                    decimals: 18,"},
{"lineNum":" 1312","line":"                };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1313","line":""},
{"lineNum":" 1314","line":"                Balances::make_free_balance_be(&owner_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7343","possible_hits":"1",},
{"lineNum":" 1315","line":"                Identity::register_did(Origin::signed(owner_acc), owner_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7344","possible_hits":"2",},
{"lineNum":" 1316","line":"                    .expect(\"Could not create owner_did\");"},
{"lineNum":" 1317","line":""},
{"lineNum":" 1318","line":"                let alice_acc = 2;","class":"lineCov","hits":"1","order":"7345","possible_hits":"1",},
{"lineNum":" 1319","line":"                let alice_did = \"did:poly:alice\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"7346","possible_hits":"1",},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"                Balances::make_free_balance_be(&alice_acc, 1_000_000);","class":"lineCov","hits":"1","order":"7347","possible_hits":"1",},
{"lineNum":" 1322","line":"                Identity::register_did(Origin::signed(alice_acc), alice_did.clone(), vec![])","class":"linePartCov","hits":"1","order":"7348","possible_hits":"2",},
{"lineNum":" 1323","line":"                    .expect(\"Could not create alice_did\");"},
{"lineNum":" 1324","line":""},
{"lineNum":" 1325","line":"                // Issuance is successful"},
{"lineNum":" 1326","line":"                assert_ok!(Asset::create_token(","class":"linePartCov","hits":"2","order":"7354","possible_hits":"3",},
{"lineNum":" 1327","line":"                    Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7349","possible_hits":"1",},
{"lineNum":" 1328","line":"                    owner_did.clone(),","class":"lineCov","hits":"1","order":"7350","possible_hits":"1",},
{"lineNum":" 1329","line":"                    token.name.clone(),","class":"lineCov","hits":"1","order":"7351","possible_hits":"1",},
{"lineNum":" 1330","line":"                    token.name.clone(),","class":"lineCov","hits":"1","order":"7352","possible_hits":"1",},
{"lineNum":" 1331","line":"                    token.total_supply,","class":"lineCov","hits":"1","order":"7353","possible_hits":"1",},
{"lineNum":" 1332","line":"                    true"},
{"lineNum":" 1333","line":"                ));","class":"linePartCov","hits":"1","order":"7355","possible_hits":"2",},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"                general_tm::Module::<Test>::add_to_whitelist(","class":"lineCov","hits":"2","order":"7361","possible_hits":"2",},
{"lineNum":" 1336","line":"                    Origin::signed(owner_acc),","class":"lineCov","hits":"2","order":"7356","possible_hits":"2",},
{"lineNum":" 1337","line":"                    owner_did.clone(),","class":"lineCov","hits":"1","order":"7357","possible_hits":"1",},
{"lineNum":" 1338","line":"                    token.name.clone(),","class":"lineCov","hits":"1","order":"7358","possible_hits":"1",},
{"lineNum":" 1339","line":"                    0,"},
{"lineNum":" 1340","line":"                    owner_did.clone(),","class":"lineCov","hits":"1","order":"7359","possible_hits":"1",},
{"lineNum":" 1341","line":"                    (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"7360","possible_hits":"1",},
{"lineNum":" 1342","line":"                )","class":"linePartCov","hits":"1","order":"7362","possible_hits":"2",},
{"lineNum":" 1343","line":"                .expect(\"Could not configure general_tm for owner\");"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"                general_tm::Module::<Test>::add_to_whitelist(","class":"lineCov","hits":"2","order":"7368","possible_hits":"2",},
{"lineNum":" 1346","line":"                    Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7363","possible_hits":"1",},
{"lineNum":" 1347","line":"                    owner_did.clone(),","class":"lineCov","hits":"1","order":"7364","possible_hits":"1",},
{"lineNum":" 1348","line":"                    token.name.clone(),","class":"lineCov","hits":"1","order":"7365","possible_hits":"1",},
{"lineNum":" 1349","line":"                    0,"},
{"lineNum":" 1350","line":"                    alice_did.clone(),","class":"lineCov","hits":"1","order":"7366","possible_hits":"1",},
{"lineNum":" 1351","line":"                    (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"7367","possible_hits":"1",},
{"lineNum":" 1352","line":"                )","class":"linePartCov","hits":"1","order":"7369","possible_hits":"2",},
{"lineNum":" 1353","line":"                .expect(\"Could not configure general_tm for alice\");"},
{"lineNum":" 1354","line":""},
{"lineNum":" 1355","line":"                let mut owner_balance: [u128; 100] = [1_000_000; 100];","class":"lineCov","hits":"1","order":"7370","possible_hits":"1",},
{"lineNum":" 1356","line":"                let mut alice_balance: [u128; 100] = [0; 100];","class":"lineCov","hits":"1","order":"7371","possible_hits":"1",},
{"lineNum":" 1357","line":"                let mut rng = rand::thread_rng();","class":"lineCov","hits":"2","order":"7372","possible_hits":"2",},
{"lineNum":" 1358","line":"                for j in 1..100 {","class":"linePartCov","hits":"2","order":"7487","possible_hits":"3",},
{"lineNum":" 1359","line":"                    let transfers = rng.gen_range(0, 10);","class":"lineCov","hits":"1","order":"7488","possible_hits":"1",},
{"lineNum":" 1360","line":"                    owner_balance[j] = owner_balance[j - 1];","class":"linePartCov","hits":"1","order":"7671","possible_hits":"2",},
{"lineNum":" 1361","line":"                    alice_balance[j] = alice_balance[j - 1];","class":"linePartCov","hits":"1","order":"7672","possible_hits":"2",},
{"lineNum":" 1362","line":"                    for _k in 0..transfers {","class":"linePartCov","hits":"2","order":"7673","possible_hits":"3",},
{"lineNum":" 1363","line":"                        if j == 1 {","class":"lineCov","hits":"1","order":"7674","possible_hits":"1",},
{"lineNum":" 1364","line":"                            owner_balance[0] -= 1;","class":"linePartCov","hits":"1","order":"7675","possible_hits":"2",},
{"lineNum":" 1365","line":"                            alice_balance[0] += 1;","class":"linePartCov","hits":"1","order":"7676","possible_hits":"2",},
{"lineNum":" 1366","line":"                        }"},
{"lineNum":" 1367","line":"                        owner_balance[j] -= 1;","class":"linePartCov","hits":"1","order":"7677","possible_hits":"2",},
{"lineNum":" 1368","line":"                        alice_balance[j] += 1;","class":"linePartCov","hits":"1","order":"7678","possible_hits":"2",},
{"lineNum":" 1369","line":"                        assert_ok!(Asset::transfer(","class":"linePartCov","hits":"2","order":"7683","possible_hits":"3",},
{"lineNum":" 1370","line":"                            Origin::signed(owner_acc),","class":"lineCov","hits":"1","order":"7679","possible_hits":"1",},
{"lineNum":" 1371","line":"                            owner_did.clone(),","class":"lineCov","hits":"1","order":"7680","possible_hits":"1",},
{"lineNum":" 1372","line":"                            token.name.clone(),","class":"lineCov","hits":"1","order":"7681","possible_hits":"1",},
{"lineNum":" 1373","line":"                            alice_did.clone(),","class":"lineCov","hits":"1","order":"7682","possible_hits":"1",},
{"lineNum":" 1374","line":"                            1"},
{"lineNum":" 1375","line":"                        ));","class":"linePartCov","hits":"1","order":"7684","possible_hits":"2",},
{"lineNum":" 1376","line":"                    }"},
{"lineNum":" 1377","line":"                    assert_ok!(Asset::create_checkpoint(","class":"linePartCov","hits":"2","order":"7688","possible_hits":"3",},
{"lineNum":" 1378","line":"                        Origin::signed(owner_acc),","class":"lineCov","hits":"2","order":"7685","possible_hits":"2",},
{"lineNum":" 1379","line":"                        owner_did.clone(),","class":"lineCov","hits":"1","order":"7686","possible_hits":"1",},
{"lineNum":" 1380","line":"                        token.name.clone(),","class":"lineCov","hits":"1","order":"7687","possible_hits":"1",},
{"lineNum":" 1381","line":"                    ));","class":"linePartCov","hits":"1","order":"7689","possible_hits":"2",},
{"lineNum":" 1382","line":"                    let x: u64 = u64::try_from(j).unwrap();","class":"lineCov","hits":"2","order":"7690","possible_hits":"2",},
{"lineNum":" 1383","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7697","possible_hits":"2",},
{"lineNum":" 1384","line":"                        Asset::get_balance_at(&token.name, &owner_did, 0),","class":"lineCov","hits":"1","order":"7694","possible_hits":"1",},
{"lineNum":" 1385","line":"                        owner_balance[j]","class":"linePartCov","hits":"1","order":"7696","possible_hits":"2",},
{"lineNum":" 1386","line":"                    );"},
{"lineNum":" 1387","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7700","possible_hits":"2",},
{"lineNum":" 1388","line":"                        Asset::get_balance_at(&token.name, &alice_did, 0),","class":"lineCov","hits":"2","order":"7698","possible_hits":"2",},
{"lineNum":" 1389","line":"                        alice_balance[j]","class":"linePartCov","hits":"1","order":"7699","possible_hits":"2",},
{"lineNum":" 1390","line":"                    );"},
{"lineNum":" 1391","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7702","possible_hits":"2",},
{"lineNum":" 1392","line":"                        Asset::get_balance_at(&token.name, &owner_did, 1),","class":"lineCov","hits":"2","order":"7701","possible_hits":"2",},
{"lineNum":" 1393","line":"                        owner_balance[1]"},
{"lineNum":" 1394","line":"                    );"},
{"lineNum":" 1395","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7704","possible_hits":"2",},
{"lineNum":" 1396","line":"                        Asset::get_balance_at(&token.name, &alice_did, 1),","class":"lineCov","hits":"2","order":"7703","possible_hits":"2",},
{"lineNum":" 1397","line":"                        alice_balance[1]"},
{"lineNum":" 1398","line":"                    );"},
{"lineNum":" 1399","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7707","possible_hits":"2",},
{"lineNum":" 1400","line":"                        Asset::get_balance_at(&token.name, &owner_did, x - 1),","class":"linePartCov","hits":"2","order":"7705","possible_hits":"3",},
{"lineNum":" 1401","line":"                        owner_balance[j - 1]","class":"linePartCov","hits":"1","order":"7706","possible_hits":"2",},
{"lineNum":" 1402","line":"                    );"},
{"lineNum":" 1403","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7710","possible_hits":"2",},
{"lineNum":" 1404","line":"                        Asset::get_balance_at(&token.name, &alice_did, x - 1),","class":"linePartCov","hits":"2","order":"7708","possible_hits":"3",},
{"lineNum":" 1405","line":"                        alice_balance[j - 1]","class":"linePartCov","hits":"1","order":"7709","possible_hits":"2",},
{"lineNum":" 1406","line":"                    );"},
{"lineNum":" 1407","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7713","possible_hits":"2",},
{"lineNum":" 1408","line":"                        Asset::get_balance_at(&token.name, &owner_did, x),","class":"lineCov","hits":"2","order":"7711","possible_hits":"2",},
{"lineNum":" 1409","line":"                        owner_balance[j]","class":"linePartCov","hits":"1","order":"7712","possible_hits":"2",},
{"lineNum":" 1410","line":"                    );"},
{"lineNum":" 1411","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7716","possible_hits":"2",},
{"lineNum":" 1412","line":"                        Asset::get_balance_at(&token.name, &alice_did, x),","class":"lineCov","hits":"2","order":"7714","possible_hits":"2",},
{"lineNum":" 1413","line":"                        alice_balance[j]","class":"linePartCov","hits":"1","order":"7715","possible_hits":"2",},
{"lineNum":" 1414","line":"                    );"},
{"lineNum":" 1415","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7719","possible_hits":"2",},
{"lineNum":" 1416","line":"                        Asset::get_balance_at(&token.name, &owner_did, x + 1),","class":"linePartCov","hits":"2","order":"7717","possible_hits":"3",},
{"lineNum":" 1417","line":"                        owner_balance[j]","class":"linePartCov","hits":"1","order":"7718","possible_hits":"2",},
{"lineNum":" 1418","line":"                    );"},
{"lineNum":" 1419","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7722","possible_hits":"2",},
{"lineNum":" 1420","line":"                        Asset::get_balance_at(&token.name, &alice_did, x + 1),","class":"linePartCov","hits":"2","order":"7720","possible_hits":"3",},
{"lineNum":" 1421","line":"                        alice_balance[j]","class":"linePartCov","hits":"1","order":"7721","possible_hits":"2",},
{"lineNum":" 1422","line":"                    );"},
{"lineNum":" 1423","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7725","possible_hits":"2",},
{"lineNum":" 1424","line":"                        Asset::get_balance_at(&token.name, &owner_did, 1000),","class":"lineCov","hits":"2","order":"7723","possible_hits":"2",},
{"lineNum":" 1425","line":"                        owner_balance[j]","class":"linePartCov","hits":"1","order":"7724","possible_hits":"2",},
{"lineNum":" 1426","line":"                    );"},
{"lineNum":" 1427","line":"                    assert_eq!(","class":"linePartCov","hits":"1","order":"7728","possible_hits":"2",},
{"lineNum":" 1428","line":"                        Asset::get_balance_at(&token.name, &alice_did, 1000),","class":"lineCov","hits":"2","order":"7726","possible_hits":"2",},
{"lineNum":" 1429","line":"                        alice_balance[j]","class":"linePartCov","hits":"1","order":"7727","possible_hits":"3",},
{"lineNum":" 1430","line":"                    );"},
{"lineNum":" 1431","line":"                }"},
{"lineNum":" 1432","line":"            });","class":"linePartCov","hits":"3","order":"7997","possible_hits":"6",},
{"lineNum":" 1433","line":"            println!(\"Instance {} done\", i);","class":"lineCov","hits":"1","order":"7998","possible_hits":"1",},
{"lineNum":" 1434","line":"        }"},
{"lineNum":" 1435","line":"        println!(\"Done\");","class":"lineCov","hits":"2","order":"8014","possible_hits":"2",},
{"lineNum":" 1436","line":"    }","class":"linePartCov","hits":"2","order":"8015","possible_hits":"3",},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"    /*"},
{"lineNum":" 1439","line":"     *    #[test]"},
{"lineNum":" 1440","line":"     *    /// This test loads up a YAML of testcases and checks each of them"},
{"lineNum":" 1441","line":"     *    fn transfer_scenarios_external() {"},
{"lineNum":" 1442","line":"     *        let mut yaml_path_buf = PathBuf::new();"},
{"lineNum":" 1443","line":"     *        yaml_path_buf.push(env!(\"CARGO_MANIFEST_DIR\")); // This package\'s root"},
{"lineNum":" 1444","line":"     *        yaml_path_buf.push(\"tests/asset_transfers.yml\");"},
{"lineNum":" 1445","line":"     *"},
{"lineNum":" 1446","line":"     *        println!(\"Loading YAML from {:?}\", yaml_path_buf);"},
{"lineNum":" 1447","line":"     *"},
{"lineNum":" 1448","line":"     *        let yaml_string = read_to_string(yaml_path_buf.as_path())"},
{"lineNum":" 1449","line":"     *            .expect(\"Could not load the YAML file to a string\");"},
{"lineNum":" 1450","line":"     *"},
{"lineNum":" 1451","line":"     *        // Parse the YAML"},
{"lineNum":" 1452","line":"     *        let yaml = YamlLoader::load_from_str(&yaml_string).expect(\"Could not parse the YAML file\");"},
{"lineNum":" 1453","line":"     *"},
{"lineNum":" 1454","line":"     *        let yaml = &yaml[0];"},
{"lineNum":" 1455","line":"     *"},
{"lineNum":" 1456","line":"     *        let now = Utc::now();"},
{"lineNum":" 1457","line":"     *"},
{"lineNum":" 1458","line":"     *        for case in yaml[\"test_cases\"]"},
{"lineNum":" 1459","line":"     *            .as_vec()"},
{"lineNum":" 1460","line":"     *            .expect(\"Could not reach test_cases\")"},
{"lineNum":" 1461","line":"     *        {"},
{"lineNum":" 1462","line":"     *            println!(\"Case: {:#?}\", case);"},
{"lineNum":" 1463","line":"     *"},
{"lineNum":" 1464","line":"     *            let accounts = case[\"named_accounts\"]"},
{"lineNum":" 1465","line":"     *                .as_hash()"},
{"lineNum":" 1466","line":"     *                .expect(\"Could not view named_accounts as a hashmap\");"},
{"lineNum":" 1467","line":"     *"},
{"lineNum":" 1468","line":"     *            let mut externalities = if let Some(identity_owner) ="},
{"lineNum":" 1469","line":"     *                accounts.get(&Yaml::String(\"identity-owner\".to_owned()))"},
{"lineNum":" 1470","line":"     *            {"},
{"lineNum":" 1471","line":"     *                identity_owned_by("},
{"lineNum":" 1472","line":"     *                    identity_owner[\"id\"]"},
{"lineNum":" 1473","line":"     *                        .as_i64()"},
{"lineNum":" 1474","line":"     *                        .expect(\"Could not get identity owner\'s ID\") as u64,"},
{"lineNum":" 1475","line":"     *                )"},
{"lineNum":" 1476","line":"     *            } else {"},
{"lineNum":" 1477","line":"     *                system::GenesisConfig::default()"},
{"lineNum":" 1478","line":"     *                    .build_storage()"},
{"lineNum":" 1479","line":"     *                    .unwrap()"},
{"lineNum":" 1480","line":"     *                    .0"},
{"lineNum":" 1481","line":"     *                    .into()"},
{"lineNum":" 1482","line":"     *            };"},
{"lineNum":" 1483","line":"     *"},
{"lineNum":" 1484","line":"     *            with_externalities(&mut externalities, || {"},
{"lineNum":" 1485","line":"     *                // Instantiate accounts"},
{"lineNum":" 1486","line":"     *                for (name, account) in accounts {"},
{"lineNum":" 1487","line":"     *                    <timestamp::Module<Test>>::set_timestamp(now.timestamp() as u64);"},
{"lineNum":" 1488","line":"     *                    let name = name"},
{"lineNum":" 1489","line":"     *                        .as_str()"},
{"lineNum":" 1490","line":"     *                        .expect(\"Could not take named_accounts key as string\");"},
{"lineNum":" 1491","line":"     *                    let id = account[\"id\"].as_i64().expect(\"id is not a number\") as u64;"},
{"lineNum":" 1492","line":"     *                    let balance = account[\"balance\"]"},
{"lineNum":" 1493","line":"     *                        .as_i64()"},
{"lineNum":" 1494","line":"     *                        .expect(\"balance is not a number\");"},
{"lineNum":" 1495","line":"     *"},
{"lineNum":" 1496","line":"     *                    println!(\"Preparing account {}\", name);"},
{"lineNum":" 1497","line":"     *"},
{"lineNum":" 1498","line":"     *                    Balances::make_free_balance_be(&id, balance.clone() as u128);"},
{"lineNum":" 1499","line":"     *                    println!(\"{}: gets {} initial balance\", name, balance);"},
{"lineNum":" 1500","line":"     *                    if account[\"issuer\"]"},
{"lineNum":" 1501","line":"     *                        .as_bool()"},
{"lineNum":" 1502","line":"     *                        .expect(\"Could not check if account is an issuer\")"},
{"lineNum":" 1503","line":"     *                    {"},
{"lineNum":" 1504","line":"     *                        assert_ok!(identity::Module::<Test>::do_create_issuer(id));"},
{"lineNum":" 1505","line":"     *                        println!(\"{}: becomes issuer\", name);"},
{"lineNum":" 1506","line":"     *                    }"},
{"lineNum":" 1507","line":"     *                    if account[\"investor\"]"},
{"lineNum":" 1508","line":"     *                        .as_bool()"},
{"lineNum":" 1509","line":"     *                        .expect(\"Could not check if account is an investor\")"},
{"lineNum":" 1510","line":"     *                    {"},
{"lineNum":" 1511","line":"     *                        assert_ok!(identity::Module::<Test>::do_create_investor(id));"},
{"lineNum":" 1512","line":"     *                        println!(\"{}: becomes investor\", name);"},
{"lineNum":" 1513","line":"     *                    }"},
{"lineNum":" 1514","line":"     *                }"},
{"lineNum":" 1515","line":"     *"},
{"lineNum":" 1516","line":"     *                // Issue tokens"},
{"lineNum":" 1517","line":"     *                let tokens = case[\"tokens\"]"},
{"lineNum":" 1518","line":"     *                    .as_hash()"},
{"lineNum":" 1519","line":"     *                    .expect(\"Could not view tokens as a hashmap\");"},
{"lineNum":" 1520","line":"     *"},
{"lineNum":" 1521","line":"     *                for (ticker, token) in tokens {"},
{"lineNum":" 1522","line":"     *                    let ticker = ticker.as_str().expect(\"Can\'t parse ticker as string\");"},
{"lineNum":" 1523","line":"     *                    println!(\"Preparing token {}:\", ticker);"},
{"lineNum":" 1524","line":"     *"},
{"lineNum":" 1525","line":"     *                    let owner = token[\"owner\"]"},
{"lineNum":" 1526","line":"     *                        .as_str()"},
{"lineNum":" 1527","line":"     *                        .expect(\"Can\'t parse owner as string\");"},
{"lineNum":" 1528","line":"     *"},
{"lineNum":" 1529","line":"     *                    let owner_id = accounts"},
{"lineNum":" 1530","line":"     *                        .get(&Yaml::String(owner.to_owned()))"},
{"lineNum":" 1531","line":"     *                        .expect(\"Can\'t get owner record\")[\"id\"]"},
{"lineNum":" 1532","line":"     *                        .as_i64()"},
{"lineNum":" 1533","line":"     *                        .expect(\"Can\'t parse owner id as i64\")"},
{"lineNum":" 1534","line":"     *                        as u64;"},
{"lineNum":" 1535","line":"     *                    let total_supply = token[\"total_supply\"]"},
{"lineNum":" 1536","line":"     *                        .as_i64()"},
{"lineNum":" 1537","line":"     *                        .expect(\"Can\'t parse the total supply as i64\")"},
{"lineNum":" 1538","line":"     *                        as u128;"},
{"lineNum":" 1539","line":"     *"},
{"lineNum":" 1540","line":"     *                    let token_struct = SecurityToken {"},
{"lineNum":" 1541","line":"     *                        name: ticker.to_owned().into_bytes(),"},
{"lineNum":" 1542","line":"     *                        owner: owner_id,"},
{"lineNum":" 1543","line":"     *                        total_supply,"},
{"lineNum":" 1544","line":"     *                        granularity: 1,"},
{"lineNum":" 1545","line":"     *                        decimals: 18,"},
{"lineNum":" 1546","line":"     *                    };"},
{"lineNum":" 1547","line":"     *                    println!(\"{:#?}\", token_struct);"},
{"lineNum":" 1548","line":"     *"},
{"lineNum":" 1549","line":"     *                    // Check that issuing succeeds/fails as expected"},
{"lineNum":" 1550","line":"     *                    if token[\"issuance_succeeds\"]"},
{"lineNum":" 1551","line":"     *                        .as_bool()"},
{"lineNum":" 1552","line":"     *                        .expect(\"Could not check if issuance should succeed\")"},
{"lineNum":" 1553","line":"     *                    {"},
{"lineNum":" 1554","line":"     *                        assert_ok!(Asset::create_token("},
{"lineNum":" 1555","line":"     *                            Origin::signed(token_struct.owner),"},
{"lineNum":" 1556","line":"     *                            token_struct.name.clone(),"},
{"lineNum":" 1557","line":"     *                            token_struct.name.clone(),"},
{"lineNum":" 1558","line":"     *                            token_struct.total_supply,"},
{"lineNum":" 1559","line":"     *                            true"},
{"lineNum":" 1560","line":"     *                        ));"},
{"lineNum":" 1561","line":"     *"},
{"lineNum":" 1562","line":"     *                        // Also check that the new token matches what we asked to create"},
{"lineNum":" 1563","line":"     *                        assert_eq!("},
{"lineNum":" 1564","line":"     *                            Asset::token_details(token_struct.name.clone()),"},
{"lineNum":" 1565","line":"     *                            token_struct"},
{"lineNum":" 1566","line":"     *                        );"},
{"lineNum":" 1567","line":"     *"},
{"lineNum":" 1568","line":"     *                        // Check that the issuer\'s balance corresponds to total supply"},
{"lineNum":" 1569","line":"     *                        assert_eq!("},
{"lineNum":" 1570","line":"     *                            Asset::balance_of((token_struct.name, token_struct.owner)),"},
{"lineNum":" 1571","line":"     *                            token_struct.total_supply"},
{"lineNum":" 1572","line":"     *                        );"},
{"lineNum":" 1573","line":"     *"},
{"lineNum":" 1574","line":"     *                        // Add specified whitelist entries"},
{"lineNum":" 1575","line":"     *                        let whitelists = token[\"whitelist_entries\"]"},
{"lineNum":" 1576","line":"     *                            .as_vec()"},
{"lineNum":" 1577","line":"     *                            .expect(\"Could not view token whitelist entries as vec\");"},
{"lineNum":" 1578","line":"     *"},
{"lineNum":" 1579","line":"     *                        for wl_entry in whitelists {"},
{"lineNum":" 1580","line":"     *                            let investor = wl_entry[\"investor\"]"},
{"lineNum":" 1581","line":"     *                                .as_str()"},
{"lineNum":" 1582","line":"     *                                .expect(\"Can\'t parse investor as string\");"},
{"lineNum":" 1583","line":"     *                            let investor_id = accounts"},
{"lineNum":" 1584","line":"     *                                .get(&Yaml::String(investor.to_owned()))"},
{"lineNum":" 1585","line":"     *                                .expect(\"Can\'t get investor account record\")[\"id\"]"},
{"lineNum":" 1586","line":"     *                                .as_i64()"},
{"lineNum":" 1587","line":"     *                                .expect(\"Can\'t parse investor id as i64\")"},
{"lineNum":" 1588","line":"     *                                as u64;"},
{"lineNum":" 1589","line":"     *"},
{"lineNum":" 1590","line":"     *                            let expiry = wl_entry[\"expiry\"]"},
{"lineNum":" 1591","line":"     *                                .as_i64()"},
{"lineNum":" 1592","line":"     *                                .expect(\"Can\'t parse expiry as i64\");"},
{"lineNum":" 1593","line":"     *"},
{"lineNum":" 1594","line":"     *                            let wl_id = wl_entry[\"whitelist_id\"]"},
{"lineNum":" 1595","line":"     *                                .as_i64()"},
{"lineNum":" 1596","line":"     *                                .expect(\"Could not parse whitelist_id as i64\")"},
{"lineNum":" 1597","line":"     *                                as u32;"},
{"lineNum":" 1598","line":"     *"},
{"lineNum":" 1599","line":"     *                            println!("},
{"lineNum":" 1600","line":"     *                                \"Token {}: processing whitelist entry for {}\","},
{"lineNum":" 1601","line":"     *                                ticker, investor"},
{"lineNum":" 1602","line":"     *                            );"},
{"lineNum":" 1603","line":"     *"},
{"lineNum":" 1604","line":"     *                            general_tm::Module::<Test>::add_to_whitelist("},
{"lineNum":" 1605","line":"     *                                Origin::signed(owner_id),"},
{"lineNum":" 1606","line":"     *                                ticker.to_owned().into_bytes(),"},
{"lineNum":" 1607","line":"     *                                wl_id,"},
{"lineNum":" 1608","line":"     *                                investor_id,"},
{"lineNum":" 1609","line":"     *                                (now + Duration::hours(expiry)).timestamp() as u64,"},
{"lineNum":" 1610","line":"     *                            )"},
{"lineNum":" 1611","line":"     *                            .expect(\"Could not create whitelist entry\");"},
{"lineNum":" 1612","line":"     *                        }"},
{"lineNum":" 1613","line":"     *                    } else {"},
{"lineNum":" 1614","line":"     *                        assert!(Asset::create_token("},
{"lineNum":" 1615","line":"     *                            Origin::signed(token_struct.owner),"},
{"lineNum":" 1616","line":"     *                            token_struct.name.clone(),"},
{"lineNum":" 1617","line":"     *                            token_struct.name.clone(),"},
{"lineNum":" 1618","line":"     *                            token_struct.total_supply,"},
{"lineNum":" 1619","line":"     *                            true"},
{"lineNum":" 1620","line":"     *                        )"},
{"lineNum":" 1621","line":"     *                        .is_err());"},
{"lineNum":" 1622","line":"     *                    }"},
{"lineNum":" 1623","line":"     *                }"},
{"lineNum":" 1624","line":"     *"},
{"lineNum":" 1625","line":"     *                // Set up allowances"},
{"lineNum":" 1626","line":"     *                let allowances = case[\"allowances\"]"},
{"lineNum":" 1627","line":"     *                    .as_vec()"},
{"lineNum":" 1628","line":"     *                    .expect(\"Could not view allowances as a vec\");"},
{"lineNum":" 1629","line":"     *"},
{"lineNum":" 1630","line":"     *                for allowance in allowances {"},
{"lineNum":" 1631","line":"     *                    let sender = allowance[\"sender\"]"},
{"lineNum":" 1632","line":"     *                        .as_str()"},
{"lineNum":" 1633","line":"     *                        .expect(\"Could not view sender as str\");"},
{"lineNum":" 1634","line":"     *                    let sender_id = case[\"named_accounts\"][sender][\"id\"]"},
{"lineNum":" 1635","line":"     *                        .as_i64()"},
{"lineNum":" 1636","line":"     *                        .expect(\"Could not view sender id as i64\")"},
{"lineNum":" 1637","line":"     *                        as u64;"},
{"lineNum":" 1638","line":"     *                    let spender = allowance[\"spender\"]"},
{"lineNum":" 1639","line":"     *                        .as_str()"},
{"lineNum":" 1640","line":"     *                        .expect(\"Could not view spender as str\");"},
{"lineNum":" 1641","line":"     *                    let spender_id = case[\"named_accounts\"][spender][\"id\"]"},
{"lineNum":" 1642","line":"     *                        .as_i64()"},
{"lineNum":" 1643","line":"     *                        .expect(\"Could not view sender id as i64\")"},
{"lineNum":" 1644","line":"     *                        as u64;"},
{"lineNum":" 1645","line":"     *                    let amount = allowance[\"amount\"]"},
{"lineNum":" 1646","line":"     *                        .as_i64()"},
{"lineNum":" 1647","line":"     *                        .expect(\"Could not view amount as i64\")"},
{"lineNum":" 1648","line":"     *                        as u128;"},
{"lineNum":" 1649","line":"     *                    let ticker = allowance[\"ticker\"]"},
{"lineNum":" 1650","line":"     *                        .as_str()"},
{"lineNum":" 1651","line":"     *                        .expect(\"Could not view ticker as str\");"},
{"lineNum":" 1652","line":"     *                    let succeeds = allowance[\"succeeds\"]"},
{"lineNum":" 1653","line":"     *                        .as_bool()"},
{"lineNum":" 1654","line":"     *                        .expect(\"Could not determine if allowance should succeed\");"},
{"lineNum":" 1655","line":"     *"},
{"lineNum":" 1656","line":"     *                    if succeeds {"},
{"lineNum":" 1657","line":"     *                        assert_ok!(Asset::approve("},
{"lineNum":" 1658","line":"     *                            Origin::signed(sender_id),"},
{"lineNum":" 1659","line":"     *                            ticker.to_owned().into_bytes(),"},
{"lineNum":" 1660","line":"     *                            spender_id,"},
{"lineNum":" 1661","line":"     *                            amount,"},
{"lineNum":" 1662","line":"     *                        ));"},
{"lineNum":" 1663","line":"     *                    } else {"},
{"lineNum":" 1664","line":"     *                        assert!(Asset::approve("},
{"lineNum":" 1665","line":"     *                            Origin::signed(sender_id),"},
{"lineNum":" 1666","line":"     *                            ticker.to_owned().into_bytes(),"},
{"lineNum":" 1667","line":"     *                            spender_id,"},
{"lineNum":" 1668","line":"     *                            amount,"},
{"lineNum":" 1669","line":"     *                        )"},
{"lineNum":" 1670","line":"     *                        .is_err())"},
{"lineNum":" 1671","line":"     *                    }"},
{"lineNum":" 1672","line":"     *                }"},
{"lineNum":" 1673","line":"     *"},
{"lineNum":" 1674","line":"     *                println!(\"Transfers:\");"},
{"lineNum":" 1675","line":"     *                // Perform regular transfers"},
{"lineNum":" 1676","line":"     *                let transfers = case[\"transfers\"]"},
{"lineNum":" 1677","line":"     *                    .as_vec()"},
{"lineNum":" 1678","line":"     *                    .expect(\"Could not view transfers as vec\");"},
{"lineNum":" 1679","line":"     *                for transfer in transfers {"},
{"lineNum":" 1680","line":"     *                    let from = transfer[\"from\"]"},
{"lineNum":" 1681","line":"     *                        .as_str()"},
{"lineNum":" 1682","line":"     *                        .expect(\"Could not view from as str\");"},
{"lineNum":" 1683","line":"     *                    let from_id = case[\"named_accounts\"][from][\"id\"]"},
{"lineNum":" 1684","line":"     *                        .as_i64()"},
{"lineNum":" 1685","line":"     *                        .expect(\"Could not view from_id as i64\")"},
{"lineNum":" 1686","line":"     *                        as u64;"},
{"lineNum":" 1687","line":"     *                    let to = transfer[\"to\"].as_str().expect(\"Could not view to as str\");"},
{"lineNum":" 1688","line":"     *                    let to_id = case[\"named_accounts\"][to][\"id\"]"},
{"lineNum":" 1689","line":"     *                        .as_i64()"},
{"lineNum":" 1690","line":"     *                        .expect(\"Could not view to_id as i64\")"},
{"lineNum":" 1691","line":"     *                        as u64;"},
{"lineNum":" 1692","line":"     *                    let amount = transfer[\"amount\"]"},
{"lineNum":" 1693","line":"     *                        .as_i64()"},
{"lineNum":" 1694","line":"     *                        .expect(\"Could not view amount as i64\")"},
{"lineNum":" 1695","line":"     *                        as u128;"},
{"lineNum":" 1696","line":"     *                    let ticker = transfer[\"ticker\"]"},
{"lineNum":" 1697","line":"     *                        .as_str()"},
{"lineNum":" 1698","line":"     *                        .expect(\"Coule not view ticker as str\")"},
{"lineNum":" 1699","line":"     *                        .to_owned();"},
{"lineNum":" 1700","line":"     *                    let succeeds = transfer[\"succeeds\"]"},
{"lineNum":" 1701","line":"     *                        .as_bool()"},
{"lineNum":" 1702","line":"     *                        .expect(\"Could not view succeeds as bool\");"},
{"lineNum":" 1703","line":"     *"},
{"lineNum":" 1704","line":"     *                    println!(\"{} of token {} from {} to {}\", amount, ticker, from, to);"},
{"lineNum":" 1705","line":"     *                    let ticker = ticker.into_bytes();"},
{"lineNum":" 1706","line":"     *"},
{"lineNum":" 1707","line":"     *                    // Get sender\'s investor data"},
{"lineNum":" 1708","line":"     *                    let investor_data = <InvestorList<Test>>::get(from_id);"},
{"lineNum":" 1709","line":"     *"},
{"lineNum":" 1710","line":"     *                    println!(\"{}\'s investor data: {:#?}\", from, investor_data);"},
{"lineNum":" 1711","line":"     *"},
{"lineNum":" 1712","line":"     *                    if succeeds {"},
{"lineNum":" 1713","line":"     *                        assert_ok!(Asset::transfer("},
{"lineNum":" 1714","line":"     *                            Origin::signed(from_id),"},
{"lineNum":" 1715","line":"     *                            ticker,"},
{"lineNum":" 1716","line":"     *                            to_id,"},
{"lineNum":" 1717","line":"     *                            amount"},
{"lineNum":" 1718","line":"     *                        ));"},
{"lineNum":" 1719","line":"     *                    } else {"},
{"lineNum":" 1720","line":"     *                        assert!("},
{"lineNum":" 1721","line":"     *                            Asset::transfer(Origin::signed(from_id), ticker, to_id, amount)"},
{"lineNum":" 1722","line":"     *                                .is_err()"},
{"lineNum":" 1723","line":"     *                        );"},
{"lineNum":" 1724","line":"     *                    }"},
{"lineNum":" 1725","line":"     *                }"},
{"lineNum":" 1726","line":"     *"},
{"lineNum":" 1727","line":"     *                println!(\"Approval-based transfers:\");"},
{"lineNum":" 1728","line":"     *                // Perform allowance transfers"},
{"lineNum":" 1729","line":"     *                let transfer_froms = case[\"transfer_froms\"]"},
{"lineNum":" 1730","line":"     *                    .as_vec()"},
{"lineNum":" 1731","line":"     *                    .expect(\"Could not view transfer_froms as vec\");"},
{"lineNum":" 1732","line":"     *                for transfer_from in transfer_froms {"},
{"lineNum":" 1733","line":"     *                    let from = transfer_from[\"from\"]"},
{"lineNum":" 1734","line":"     *                        .as_str()"},
{"lineNum":" 1735","line":"     *                        .expect(\"Could not view from as str\");"},
{"lineNum":" 1736","line":"     *                    let from_id = case[\"named_accounts\"][from][\"id\"]"},
{"lineNum":" 1737","line":"     *                        .as_i64()"},
{"lineNum":" 1738","line":"     *                        .expect(\"Could not view from_id as i64\")"},
{"lineNum":" 1739","line":"     *                        as u64;"},
{"lineNum":" 1740","line":"     *                    let spender = transfer_from[\"spender\"]"},
{"lineNum":" 1741","line":"     *                        .as_str()"},
{"lineNum":" 1742","line":"     *                        .expect(\"Could not view spender as str\");"},
{"lineNum":" 1743","line":"     *                    let spender_id = case[\"named_accounts\"][spender][\"id\"]"},
{"lineNum":" 1744","line":"     *                        .as_i64()"},
{"lineNum":" 1745","line":"     *                        .expect(\"Could not view spender_id as i64\")"},
{"lineNum":" 1746","line":"     *                        as u64;"},
{"lineNum":" 1747","line":"     *                    let to = transfer_from[\"to\"]"},
{"lineNum":" 1748","line":"     *                        .as_str()"},
{"lineNum":" 1749","line":"     *                        .expect(\"Could not view to as str\");"},
{"lineNum":" 1750","line":"     *                    let to_id = case[\"named_accounts\"][to][\"id\"]"},
{"lineNum":" 1751","line":"     *                        .as_i64()"},
{"lineNum":" 1752","line":"     *                        .expect(\"Could not view to_id as i64\")"},
{"lineNum":" 1753","line":"     *                        as u64;"},
{"lineNum":" 1754","line":"     *                    let amount = transfer_from[\"amount\"]"},
{"lineNum":" 1755","line":"     *                        .as_i64()"},
{"lineNum":" 1756","line":"     *                        .expect(\"Could not view amount as i64\")"},
{"lineNum":" 1757","line":"     *                        as u128;"},
{"lineNum":" 1758","line":"     *                    let ticker = transfer_from[\"ticker\"]"},
{"lineNum":" 1759","line":"     *                        .as_str()"},
{"lineNum":" 1760","line":"     *                        .expect(\"Coule not view ticker as str\")"},
{"lineNum":" 1761","line":"     *                        .to_owned();"},
{"lineNum":" 1762","line":"     *                    let succeeds = transfer_from[\"succeeds\"]"},
{"lineNum":" 1763","line":"     *                        .as_bool()"},
{"lineNum":" 1764","line":"     *                        .expect(\"Could not view succeeds as bool\");"},
{"lineNum":" 1765","line":"     *"},
{"lineNum":" 1766","line":"     *                    println!("},
{"lineNum":" 1767","line":"     *                        \"{} of token {} from {} to {} spent by {}\","},
{"lineNum":" 1768","line":"     *                        amount, ticker, from, to, spender"},
{"lineNum":" 1769","line":"     *                    );"},
{"lineNum":" 1770","line":"     *                    let ticker = ticker.into_bytes();"},
{"lineNum":" 1771","line":"     *"},
{"lineNum":" 1772","line":"     *                    // Get sender\'s investor data"},
{"lineNum":" 1773","line":"     *                    let investor_data = <InvestorList<Test>>::get(spender_id);"},
{"lineNum":" 1774","line":"     *"},
{"lineNum":" 1775","line":"     *                    println!(\"{}\'s investor data: {:#?}\", from, investor_data);"},
{"lineNum":" 1776","line":"     *"},
{"lineNum":" 1777","line":"     *                    if succeeds {"},
{"lineNum":" 1778","line":"     *                        assert_ok!(Asset::transfer_from("},
{"lineNum":" 1779","line":"     *                            Origin::signed(spender_id),"},
{"lineNum":" 1780","line":"     *                            ticker,"},
{"lineNum":" 1781","line":"     *                            from_id,"},
{"lineNum":" 1782","line":"     *                            to_id,"},
{"lineNum":" 1783","line":"     *                            amount"},
{"lineNum":" 1784","line":"     *                        ));"},
{"lineNum":" 1785","line":"     *                    } else {"},
{"lineNum":" 1786","line":"     *                        assert!(Asset::transfer_from("},
{"lineNum":" 1787","line":"     *                            Origin::signed(from_id),"},
{"lineNum":" 1788","line":"     *                            ticker,"},
{"lineNum":" 1789","line":"     *                            from_id,"},
{"lineNum":" 1790","line":"     *                            to_id,"},
{"lineNum":" 1791","line":"     *                            amount"},
{"lineNum":" 1792","line":"     *                        )"},
{"lineNum":" 1793","line":"     *                        .is_err());"},
{"lineNum":" 1794","line":"     *                    }"},
{"lineNum":" 1795","line":"     *                }"},
{"lineNum":" 1796","line":"     *            });"},
{"lineNum":" 1797","line":"     *        }"},
{"lineNum":" 1798","line":"     *    }"},
{"lineNum":" 1799","line":"     */"},
{"lineNum":" 1800","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 395, "covered" : 344,};
var merged_data = [];
