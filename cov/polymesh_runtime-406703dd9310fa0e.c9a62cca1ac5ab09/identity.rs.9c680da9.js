var data = {lines:[
{"lineNum":"    1","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"pub static DID_PREFIX: &\'static str = \"did:poly:\";"},
{"lineNum":"    4","line":"use crate::balances;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"use primitives::{DidRecord, Key, KeyRole, SigningKey};"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"use codec::Encode;"},
{"lineNum":"    9","line":"use sr_primitives::traits::{CheckedAdd, CheckedSub};"},
{"lineNum":"   10","line":"use srml_support::{"},
{"lineNum":"   11","line":"    decl_event, decl_module, decl_storage,"},
{"lineNum":"   12","line":"    dispatch::Result,"},
{"lineNum":"   13","line":"    ensure,"},
{"lineNum":"   14","line":"    traits::{Currency, ExistenceRequirement, WithdrawReason},"},
{"lineNum":"   15","line":"};"},
{"lineNum":"   16","line":"use system::{self, ensure_signed};"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Eq, Debug)]","class":"linePartCov","hits":"12","order":"5651","possible_hits":"18",},
{"lineNum":"   19","line":"pub struct Claim<U> {","class":"lineCov","hits":"1","order":"5763","possible_hits":"1",},
{"lineNum":"   20","line":"    topic: u32,","class":"linePartCov","hits":"7","order":"5652","possible_hits":"8",},
{"lineNum":"   21","line":"    schema: u32,","class":"linePartCov","hits":"7","order":"5653","possible_hits":"8",},
{"lineNum":"   22","line":"    bytes: Vec<u8>,","class":"linePartCov","hits":"7","order":"5654","possible_hits":"9",},
{"lineNum":"   23","line":"    expiry: U,","class":"linePartCov","hits":"9","order":"5655","possible_hits":"14",},
{"lineNum":"   24","line":"}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   25","line":""},
{"lineNum":"   26","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Eq, Debug)]","class":"linePartCov","hits":"8","order":"5728","possible_hits":"13",},
{"lineNum":"   27","line":"pub struct ClaimRecord<U> {","class":"lineCov","hits":"1","order":"5767","possible_hits":"1",},
{"lineNum":"   28","line":"    claim: Claim<U>,","class":"linePartCov","hits":"2","order":"5762","possible_hits":"4",},
{"lineNum":"   29","line":"    revoked: bool,","class":"linePartCov","hits":"2","order":"5764","possible_hits":"5",},
{"lineNum":"   30","line":"    /// issuer DID","class":"linePartCov","hits":"1","order":"5765","possible_hits":"4",},
{"lineNum":"   31","line":"    issued_by: Vec<u8>,"},
{"lineNum":"   32","line":"    attestation: Vec<u8>,","class":"linePartCov","hits":"2","order":"5766","possible_hits":"6",},
{"lineNum":"   33","line":"}","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/// The module\'s configuration trait."},
{"lineNum":"   36","line":"pub trait Trait: system::Trait + balances::Trait + timestamp::Trait {"},
{"lineNum":"   37","line":"    /// The overarching event type."},
{"lineNum":"   38","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   39","line":"}"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"decl_storage! {","class":"linePartCov","hits":"78","order":"5190","possible_hits":"90",},
{"lineNum":"   42","line":"    trait Store for Module<T: Trait> as identity {"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"        Owner get(owner) config(): T::AccountId;"},
{"lineNum":"   45","line":""},
{"lineNum":"   46","line":"        /// DID -> identity info"},
{"lineNum":"   47","line":"        pub DidRecords get(did_records): map Vec<u8> => DidRecord<T::Balance>;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        /// DID -> DID claim issuers"},
{"lineNum":"   50","line":"        pub ClaimIssuers get(claim_issuers): map Vec<u8> => Vec<Vec<u8>>;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        /// DID -> Associated claims"},
{"lineNum":"   53","line":"        pub Claims get(claims): map Vec<u8> => Vec<ClaimRecord<T::Moment>>;"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        // Signing key => DID"},
{"lineNum":"   56","line":"        pub SigningKeyDid get(signing_key_did): map Key => Vec<u8>;"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"        // Signing key => Charge Fee to did?. Default is false i.e. the fee will be charged from user balance"},
{"lineNum":"   59","line":"        pub ChargeDid get(charge_did): map Key => bool;"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"        /// How much does creating a DID cost"},
{"lineNum":"   62","line":"        pub DidCreationFee get(did_creation_fee) config(): T::Balance;"},
{"lineNum":"   63","line":"    }"},
{"lineNum":"   64","line":"}","class":"linePartCov","hits":"47","order":"5191","possible_hits":"100",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"decl_module! {"},
{"lineNum":"   67","line":"    /// The module declaration."},
{"lineNum":"   68","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   69","line":"        // Initializing events"},
{"lineNum":"   70","line":"        // this is needed only if you are using events in your module"},
{"lineNum":"   71","line":"        fn deposit_event() = default;"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"        fn set_charge_did(origin, charge_did: bool) -> Result {"},
{"lineNum":"   75","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"   76","line":"            let sender_key = Key::try_from( sender.encode())?;"},
{"lineNum":"   77","line":"            <ChargeDid>::insert(sender_key, charge_did);"},
{"lineNum":"   78","line":"            Ok(())"},
{"lineNum":"   79","line":"        }"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        /// Register signing keys for a new DID. Uses origin key as the master key"},
{"lineNum":"   82","line":"        pub fn register_did(origin, did: Vec<u8>, signing_keys: Vec<SigningKey>) -> Result {"},
{"lineNum":"   83","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"9","order":"5248","possible_hits":"18",},
{"lineNum":"   84","line":"            let master_key = Key::try_from( sender.encode())?;","class":"linePartCov","hits":"7","order":"5251","possible_hits":"9",},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"            // Make sure caller specified a correct DID"},
{"lineNum":"   87","line":"            validate_did(did.as_slice())?;","class":"lineCov","hits":"3","order":"5252","possible_hits":"3",},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"            // Make sure there\'s no pre-existing entry for the DID"},
{"lineNum":"   90","line":"            ensure!(!<DidRecords<T>>::exists(&did), \"DID must be unique\");","class":"linePartCov","hits":"4","order":"5257","possible_hits":"6",},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"            // TODO: Subtract the fee"},
{"lineNum":"   93","line":"            let _imbalance = <balances::Module<T> as Currency<_>>::withdraw(","class":"linePartCov","hits":"6","order":"5265","possible_hits":"9",},
{"lineNum":"   94","line":"                &sender,"},
{"lineNum":"   95","line":"                Self::did_creation_fee(),","class":"lineCov","hits":"3","order":"5262","possible_hits":"3",},
{"lineNum":"   96","line":"                WithdrawReason::Fee,","class":"lineCov","hits":"3","order":"5263","possible_hits":"3",},
{"lineNum":"   97","line":"                ExistenceRequirement::KeepAlive","class":"lineCov","hits":"3","order":"5264","possible_hits":"3",},
{"lineNum":"   98","line":"                )?;","class":"linePartCov","hits":"6","order":"5339","possible_hits":"12",},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"            for roled_key in &signing_keys {","class":"linePartCov","hits":"7","order":"5340","possible_hits":"12",},
{"lineNum":"  101","line":"                let key = &roled_key.key;","class":"linePartCov","hits":"1","order":"6514","possible_hits":"3",},
{"lineNum":"  102","line":"                if <SigningKeyDid>::exists(key) {","class":"linePartCov","hits":"1","order":"6515","possible_hits":"6",},
{"lineNum":"  103","line":"                    ensure!(<SigningKeyDid>::get(key) == did, \"One signing key can only belong to one DID\");","class":"lineNoCov","hits":"0","possible_hits":"9",},
{"lineNum":"  104","line":"                }"},
{"lineNum":"  105","line":"            }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            for roled_key in &signing_keys {","class":"linePartCov","hits":"7","order":"5344","possible_hits":"12",},
{"lineNum":"  108","line":"                <SigningKeyDid>::insert( &roled_key.key, did.clone());","class":"linePartCov","hits":"1","order":"6516","possible_hits":"3",},
{"lineNum":"  109","line":"            }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"            let record = DidRecord {","class":"lineCov","hits":"3","order":"5384","possible_hits":"3",},
{"lineNum":"  112","line":"                signing_keys: signing_keys.clone(),","class":"lineCov","hits":"3","order":"5345","possible_hits":"3",},
{"lineNum":"  113","line":"                master_key,","class":"lineCov","hits":"3","order":"5377","possible_hits":"3",},
{"lineNum":"  114","line":"                ..Default::default()","class":"lineCov","hits":"3","order":"5378","possible_hits":"3",},
{"lineNum":"  115","line":"            };","class":"lineCov","hits":"3","order":"5385","possible_hits":"3",},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"            <DidRecords<T>>::insert(&did, record);","class":"lineCov","hits":"3","order":"5386","possible_hits":"3",},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"            Self::deposit_event(RawEvent::NewDid(did, sender, signing_keys));","class":"lineCov","hits":"3","order":"5387","possible_hits":"3",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            Ok(())","class":"lineCov","hits":"3","order":"5436","possible_hits":"3",},
{"lineNum":"  122","line":"        }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"        /// Adds new signing keys for a DID. Only called by master key owner."},
{"lineNum":"  125","line":"        pub fn add_signing_keys(origin, did: Vec<u8>, additional_keys: Vec<SigningKey>) -> Result {"},
{"lineNum":"  126","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"5482","possible_hits":"5",},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");","class":"linePartCov","hits":"2","order":"5483","possible_hits":"4",},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"            // Verify that sender key is current master key"},
{"lineNum":"  131","line":"            let sender_key = sender.encode();","class":"lineCov","hits":"1","order":"5486","possible_hits":"1",},
{"lineNum":"  132","line":"            let record = <DidRecords<T>>::get(&did);","class":"lineCov","hits":"1","order":"5487","possible_hits":"1",},
{"lineNum":"  133","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");","class":"linePartCov","hits":"2","order":"5522","possible_hits":"4",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"            for skey in &additional_keys {","class":"linePartCov","hits":"3","order":"5535","possible_hits":"4",},
{"lineNum":"  136","line":"                if <SigningKeyDid>::exists(&skey.key) {","class":"linePartCov","hits":"1","order":"5536","possible_hits":"2",},
{"lineNum":"  137","line":"                    ensure!(<SigningKeyDid>::get(&skey.key) == did, \"One signing key can only belong to one DID\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  138","line":"                }"},
{"lineNum":"  139","line":"            }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"            for skey in &additional_keys {","class":"linePartCov","hits":"3","order":"5537","possible_hits":"4",},
{"lineNum":"  142","line":"                <SigningKeyDid>::insert(&skey.key, did.clone());","class":"lineCov","hits":"1","order":"5538","possible_hits":"1",},
{"lineNum":"  143","line":"            }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"            <DidRecords<T>>::mutate(&did,","class":"lineCov","hits":"1","order":"5540","possible_hits":"1",},
{"lineNum":"  146","line":"            |record| {","class":"linePartCov","hits":"2","order":"5539","possible_hits":"3",},
{"lineNum":"  147","line":"                // Concatenate new keys while making sure the key set is"},
{"lineNum":"  148","line":"                // unique"},
{"lineNum":"  149","line":"                let mut new_roled_keys = additional_keys.iter()","class":"lineCov","hits":"2","order":"5541","possible_hits":"2",},
{"lineNum":"  150","line":"                    .filter( |&add_key| {","class":"lineCov","hits":"3","order":"5542","possible_hits":"3",},
{"lineNum":"  151","line":"                        record.signing_keys.iter()","class":"lineCov","hits":"2","order":"5560","possible_hits":"2",},
{"lineNum":"  152","line":"                        .find( |&rk| rk == add_key)","class":"linePartCov","hits":"1","order":"5561","possible_hits":"3",},
{"lineNum":"  153","line":"                        .is_none()"},
{"lineNum":"  154","line":"                    })","class":"linePartCov","hits":"1","order":"5568","possible_hits":"2",},
{"lineNum":"  155","line":"                    .cloned()"},
{"lineNum":"  156","line":"                    .collect::<Vec<_>>();"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"                (*record).signing_keys.append( &mut new_roled_keys);","class":"lineCov","hits":"1","order":"5596","possible_hits":"1",},
{"lineNum":"  159","line":"            });","class":"lineCov","hits":"1","order":"5608","possible_hits":"1",},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"            Self::deposit_event(RawEvent::SigningKeysAdded(did, additional_keys));","class":"lineCov","hits":"1","order":"5610","possible_hits":"1",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"            Ok(())","class":"lineCov","hits":"1","order":"5611","possible_hits":"1",},
{"lineNum":"  164","line":"        }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        /// Removes specified signing keys of a DID if present. Only called by master key owner."},
{"lineNum":"  167","line":"        fn remove_signing_keys(origin, did: Vec<u8>, keys_to_remove: Vec<Key>) -> Result {"},
{"lineNum":"  168","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"6105","possible_hits":"5",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"            // Verify that sender key is current master key"},
{"lineNum":"  171","line":"            let sender_key = sender.encode();","class":"lineCov","hits":"1","order":"6106","possible_hits":"1",},
{"lineNum":"  172","line":"            let record = <DidRecords<T>>::get(&did);","class":"lineCov","hits":"1","order":"6107","possible_hits":"1",},
{"lineNum":"  173","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");","class":"linePartCov","hits":"2","order":"6108","possible_hits":"4",},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");","class":"linePartCov","hits":"2","order":"6109","possible_hits":"3",},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            for key in &keys_to_remove {","class":"linePartCov","hits":"3","order":"6110","possible_hits":"4",},
{"lineNum":"  178","line":"                if <SigningKeyDid>::exists(key) {","class":"lineCov","hits":"2","order":"6111","possible_hits":"2",},
{"lineNum":"  179","line":"                    ensure!(<SigningKeyDid>::get(key) == did, \"Signing key does not belong to this DID\");","class":"linePartCov","hits":"1","order":"6112","possible_hits":"2",},
{"lineNum":"  180","line":"                }"},
{"lineNum":"  181","line":"            }"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            for key in &keys_to_remove {","class":"linePartCov","hits":"3","order":"6113","possible_hits":"4",},
{"lineNum":"  184","line":"                <SigningKeyDid>::remove(key);","class":"lineCov","hits":"1","order":"6114","possible_hits":"1",},
{"lineNum":"  185","line":"            }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"            <DidRecords<T>>::mutate(&did,","class":"lineCov","hits":"1","order":"6116","possible_hits":"1",},
{"lineNum":"  188","line":"            |record| {","class":"linePartCov","hits":"2","order":"6115","possible_hits":"3",},
{"lineNum":"  189","line":"                // Filter out keys meant for deletion"},
{"lineNum":"  190","line":"                let keys = record.signing_keys","class":"lineCov","hits":"2","order":"6117","possible_hits":"2",},
{"lineNum":"  191","line":"                    .iter()"},
{"lineNum":"  192","line":"                    .filter(|&roled_key| keys_to_remove.iter()","class":"lineCov","hits":"4","order":"6118","possible_hits":"4",},
{"lineNum":"  193","line":"                        .find(|&rk| roled_key == rk)","class":"lineCov","hits":"3","order":"6119","possible_hits":"3",},
{"lineNum":"  194","line":"                        .is_none())","class":"linePartCov","hits":"1","order":"6120","possible_hits":"2",},
{"lineNum":"  195","line":"                    .cloned()"},
{"lineNum":"  196","line":"                    .collect::<Vec<_>>();"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"                (*record).signing_keys = keys;","class":"lineCov","hits":"2","order":"6122","possible_hits":"2",},
{"lineNum":"  199","line":"            });","class":"lineCov","hits":"1","order":"6123","possible_hits":"1",},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            Self::deposit_event(RawEvent::SigningKeysRemoved(did, keys_to_remove));","class":"lineCov","hits":"1","order":"6124","possible_hits":"1",},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"            Ok(())","class":"lineCov","hits":"1","order":"6125","possible_hits":"1",},
{"lineNum":"  204","line":"        }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"        /// Sets a new master key for a DID. Only called by master key owner."},
{"lineNum":"  207","line":"        fn set_master_key(origin, did: Vec<u8>, new_key: Key) -> Result {"},
{"lineNum":"  208","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"            // Verify that sender key is current master key"},
{"lineNum":"  211","line":"            let sender_key = sender.encode();"},
{"lineNum":"  212","line":"            let record = <DidRecords<T>>::get(&did);"},
{"lineNum":"  213","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"            <DidRecords<T>>::mutate(&did,"},
{"lineNum":"  218","line":"            |record| {"},
{"lineNum":"  219","line":"                (*record).master_key = new_key.clone();"},
{"lineNum":"  220","line":"            });"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"            Self::deposit_event(RawEvent::NewMasterKey(did, sender, new_key));"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"            Ok(())"},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        /// Adds funds to a DID."},
{"lineNum":"  228","line":"        pub fn fund_poly(origin, did: Vec<u8>, amount: <T as balances::Trait>::Balance) -> Result {"},
{"lineNum":"  229","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"7245","possible_hits":"6",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");","class":"linePartCov","hits":"2","order":"7246","possible_hits":"4",},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"            let record = <DidRecords<T>>::get(&did);","class":"lineCov","hits":"1","order":"7247","possible_hits":"1",},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"            // We must know that new balance is valid without creating side effects"},
{"lineNum":"  236","line":"            let new_record_balance = record.balance.checked_add(&amount).ok_or(\"overflow occured when increasing DID balance\")?;","class":"linePartCov","hits":"2","order":"7248","possible_hits":"3",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"            let _imbalance = <balances::Module<T> as Currency<_>>::withdraw(","class":"linePartCov","hits":"2","order":"7252","possible_hits":"3",},
{"lineNum":"  239","line":"                &sender,"},
{"lineNum":"  240","line":"                amount,","class":"lineCov","hits":"1","order":"7249","possible_hits":"1",},
{"lineNum":"  241","line":"                WithdrawReason::Fee,","class":"lineCov","hits":"1","order":"7250","possible_hits":"1",},
{"lineNum":"  242","line":"                ExistenceRequirement::KeepAlive","class":"lineCov","hits":"1","order":"7251","possible_hits":"1",},
{"lineNum":"  243","line":"                )?;","class":"linePartCov","hits":"2","order":"7253","possible_hits":"4",},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"            <DidRecords<T>>::mutate(&did, |record| {","class":"lineCov","hits":"2","order":"7254","possible_hits":"2",},
{"lineNum":"  246","line":"                (*record).balance = new_record_balance;","class":"lineCov","hits":"1","order":"7255","possible_hits":"1",},
{"lineNum":"  247","line":"            });","class":"linePartCov","hits":"1","order":"7256","possible_hits":"2",},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"            Self::deposit_event(RawEvent::PolyDepositedInDid(did, sender, amount));","class":"lineCov","hits":"1","order":"7257","possible_hits":"1",},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"            Ok(())","class":"lineCov","hits":"1","order":"7258","possible_hits":"1",},
{"lineNum":"  252","line":"        }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"        /// Withdraws funds from a DID. Only called by master key owner."},
{"lineNum":"  255","line":"        fn withdrawy_poly(origin, did: Vec<u8>, amount: <T as balances::Trait>::Balance) -> Result {"},
{"lineNum":"  256","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"            // Verify that sender key is current master key"},
{"lineNum":"  259","line":"            let sender_key = sender.encode();"},
{"lineNum":"  260","line":"            let record = <DidRecords<T>>::get(&did);"},
{"lineNum":"  261","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");"},
{"lineNum":"  262","line":""},
{"lineNum":"  263","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            let record = <DidRecords<T>>::get(&did);"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"            // We must know that new balance is valid without creating side effects"},
{"lineNum":"  268","line":"            let new_record_balance = record.balance.checked_sub(&amount).ok_or(\"underflow occured when decreasing DID balance\")?;"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"            let _imbalance = <balances::Module<T> as Currency<_>>::deposit_into_existing(&sender, amount)?;"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"            <DidRecords<T>>::mutate(&did, |record| {"},
{"lineNum":"  273","line":"                (*record).balance = new_record_balance;"},
{"lineNum":"  274","line":"            });"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"            Self::deposit_event(RawEvent::PolyWithdrawnFromDid(did, sender, amount));"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"            Ok(())"},
{"lineNum":"  279","line":"        }"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"        /// Transfers funds between DIDs."},
{"lineNum":"  282","line":"        fn transfer_poly(origin, did: Vec<u8>, to_did: Vec<u8>, amount: <T as balances::Trait>::Balance) -> Result {"},
{"lineNum":"  283","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  286","line":"            ensure!(Self::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"            let from_record = <DidRecords<T>>::get(did.clone());"},
{"lineNum":"  289","line":"            let to_record = <DidRecords<T>>::get(to_did.clone());"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"            // Same for `from`"},
{"lineNum":"  292","line":"            let new_from_balance = from_record.balance.checked_sub(&amount).ok_or(\"Sender must have sufficient funds\")?;"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"            // Compute new `to_did` balance and check that beneficiary\'s balance can be increased"},
{"lineNum":"  295","line":"            let new_to_balance = to_record.balance.checked_add(&amount).ok_or(\"Failed to increase to_did balance\")?;"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"            // Alter from record"},
{"lineNum":"  298","line":"            <DidRecords<T>>::mutate(did, |record| {"},
{"lineNum":"  299","line":"                record.balance = new_from_balance;"},
{"lineNum":"  300","line":"            });"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"            // Alter to record"},
{"lineNum":"  303","line":"            <DidRecords<T>>::mutate(to_did, |record| {"},
{"lineNum":"  304","line":"                record.balance = new_to_balance;"},
{"lineNum":"  305","line":"            });"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"            Ok(())"},
{"lineNum":"  308","line":"        }"},
{"lineNum":"  309","line":""},
{"lineNum":"  310","line":"        /// Appends a claim issuer DID to a DID. Only called by master key owner."},
{"lineNum":"  311","line":"        fn add_claim_issuer(origin, did: Vec<u8>, did_issuer: Vec<u8>) -> Result {"},
{"lineNum":"  312","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"5618","possible_hits":"5",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"            // Verify that sender key is current master key"},
{"lineNum":"  315","line":"            let sender_key = sender.encode();","class":"lineCov","hits":"1","order":"5619","possible_hits":"1",},
{"lineNum":"  316","line":"            let record = <DidRecords<T>>::get(&did);","class":"lineCov","hits":"1","order":"5620","possible_hits":"1",},
{"lineNum":"  317","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");","class":"linePartCov","hits":"2","order":"5621","possible_hits":"4",},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"            <ClaimIssuers>::mutate(did.clone(), |old_claim_issuers| {","class":"lineCov","hits":"3","order":"5622","possible_hits":"3",},
{"lineNum":"  320","line":"                if !old_claim_issuers.contains(&did_issuer) {","class":"lineCov","hits":"2","order":"5623","possible_hits":"2",},
{"lineNum":"  321","line":"                    old_claim_issuers.push(did_issuer.clone());","class":"lineCov","hits":"1","order":"5636","possible_hits":"1",},
{"lineNum":"  322","line":"                }"},
{"lineNum":"  323","line":"            });","class":"linePartCov","hits":"1","order":"5641","possible_hits":"2",},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"            Self::deposit_event(RawEvent::NewClaimIssuer(did, did_issuer));","class":"lineCov","hits":"1","order":"5642","possible_hits":"1",},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"            Ok(())","class":"lineCov","hits":"1","order":"5643","possible_hits":"1",},
{"lineNum":"  328","line":"        }"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"        /// Removes a claim issuer DID. Only called by master key owner."},
{"lineNum":"  331","line":"        fn remove_claim_issuer(origin, did: Vec<u8>, did_issuer: Vec<u8>) -> Result {"},
{"lineNum":"  332","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  333","line":""},
{"lineNum":"  334","line":"            // Verify that sender key is current master key"},
{"lineNum":"  335","line":"            let sender_key = sender.encode();"},
{"lineNum":"  336","line":"            let record = <DidRecords<T>>::get(&did);"},
{"lineNum":"  337","line":"            ensure!(record.master_key == sender_key, \"Sender must hold the master key\");"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");"},
{"lineNum":"  340","line":"            ensure!(<DidRecords<T>>::exists(&did_issuer), \"claim issuer DID must already exist\");"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"            <ClaimIssuers>::mutate(&did, |old_claim_issuers| {"},
{"lineNum":"  343","line":"                *old_claim_issuers = old_claim_issuers"},
{"lineNum":"  344","line":"                    .iter()"},
{"lineNum":"  345","line":"                    .filter(|&issuer| *issuer != did_issuer)"},
{"lineNum":"  346","line":"                    .cloned()"},
{"lineNum":"  347","line":"                    .collect();"},
{"lineNum":"  348","line":"            });"},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"            Self::deposit_event(RawEvent::RemovedClaimIssuer(did, did_issuer));"},
{"lineNum":"  351","line":""},
{"lineNum":"  352","line":"            Ok(())"},
{"lineNum":"  353","line":"        }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        /// Adds new claim records. Only called by did_issuer\'s signing key"},
{"lineNum":"  356","line":"        fn add_claim(origin, did: Vec<u8>, did_issuer: Vec<u8>, claims: Vec<Claim<T::Moment>>) -> Result {"},
{"lineNum":"  357","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"5657","possible_hits":"5",},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");","class":"linePartCov","hits":"3","order":"5658","possible_hits":"4",},
{"lineNum":"  360","line":"            ensure!(<DidRecords<T>>::exists(&did_issuer), \"claim issuer DID must already exist\");","class":"linePartCov","hits":"2","order":"5659","possible_hits":"3",},
{"lineNum":"  361","line":""},
{"lineNum":"  362","line":"            let sender_key = Key::try_from( sender.encode())?;","class":"lineCov","hits":"2","order":"5660","possible_hits":"2",},
{"lineNum":"  363","line":"            ensure!(Self::is_claim_issuer(&did, &did_issuer) || Self::is_master_key(&did, &sender_key), \"did_issuer must be a claim issuer or master key for DID\");","class":"lineCov","hits":"2","order":"5661","possible_hits":"2",},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"            // Verify that sender key is one of did_issuer\'s signing keys"},
{"lineNum":"  366","line":"            ensure!(Self::is_signing_key(&did_issuer, &sender_key), \"Sender must hold a claim issuer\'s signing key\");","class":"lineCov","hits":"3","order":"5695","possible_hits":"3",},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"            <Claims<T>>::mutate(&did, |claim_records| {","class":"linePartCov","hits":"2","order":"5711","possible_hits":"3",},
{"lineNum":"  369","line":"                let mut new_records = claims","class":"lineCov","hits":"3","order":"5712","possible_hits":"3",},
{"lineNum":"  370","line":"                    .iter()"},
{"lineNum":"  371","line":"                    .cloned()"},
{"lineNum":"  372","line":"                    .map(|claim| ClaimRecord {","class":"linePartCov","hits":"3","order":"5713","possible_hits":"4",},
{"lineNum":"  373","line":"                        claim,","class":"lineCov","hits":"1","order":"5714","possible_hits":"1",},
{"lineNum":"  374","line":"                        revoked: false,"},
{"lineNum":"  375","line":"                        issued_by: did_issuer.clone(),","class":"lineCov","hits":"1","order":"5715","possible_hits":"1",},
{"lineNum":"  376","line":"                        attestation: Vec::new(),","class":"lineCov","hits":"1","order":"5716","possible_hits":"1",},
{"lineNum":"  377","line":"                    })","class":"linePartCov","hits":"1","order":"5717","possible_hits":"2",},
{"lineNum":"  378","line":"                    .collect();"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"                claim_records.append(&mut new_records);","class":"lineCov","hits":"1","order":"5723","possible_hits":"1",},
{"lineNum":"  381","line":"            });","class":"lineCov","hits":"1","order":"5724","possible_hits":"1",},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"            Self::deposit_event(RawEvent::NewClaims(did, did_issuer, claims));","class":"lineCov","hits":"1","order":"5729","possible_hits":"1",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"            Ok(())","class":"lineCov","hits":"1","order":"5730","possible_hits":"1",},
{"lineNum":"  386","line":"        }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"        /// Adds new claim records with an attestation. Only called by issuer signing keys"},
{"lineNum":"  389","line":"        fn add_claim_with_attestation(origin, did: Vec<u8>, did_issuer: Vec<u8>, claims: Vec<Claim<T::Moment>>, attestation: Vec<u8>) -> Result {"},
{"lineNum":"  390","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  391","line":""},
{"lineNum":"  392","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");"},
{"lineNum":"  393","line":"            ensure!(<DidRecords<T>>::exists(&did_issuer), \"claim issuer DID must already exist\");"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"            let sender_key = Key::try_from( sender.encode())?;"},
{"lineNum":"  396","line":"            ensure!(Self::is_claim_issuer(&did, &did_issuer) || Self::is_master_key(&did, &sender_key), \"did_issuer must be a claim issuer or master key for DID\");"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"            // Verify that sender key is one of did_issuer\'s signing keys"},
{"lineNum":"  399","line":"            ensure!(Self::is_signing_key(&did_issuer, &sender_key), \"Sender must hold a claim issuer\'s signing key\");"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"            <Claims<T>>::mutate(&did, |claim_records| {"},
{"lineNum":"  402","line":"                let mut new_records = claims"},
{"lineNum":"  403","line":"                    .iter()"},
{"lineNum":"  404","line":"                    .cloned()"},
{"lineNum":"  405","line":"                    .map(|claim| ClaimRecord {"},
{"lineNum":"  406","line":"                        claim,"},
{"lineNum":"  407","line":"                        revoked: false,"},
{"lineNum":"  408","line":"                        issued_by: did_issuer.clone(),"},
{"lineNum":"  409","line":"                        attestation: attestation.clone(),"},
{"lineNum":"  410","line":"                    })"},
{"lineNum":"  411","line":"                    .collect();"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"                claim_records.append(&mut new_records);"},
{"lineNum":"  414","line":"            });"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"            Self::deposit_event(RawEvent::NewClaimsWithAttestation(did, did_issuer, claims, attestation));"},
{"lineNum":"  417","line":""},
{"lineNum":"  418","line":"            Ok(())"},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":""},
{"lineNum":"  421","line":"        /// Marks the specified claim as revoked"},
{"lineNum":"  422","line":"        fn revoke_claim(origin, did: Vec<u8>, did_issuer: Vec<u8>, claim: Claim<T::Moment>) -> Result {"},
{"lineNum":"  423","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"5737","possible_hits":"5",},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID must already exist\");","class":"linePartCov","hits":"3","order":"5738","possible_hits":"4",},
{"lineNum":"  426","line":"            ensure!(<DidRecords<T>>::exists(&did_issuer), \"claim issuer DID must already exist\");","class":"linePartCov","hits":"2","order":"5739","possible_hits":"3",},
{"lineNum":"  427","line":"            ensure!(Self::is_claim_issuer(&did, &did_issuer), \"did_issuer must be a claim issuer for DID\");","class":"lineCov","hits":"3","order":"5740","possible_hits":"3",},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"            // Verify that sender key is one of did_issuer\'s signing keys"},
{"lineNum":"  430","line":"            let sender_key = Key::try_from( sender.encode())?;","class":"lineCov","hits":"2","order":"5759","possible_hits":"2",},
{"lineNum":"  431","line":"            ensure!(Self::is_signing_key(&did_issuer, &sender_key), \"Sender must hold a claim issuer\'s signing key\");","class":"linePartCov","hits":"1","order":"5760","possible_hits":"2",},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"            <Claims<T>>::mutate(&did, |claim_records| {","class":"lineCov","hits":"2","order":"5761","possible_hits":"2",},
{"lineNum":"  434","line":"                claim_records","class":"lineCov","hits":"2","order":"5768","possible_hits":"2",},
{"lineNum":"  435","line":"                    .iter_mut()"},
{"lineNum":"  436","line":"                    .for_each(|record| if record.issued_by == did_issuer && record.claim == claim {","class":"lineCov","hits":"3","order":"5769","possible_hits":"3",},
{"lineNum":"  437","line":"                        (*record).revoked = true;","class":"lineCov","hits":"1","order":"5771","possible_hits":"1",},
{"lineNum":"  438","line":"                })","class":"linePartCov","hits":"1","order":"5772","possible_hits":"2",},
{"lineNum":"  439","line":"            });","class":"linePartCov","hits":"1","order":"5773","possible_hits":"2",},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"            Self::deposit_event(RawEvent::RevokedClaim(did, did_issuer, claim));","class":"lineCov","hits":"1","order":"5774","possible_hits":"1",},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"            Ok(())","class":"lineCov","hits":"1","order":"5775","possible_hits":"1",},
{"lineNum":"  444","line":"        }"},
{"lineNum":"  445","line":""},
{"lineNum":"  446","line":"        /// Marks all claims of an issuer as revoked"},
{"lineNum":"  447","line":"        fn revoke_all(origin, did: Vec<u8>, did_issuer: Vec<u8>) -> Result {"},
{"lineNum":"  448","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"            ensure!(<DidRecords<T>>::exists(did.clone()), \"DID must already exist\");"},
{"lineNum":"  451","line":"            ensure!(<DidRecords<T>>::exists(did_issuer.clone()), \"claim issuer DID must already exist\");"},
{"lineNum":"  452","line":"            ensure!(Self::is_claim_issuer(&did, &did_issuer), \"did_issuer must be a claim issuer or master key for DID\");"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"            // Verify that sender key is one of did_issuer\'s signing keys"},
{"lineNum":"  455","line":"            let sender_key = Key::try_from( sender.encode())?;"},
{"lineNum":"  456","line":"            ensure!(Self::is_signing_key(&did_issuer, &sender_key), \"Sender must hold a claim issuer\'s signing key\");"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"            <Claims<T>>::mutate(did.clone(), |claim_records| {"},
{"lineNum":"  459","line":""},
{"lineNum":"  460","line":"                claim_records"},
{"lineNum":"  461","line":"                    .iter_mut()"},
{"lineNum":"  462","line":"                    .for_each(|record| if record.issued_by == did_issuer {"},
{"lineNum":"  463","line":"                        (*record).revoked = true;"},
{"lineNum":"  464","line":"                })"},
{"lineNum":"  465","line":"            });"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"            Self::deposit_event(RawEvent::RevokedAllClaims(did, did_issuer));"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"            Ok(())"},
{"lineNum":"  470","line":"        }"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        /// It sets roles for an specific `target_key` key."},
{"lineNum":"  473","line":"        /// Only the master key of an identity is able to set signing key roles."},
{"lineNum":"  474","line":"        fn set_role_to_signing_key(origin, did: Vec<u8>, target_key: Key, roles: Vec<KeyRole>) -> Result {"},
{"lineNum":"  475","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"6198","possible_hits":"5",},
{"lineNum":"  476","line":"            let sender_key = Key::try_from( sender.encode())?;","class":"lineCov","hits":"3","order":"6199","possible_hits":"3",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"            ensure!(<DidRecords<T>>::exists(&did), \"DID does not exist\");","class":"linePartCov","hits":"1","order":"6200","possible_hits":"2",},
{"lineNum":"  479","line":"            let record = <DidRecords<T>>::get(&did);","class":"lineCov","hits":"1","order":"6201","possible_hits":"1",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"            ensure!( record.master_key == sender_key,","class":"lineCov","hits":"3","order":"6202","possible_hits":"3",},
{"lineNum":"  482","line":"                \"Only master key of an identity is able to update signing key roles\");"},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"            // You are trying to add a role to did\'s master key. It is not needed."},
{"lineNum":"  485","line":"            if record.master_key == target_key {","class":"lineCov","hits":"2","order":"6203","possible_hits":"2",},
{"lineNum":"  486","line":"                return Ok(());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"            }"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"            // Target did has sender\'s master key in its signing keys."},
{"lineNum":"  490","line":"            ensure!(","class":"linePartCov","hits":"1","order":"6205","possible_hits":"2",},
{"lineNum":"  491","line":"                record.signing_keys.iter().find(|&rk| rk == &target_key).is_some(),","class":"lineCov","hits":"4","order":"6204","possible_hits":"4",},
{"lineNum":"  492","line":"                \"Sender is not part of did\'s signing keys\""},
{"lineNum":"  493","line":"            );"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"            // Get current roles of `key` at `investor_did`."},
{"lineNum":"  496","line":"            let mut new_roles = match record.signing_keys.iter().find(|&rk| rk == &target_key) {","class":"linePartCov","hits":"5","order":"6206","possible_hits":"6",},
{"lineNum":"  497","line":"                Some(ref rk) => rk.roles.iter().chain( roles.iter()).cloned().collect(),","class":"lineCov","hits":"2","order":"6207","possible_hits":"2",},
{"lineNum":"  498","line":"                None => roles.clone()","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  499","line":"            };"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"            // Sort result and remove duplicates."},
{"lineNum":"  502","line":"            new_roles.sort();","class":"lineCov","hits":"1","order":"6209","possible_hits":"1",},
{"lineNum":"  503","line":"            new_roles.dedup();","class":"lineCov","hits":"1","order":"6218","possible_hits":"1",},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"            Self::update_roles(&did, &target_key, new_roles)","class":"lineCov","hits":"1","order":"6239","possible_hits":"1",},
{"lineNum":"  506","line":"        }"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":"}"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"decl_event!("},
{"lineNum":"  511","line":"    pub enum Event<T>"},
{"lineNum":"  512","line":"    where"},
{"lineNum":"  513","line":"        AccountId = <T as system::Trait>::AccountId,"},
{"lineNum":"  514","line":"        Balance = <T as balances::Trait>::Balance,"},
{"lineNum":"  515","line":"        Moment = <T as timestamp::Trait>::Moment,"},
{"lineNum":"  516","line":"    {"},
{"lineNum":"  517","line":"        /// DID, master key account ID, signing keys"},
{"lineNum":"  518","line":"        NewDid(Vec<u8>, AccountId, Vec<SigningKey>),"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        /// DID, new keys"},
{"lineNum":"  521","line":"        SigningKeysAdded(Vec<u8>, Vec<SigningKey>),"},
{"lineNum":"  522","line":""},
{"lineNum":"  523","line":"        /// DID, the keys that got removed"},
{"lineNum":"  524","line":"        SigningKeysRemoved(Vec<u8>, Vec<Key>),"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"        /// DID, old master key account ID, new key"},
{"lineNum":"  527","line":"        NewMasterKey(Vec<u8>, AccountId, Key),"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"        /// beneficiary DID, sender, amount"},
{"lineNum":"  530","line":"        PolyDepositedInDid(Vec<u8>, AccountId, Balance),"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"        /// DID, beneficiary, amount"},
{"lineNum":"  533","line":"        PolyWithdrawnFromDid(Vec<u8>, AccountId, Balance),"},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"        /// DID, amount"},
{"lineNum":"  536","line":"        PolyChargedFromDid(Vec<u8>, Balance),"},
{"lineNum":"  537","line":""},
{"lineNum":"  538","line":"        /// DID from, DID to, amount"},
{"lineNum":"  539","line":"        PolyTransfer(Vec<u8>, Vec<u8>, Balance),"},
{"lineNum":"  540","line":""},
{"lineNum":"  541","line":"        /// DID, claim issuer DID"},
{"lineNum":"  542","line":"        NewClaimIssuer(Vec<u8>, Vec<u8>),"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"        /// DID, removed claim issuer DID"},
{"lineNum":"  545","line":"        RemovedClaimIssuer(Vec<u8>, Vec<u8>),"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"        /// DID, claim issuer DID, claims"},
{"lineNum":"  548","line":"        NewClaims(Vec<u8>, Vec<u8>, Vec<Claim<Moment>>),"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"        /// DID, claim issuer DID, claims, attestation"},
{"lineNum":"  551","line":"        NewClaimsWithAttestation(Vec<u8>, Vec<u8>, Vec<Claim<Moment>>, Vec<u8>),"},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"        /// DID, claim issuer DID, claim"},
{"lineNum":"  554","line":"        RevokedClaim(Vec<u8>, Vec<u8>, Claim<Moment>),"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"        /// DID, claim issuer DID"},
{"lineNum":"  557","line":"        RevokedAllClaims(Vec<u8>, Vec<u8>),"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"        /// DID"},
{"lineNum":"  560","line":"        NewIssuer(Vec<u8>),"},
{"lineNum":"  561","line":"    }"},
{"lineNum":"  562","line":");"},
{"lineNum":"  563","line":""},
{"lineNum":"  564","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"  565","line":"    /// Private and not sanitized function. It is designed to be used internally by"},
{"lineNum":"  566","line":"    /// others sanitezed functions."},
{"lineNum":"  567","line":"    fn update_roles(target_did: &Vec<u8>, key: &Key, roles: Vec<KeyRole>) -> Result {","class":"lineCov","hits":"1","order":"6240","possible_hits":"1",},
{"lineNum":"  568","line":"        <DidRecords<T>>::mutate(target_did, |record| {","class":"linePartCov","hits":"2","order":"6241","possible_hits":"3",},
{"lineNum":"  569","line":"            // First filter avoids duplication of key."},
{"lineNum":"  570","line":"            let mut signing_keys = record","class":"lineCov","hits":"2","order":"6243","possible_hits":"2",},
{"lineNum":"  571","line":"                .signing_keys"},
{"lineNum":"  572","line":"                .iter()"},
{"lineNum":"  573","line":"                .filter(|&rk| rk != key)","class":"lineCov","hits":"3","order":"6244","possible_hits":"3",},
{"lineNum":"  574","line":"                .cloned()"},
{"lineNum":"  575","line":"                .collect::<Vec<_>>();","class":"lineCov","hits":"1","order":"6259","possible_hits":"1",},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"            signing_keys.push(SigningKey::new(key.clone(), roles));","class":"lineCov","hits":"1","order":"6260","possible_hits":"1",},
{"lineNum":"  578","line":"            (*record).signing_keys = signing_keys;","class":"linePartCov","hits":"1","order":"6261","possible_hits":"2",},
{"lineNum":"  579","line":"        });","class":"linePartCov","hits":"1","order":"6262","possible_hits":"2",},
{"lineNum":"  580","line":"        Ok(())","class":"lineCov","hits":"1","order":"6264","possible_hits":"1",},
{"lineNum":"  581","line":"    }","class":"linePartCov","hits":"1","order":"6265","possible_hits":"2",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    pub fn is_claim_issuer(did: &Vec<u8>, issuer_did: &Vec<u8>) -> bool {","class":"linePartCov","hits":"1","order":"5662","possible_hits":"2",},
{"lineNum":"  584","line":"        <ClaimIssuers>::get(did).contains(issuer_did)","class":"lineCov","hits":"2","order":"5663","possible_hits":"2",},
{"lineNum":"  585","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"    pub fn is_signing_key(did: &Vec<u8>, key: &Key) -> bool {","class":"linePartCov","hits":"3","order":"5696","possible_hits":"6",},
{"lineNum":"  588","line":"        let record = <DidRecords<T>>::get(did);","class":"lineCov","hits":"3","order":"5697","possible_hits":"3",},
{"lineNum":"  589","line":"        record.signing_keys.iter().find(|&rk| rk == key).is_some() || record.master_key == *key","class":"linePartCov","hits":"11","order":"5700","possible_hits":"15",},
{"lineNum":"  590","line":"    }","class":"linePartCov","hits":"6","order":"5710","possible_hits":"9",},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    /// Use `did` as reference."},
{"lineNum":"  593","line":"    pub fn is_master_key(did: &Vec<u8>, key: &Key) -> bool {","class":"linePartCov","hits":"1","order":"6441","possible_hits":"2",},
{"lineNum":"  594","line":"        key == &<DidRecords<T>>::get(did).master_key","class":"lineCov","hits":"2","order":"6442","possible_hits":"2",},
{"lineNum":"  595","line":"    }","class":"lineCov","hits":"1","order":"6443","possible_hits":"1",},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"    /// Withdraws funds from a DID balance"},
{"lineNum":"  598","line":"    pub fn charge_poly(did: Vec<u8>, amount: T::Balance) -> bool {"},
{"lineNum":"  599","line":"        if !<DidRecords<T>>::exists(did.clone()) {"},
{"lineNum":"  600","line":"            return false;"},
{"lineNum":"  601","line":"        }"},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"        let record = <DidRecords<T>>::get(did.clone());"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        if record.balance < amount {"},
{"lineNum":"  606","line":"            return false;"},
{"lineNum":"  607","line":"        }"},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"        <DidRecords<T>>::mutate(did.clone(), |record| {"},
{"lineNum":"  610","line":"            (*record).balance = record.balance - amount;"},
{"lineNum":"  611","line":"        });"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"        Self::deposit_event(RawEvent::PolyChargedFromDid(did, amount));"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"        return true;"},
{"lineNum":"  616","line":"    }"},
{"lineNum":"  617","line":"}"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"/// Make sure the supplied slice is a valid Polymesh DID"},
{"lineNum":"  620","line":"pub fn validate_did(did: &[u8]) -> Result {","class":"lineCov","hits":"1","order":"5253","possible_hits":"1",},
{"lineNum":"  621","line":"    // TODO: Also check length after prefix,"},
{"lineNum":"  622","line":"    if did.starts_with(DID_PREFIX.as_bytes()) {","class":"linePartCov","hits":"2","order":"5254","possible_hits":"3",},
{"lineNum":"  623","line":"        Ok(())","class":"lineCov","hits":"1","order":"5255","possible_hits":"1",},
{"lineNum":"  624","line":"    } else {"},
{"lineNum":"  625","line":"        Err(\"DID has no valid prefix\")","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":"}","class":"linePartCov","hits":"1","order":"5256","possible_hits":"2",},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"pub trait IdentityTrait<T> {"},
{"lineNum":"  630","line":"    fn signing_key_charge_did(signing_key: &Key) -> bool;"},
{"lineNum":"  631","line":"    fn charge_poly(signing_key: &Key, amount: T) -> bool;"},
{"lineNum":"  632","line":"}"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"impl<T: Trait> IdentityTrait<T::Balance> for Module<T> {"},
{"lineNum":"  635","line":"    fn charge_poly(signing_key: &Key, amount: T::Balance) -> bool {"},
{"lineNum":"  636","line":"        Self::charge_poly(<SigningKeyDid>::get(signing_key), amount)"},
{"lineNum":"  637","line":"    }"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"    fn signing_key_charge_did(signing_key: &Key) -> bool {"},
{"lineNum":"  640","line":"        if <SigningKeyDid>::exists(signing_key) {"},
{"lineNum":"  641","line":"            if Self::is_signing_key(&<SigningKeyDid>::get(signing_key), signing_key) {"},
{"lineNum":"  642","line":"                if <ChargeDid>::exists(signing_key) {"},
{"lineNum":"  643","line":"                    return <ChargeDid>::get(signing_key);"},
{"lineNum":"  644","line":"                }"},
{"lineNum":"  645","line":"            }"},
{"lineNum":"  646","line":"        }"},
{"lineNum":"  647","line":"        return false;"},
{"lineNum":"  648","line":"    }"},
{"lineNum":"  649","line":"}"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"/// tests for this module"},
{"lineNum":"  652","line":"#[cfg(test)]"},
{"lineNum":"  653","line":"mod tests {"},
{"lineNum":"  654","line":"    use super::*;"},
{"lineNum":"  655","line":"    use primitives::SigningKeyType;"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"    use sr_io::{with_externalities, TestExternalities};"},
{"lineNum":"  658","line":"    use sr_primitives::{"},
{"lineNum":"  659","line":"        testing::Header,"},
{"lineNum":"  660","line":"        traits::{BlakeTwo256, ConvertInto, IdentityLookup},"},
{"lineNum":"  661","line":"        Perbill,"},
{"lineNum":"  662","line":"    };"},
{"lineNum":"  663","line":"    use srml_support::{assert_err, assert_ok, impl_outer_origin, parameter_types};"},
{"lineNum":"  664","line":"    use std::result::Result;"},
{"lineNum":"  665","line":"    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    impl_outer_origin! {","class":"lineCov","hits":"1","order":"5224","possible_hits":"1",},
{"lineNum":"  668","line":"        pub enum Origin for IdentityTest {}"},
{"lineNum":"  669","line":"    }"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  672","line":"    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  673","line":"    // configuration traits of modules we want to use."},
{"lineNum":"  674","line":"    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  675","line":"    pub struct IdentityTest;"},
{"lineNum":"  676","line":""},
{"lineNum":"  677","line":"    parameter_types! {"},
{"lineNum":"  678","line":"        pub const BlockHashCount: u32 = 250;"},
{"lineNum":"  679","line":"        pub const MaximumBlockWeight: u32 = 4096;"},
{"lineNum":"  680","line":"        pub const MaximumBlockLength: u32 = 4096;"},
{"lineNum":"  681","line":"        pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);"},
{"lineNum":"  682","line":"    }"},
{"lineNum":"  683","line":""},
{"lineNum":"  684","line":"    impl system::Trait for IdentityTest {"},
{"lineNum":"  685","line":"        type Origin = Origin;"},
{"lineNum":"  686","line":"        type Index = u64;"},
{"lineNum":"  687","line":"        type BlockNumber = u64;"},
{"lineNum":"  688","line":"        type Hash = H256;"},
{"lineNum":"  689","line":"        type Hashing = BlakeTwo256;"},
{"lineNum":"  690","line":"        type AccountId = u64;"},
{"lineNum":"  691","line":"        type Lookup = IdentityLookup<Self::AccountId>;"},
{"lineNum":"  692","line":"        type Header = Header;"},
{"lineNum":"  693","line":"        type Event = ();"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"        type Call = ();"},
{"lineNum":"  696","line":"        type WeightMultiplierUpdate = ();"},
{"lineNum":"  697","line":"        type BlockHashCount = BlockHashCount;"},
{"lineNum":"  698","line":"        type MaximumBlockWeight = MaximumBlockWeight;"},
{"lineNum":"  699","line":"        type MaximumBlockLength = MaximumBlockLength;"},
{"lineNum":"  700","line":"        type AvailableBlockRatio = AvailableBlockRatio;"},
{"lineNum":"  701","line":"        type Version = ();"},
{"lineNum":"  702","line":"    }"},
{"lineNum":"  703","line":""},
{"lineNum":"  704","line":"    parameter_types! {"},
{"lineNum":"  705","line":"        pub const ExistentialDeposit: u64 = 0;"},
{"lineNum":"  706","line":"        pub const TransferFee: u64 = 0;"},
{"lineNum":"  707","line":"        pub const CreationFee: u64 = 0;"},
{"lineNum":"  708","line":"        pub const TransactionBaseFee: u64 = 0;"},
{"lineNum":"  709","line":"        pub const TransactionByteFee: u64 = 0;"},
{"lineNum":"  710","line":"    }"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"    impl balances::Trait for IdentityTest {"},
{"lineNum":"  713","line":"        type Balance = u128;"},
{"lineNum":"  714","line":"        type OnFreeBalanceZero = ();"},
{"lineNum":"  715","line":"        type OnNewAccount = ();"},
{"lineNum":"  716","line":"        type Event = ();"},
{"lineNum":"  717","line":"        type TransactionPayment = ();"},
{"lineNum":"  718","line":"        type DustRemoval = ();"},
{"lineNum":"  719","line":"        type TransferPayment = ();"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"        type ExistentialDeposit = ExistentialDeposit;"},
{"lineNum":"  722","line":"        type TransferFee = TransferFee;"},
{"lineNum":"  723","line":"        type CreationFee = CreationFee;"},
{"lineNum":"  724","line":"        type TransactionBaseFee = TransactionBaseFee;"},
{"lineNum":"  725","line":"        type TransactionByteFee = TransactionByteFee;"},
{"lineNum":"  726","line":"        type WeightToFee = ConvertInto;"},
{"lineNum":"  727","line":"        type Identity = super::Module<IdentityTest>;"},
{"lineNum":"  728","line":"    }"},
{"lineNum":"  729","line":""},
{"lineNum":"  730","line":"    parameter_types! {"},
{"lineNum":"  731","line":"        pub const MinimumPeriod: u64 = 3;"},
{"lineNum":"  732","line":"    }"},
{"lineNum":"  733","line":""},
{"lineNum":"  734","line":"    impl timestamp::Trait for IdentityTest {"},
{"lineNum":"  735","line":"        type Moment = u64;"},
{"lineNum":"  736","line":"        type OnTimestampSet = ();"},
{"lineNum":"  737","line":"        type MinimumPeriod = MinimumPeriod;"},
{"lineNum":"  738","line":"    }"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"    impl super::Trait for IdentityTest {"},
{"lineNum":"  741","line":"        type Event = ();"},
{"lineNum":"  742","line":"    }"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"    type Identity = super::Module<IdentityTest>;"},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"    /// Create externalities"},
{"lineNum":"  747","line":"    fn build_ext() -> TestExternalities<Blake2Hasher> {","class":"lineCov","hits":"1","order":"3903","possible_hits":"1",},
{"lineNum":"  748","line":"        system::GenesisConfig::default()","class":"lineCov","hits":"1","order":"3904","possible_hits":"1",},
{"lineNum":"  749","line":"            .build_storage::<IdentityTest>()"},
{"lineNum":"  750","line":"            .unwrap()"},
{"lineNum":"  751","line":"            .into()"},
{"lineNum":"  752","line":"    }","class":"linePartCov","hits":"1","order":"5188","possible_hits":"2",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    /// It creates an Account and registers its DID."},
{"lineNum":"  755","line":"    fn make_account(","class":"linePartCov","hits":"1","order":"5220","possible_hits":"2",},
{"lineNum":"  756","line":"        id: u64,"},
{"lineNum":"  757","line":"    ) -> Result<(<IdentityTest as system::Trait>::Origin, Vec<u8>), &\'static str> {"},
{"lineNum":"  758","line":"        let signed_id = Origin::signed(id);","class":"lineCov","hits":"1","order":"5221","possible_hits":"1",},
{"lineNum":"  759","line":"        let did = format!(\"did:poly:{}\", id).as_bytes().to_vec();","class":"lineCov","hits":"2","order":"5225","possible_hits":"2",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"        Identity::register_did(signed_id.clone(), did.clone(), vec![])?;","class":"linePartCov","hits":"1","order":"5238","possible_hits":"4",},
{"lineNum":"  762","line":"        Ok((signed_id, did))","class":"lineCov","hits":"1","order":"5445","possible_hits":"1",},
{"lineNum":"  763","line":"    }","class":"linePartCov","hits":"2","order":"5446","possible_hits":"5",},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"    #[test]"},
{"lineNum":"  766","line":"    fn dids_are_unique() {","class":"linePartCov","hits":"3","order":"6461","possible_hits":"4",},
{"lineNum":"  767","line":"        with_externalities(&mut build_ext(), || {","class":"linePartCov","hits":"3","order":"6462","possible_hits":"4",},
{"lineNum":"  768","line":"            let did_1 = \"did:poly:1\".as_bytes().to_vec();","class":"lineCov","hits":"3","order":"6463","possible_hits":"3",},
{"lineNum":"  769","line":""},
{"lineNum":"  770","line":"            assert_ok!(Identity::register_did(","class":"linePartCov","hits":"2","order":"6467","possible_hits":"3",},
{"lineNum":"  771","line":"                Origin::signed(1),","class":"lineCov","hits":"1","order":"6464","possible_hits":"1",},
{"lineNum":"  772","line":"                did_1.clone(),","class":"lineCov","hits":"1","order":"6465","possible_hits":"1",},
{"lineNum":"  773","line":"                vec![]","class":"lineCov","hits":"1","order":"6466","possible_hits":"1",},
{"lineNum":"  774","line":"            ));","class":"linePartCov","hits":"1","order":"6468","possible_hits":"3",},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"            assert_ok!(Identity::register_did(","class":"linePartCov","hits":"2","order":"6472","possible_hits":"3",},
{"lineNum":"  777","line":"                Origin::signed(2),","class":"lineCov","hits":"2","order":"6469","possible_hits":"2",},
{"lineNum":"  778","line":"                \"did:poly:2\".as_bytes().to_vec(),","class":"lineCov","hits":"2","order":"6470","possible_hits":"2",},
{"lineNum":"  779","line":"                vec![]","class":"lineCov","hits":"1","order":"6471","possible_hits":"1",},
{"lineNum":"  780","line":"            ));","class":"linePartCov","hits":"1","order":"6473","possible_hits":"3",},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"            assert_err!(","class":"linePartCov","hits":"1","order":"6475","possible_hits":"2",},
{"lineNum":"  783","line":"                Identity::register_did(Origin::signed(3), did_1, vec![]),","class":"linePartCov","hits":"2","order":"6474","possible_hits":"3",},
{"lineNum":"  784","line":"                \"DID must be unique\""},
{"lineNum":"  785","line":"            );"},
{"lineNum":"  786","line":"        });","class":"linePartCov","hits":"2","order":"6476","possible_hits":"3",},
{"lineNum":"  787","line":"    }","class":"linePartCov","hits":"2","order":"6477","possible_hits":"3",},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"    #[test]"},
{"lineNum":"  790","line":"    fn only_claim_issuers_can_add_claims() {","class":"linePartCov","hits":"3","order":"6420","possible_hits":"4",},
{"lineNum":"  791","line":"        with_externalities(&mut build_ext(), || {","class":"linePartCov","hits":"3","order":"6422","possible_hits":"4",},
{"lineNum":"  792","line":"            let owner_id = Identity::owner();","class":"lineCov","hits":"1","order":"6424","possible_hits":"1",},
{"lineNum":"  793","line":"            let owner_key = Key::try_from(owner_id.encode()).unwrap();","class":"lineCov","hits":"1","order":"6425","possible_hits":"1",},
{"lineNum":"  794","line":"            let (owner, owner_did) = make_account(owner_id).unwrap();","class":"lineCov","hits":"1","order":"6426","possible_hits":"1",},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"            let (issuer, issuer_did) = make_account(2).unwrap();","class":"lineCov","hits":"2","order":"6427","possible_hits":"2",},
{"lineNum":"  797","line":"            let (claim_issuer, claim_issuer_did) = make_account(3).unwrap();","class":"lineCov","hits":"2","order":"6428","possible_hits":"2",},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"            assert_ok!(Identity::add_signing_keys(","class":"linePartCov","hits":"2","order":"6432","possible_hits":"3",},
{"lineNum":"  800","line":"                claim_issuer.clone(),","class":"lineCov","hits":"2","order":"6429","possible_hits":"2",},
{"lineNum":"  801","line":"                claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"6430","possible_hits":"1",},
{"lineNum":"  802","line":"                vec![SigningKey::from(owner_key.clone())]","class":"linePartCov","hits":"2","order":"6431","possible_hits":"3",},
{"lineNum":"  803","line":"            ));","class":"linePartCov","hits":"1","order":"6433","possible_hits":"3",},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"            // Add Claims by master & claim_issuer"},
{"lineNum":"  806","line":"            let claims = vec![Claim {","class":"linePartCov","hits":"1","order":"6434","possible_hits":"2",},
{"lineNum":"  807","line":"                topic: 1,"},
{"lineNum":"  808","line":"                schema: 1,"},
{"lineNum":"  809","line":"                bytes: vec![],","class":"lineCov","hits":"1","order":"6435","possible_hits":"1",},
{"lineNum":"  810","line":"                expiry: 10,"},
{"lineNum":"  811","line":"            }];"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"            assert_ok!(Identity::add_claim(","class":"linePartCov","hits":"2","order":"6440","possible_hits":"3",},
{"lineNum":"  814","line":"                owner.clone(),","class":"lineCov","hits":"1","order":"6436","possible_hits":"1",},
{"lineNum":"  815","line":"                owner_did.clone(),","class":"lineCov","hits":"2","order":"6437","possible_hits":"2",},
{"lineNum":"  816","line":"                claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"6438","possible_hits":"1",},
{"lineNum":"  817","line":"                claims.clone()","class":"lineCov","hits":"1","order":"6439","possible_hits":"1",},
{"lineNum":"  818","line":"            ));","class":"linePartCov","hits":"1","order":"6444","possible_hits":"2",},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"            assert_err!(","class":"linePartCov","hits":"1","order":"6451","possible_hits":"2",},
{"lineNum":"  821","line":"                Identity::add_claim(","class":"lineCov","hits":"1","order":"6449","possible_hits":"1",},
{"lineNum":"  822","line":"                    claim_issuer.clone(),","class":"lineCov","hits":"2","order":"6445","possible_hits":"2",},
{"lineNum":"  823","line":"                    owner_did.clone(),","class":"lineCov","hits":"1","order":"6446","possible_hits":"1",},
{"lineNum":"  824","line":"                    issuer_did.clone(),","class":"lineCov","hits":"1","order":"6447","possible_hits":"1",},
{"lineNum":"  825","line":"                    claims.clone()","class":"lineCov","hits":"1","order":"6448","possible_hits":"1",},
{"lineNum":"  826","line":"                ),","class":"linePartCov","hits":"1","order":"6450","possible_hits":"2",},
{"lineNum":"  827","line":"                \"did_issuer must be a claim issuer or master key for DID\""},
{"lineNum":"  828","line":"            );"},
{"lineNum":"  829","line":"            assert_err!(","class":"linePartCov","hits":"1","order":"6458","possible_hits":"2",},
{"lineNum":"  830","line":"                Identity::add_claim(","class":"lineCov","hits":"1","order":"6456","possible_hits":"1",},
{"lineNum":"  831","line":"                    issuer.clone(),","class":"lineCov","hits":"2","order":"6452","possible_hits":"2",},
{"lineNum":"  832","line":"                    issuer_did.clone(),","class":"lineCov","hits":"1","order":"6453","possible_hits":"1",},
{"lineNum":"  833","line":"                    claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"6454","possible_hits":"1",},
{"lineNum":"  834","line":"                    claims.clone()","class":"lineCov","hits":"1","order":"6455","possible_hits":"1",},
{"lineNum":"  835","line":"                ),","class":"linePartCov","hits":"1","order":"6457","possible_hits":"2",},
{"lineNum":"  836","line":"                \"Sender must hold a claim issuer\\\'s signing key\""},
{"lineNum":"  837","line":"            );"},
{"lineNum":"  838","line":"        });","class":"linePartCov","hits":"3","order":"6459","possible_hits":"7",},
{"lineNum":"  839","line":"    }","class":"linePartCov","hits":"2","order":"6460","possible_hits":"3",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    #[test]"},
{"lineNum":"  842","line":"    fn only_master_or_signing_keys_can_authenticate_as_an_identity() {","class":"linePartCov","hits":"3","order":"6086","possible_hits":"4",},
{"lineNum":"  843","line":"        with_externalities(&mut build_ext(), || {","class":"linePartCov","hits":"3","order":"6087","possible_hits":"4",},
{"lineNum":"  844","line":"            let owner_id = Identity::owner();","class":"lineCov","hits":"1","order":"6088","possible_hits":"1",},
{"lineNum":"  845","line":"            let owner_key = Key::try_from(owner_id.encode()).unwrap();","class":"lineCov","hits":"1","order":"6089","possible_hits":"1",},
{"lineNum":"  846","line":"            let (_owner, owner_did) = make_account(owner_id).unwrap();","class":"lineCov","hits":"1","order":"6090","possible_hits":"1",},
{"lineNum":"  847","line":"            let (a, a_did) = make_account(2).unwrap();","class":"lineCov","hits":"2","order":"6091","possible_hits":"2",},
{"lineNum":"  848","line":"            let (_b, b_did) = make_account(3).unwrap();","class":"lineCov","hits":"2","order":"6092","possible_hits":"2",},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"            assert_ok!(Identity::add_signing_keys(","class":"linePartCov","hits":"2","order":"6096","possible_hits":"3",},
{"lineNum":"  851","line":"                a.clone(),","class":"lineCov","hits":"2","order":"6093","possible_hits":"2",},
{"lineNum":"  852","line":"                a_did.clone(),","class":"lineCov","hits":"1","order":"6094","possible_hits":"1",},
{"lineNum":"  853","line":"                vec![SigningKey::from(owner_key.clone())]","class":"linePartCov","hits":"2","order":"6095","possible_hits":"3",},
{"lineNum":"  854","line":"            ));","class":"linePartCov","hits":"1","order":"6097","possible_hits":"3",},
{"lineNum":"  855","line":""},
{"lineNum":"  856","line":"            // Check master key on master and signing_keys."},
{"lineNum":"  857","line":"            assert!(Identity::is_signing_key(&owner_did, &owner_key));","class":"linePartCov","hits":"2","order":"6098","possible_hits":"3",},
{"lineNum":"  858","line":"            assert!(Identity::is_signing_key(&a_did, &owner_key));","class":"linePartCov","hits":"2","order":"6099","possible_hits":"3",},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"            assert!(Identity::is_signing_key(&b_did, &owner_key) == false);","class":"linePartCov","hits":"2","order":"6100","possible_hits":"3",},
{"lineNum":"  861","line":""},
{"lineNum":"  862","line":"            // ... and remove that key."},
{"lineNum":"  863","line":"            assert_ok!(Identity::remove_signing_keys(","class":"linePartCov","hits":"2","order":"6104","possible_hits":"3",},
{"lineNum":"  864","line":"                a.clone(),","class":"lineCov","hits":"2","order":"6101","possible_hits":"2",},
{"lineNum":"  865","line":"                a_did.clone(),","class":"lineCov","hits":"1","order":"6102","possible_hits":"1",},
{"lineNum":"  866","line":"                vec![owner_key.clone()]","class":"linePartCov","hits":"1","order":"6103","possible_hits":"2",},
{"lineNum":"  867","line":"            ));","class":"linePartCov","hits":"1","order":"6126","possible_hits":"3",},
{"lineNum":"  868","line":"            assert!(Identity::is_signing_key(&a_did, &owner_key) == false);","class":"linePartCov","hits":"2","order":"6127","possible_hits":"3",},
{"lineNum":"  869","line":"        });","class":"linePartCov","hits":"3","order":"6128","possible_hits":"6",},
{"lineNum":"  870","line":"    }","class":"linePartCov","hits":"2","order":"6129","possible_hits":"3",},
{"lineNum":"  871","line":""},
{"lineNum":"  872","line":"    #[test]"},
{"lineNum":"  873","line":"    fn revoking_claims() {","class":"linePartCov","hits":"3","order":"3901","possible_hits":"4",},
{"lineNum":"  874","line":"        with_externalities(&mut build_ext(), || {","class":"linePartCov","hits":"3","order":"3902","possible_hits":"4",},
{"lineNum":"  875","line":"            let owner_id = Identity::owner();","class":"lineCov","hits":"1","order":"5189","possible_hits":"1",},
{"lineNum":"  876","line":"            let owner_key = Key::try_from(owner_id.encode()).unwrap();","class":"lineCov","hits":"1","order":"5204","possible_hits":"1",},
{"lineNum":"  877","line":"            let (owner, owner_did) = make_account(Identity::owner()).unwrap();","class":"lineCov","hits":"1","order":"5219","possible_hits":"1",},
{"lineNum":"  878","line":"            let (issuer, issuer_did) = make_account(2).unwrap();","class":"lineCov","hits":"2","order":"5447","possible_hits":"2",},
{"lineNum":"  879","line":""},
{"lineNum":"  880","line":"            let (claim_issuer, claim_issuer_did) = make_account(3).unwrap();","class":"lineCov","hits":"2","order":"5467","possible_hits":"2",},
{"lineNum":"  881","line":"            assert_ok!(Identity::add_signing_keys(","class":"linePartCov","hits":"2","order":"5481","possible_hits":"3",},
{"lineNum":"  882","line":"                claim_issuer.clone(),","class":"lineCov","hits":"2","order":"5469","possible_hits":"2",},
{"lineNum":"  883","line":"                claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5470","possible_hits":"1",},
{"lineNum":"  884","line":"                vec![SigningKey::from(owner_key)]","class":"linePartCov","hits":"1","order":"5471","possible_hits":"2",},
{"lineNum":"  885","line":"            ));","class":"linePartCov","hits":"1","order":"5612","possible_hits":"3",},
{"lineNum":"  886","line":""},
{"lineNum":"  887","line":"            assert_ok!(Identity::add_claim_issuer(","class":"linePartCov","hits":"2","order":"5617","possible_hits":"3",},
{"lineNum":"  888","line":"                owner.clone(),","class":"lineCov","hits":"2","order":"5614","possible_hits":"2",},
{"lineNum":"  889","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"5615","possible_hits":"1",},
{"lineNum":"  890","line":"                claim_issuer_did.clone()","class":"lineCov","hits":"1","order":"5616","possible_hits":"1",},
{"lineNum":"  891","line":"            ));","class":"linePartCov","hits":"1","order":"5644","possible_hits":"2",},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"            // Add Claims by master & claim_issuer"},
{"lineNum":"  894","line":"            let claim = Claim {","class":"lineCov","hits":"1","order":"5646","possible_hits":"1",},
{"lineNum":"  895","line":"                topic: 1,"},
{"lineNum":"  896","line":"                schema: 1,"},
{"lineNum":"  897","line":"                bytes: vec![],","class":"lineCov","hits":"1","order":"5645","possible_hits":"1",},
{"lineNum":"  898","line":"                expiry: 10,"},
{"lineNum":"  899","line":"            };"},
{"lineNum":"  900","line":""},
{"lineNum":"  901","line":"            assert_ok!(Identity::add_claim(","class":"linePartCov","hits":"2","order":"5656","possible_hits":"3",},
{"lineNum":"  902","line":"                owner.clone(),","class":"lineCov","hits":"1","order":"5647","possible_hits":"1",},
{"lineNum":"  903","line":"                owner_did.clone(),","class":"lineCov","hits":"2","order":"5648","possible_hits":"2",},
{"lineNum":"  904","line":"                claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5649","possible_hits":"1",},
{"lineNum":"  905","line":"                vec![claim.clone()]","class":"linePartCov","hits":"1","order":"5650","possible_hits":"2",},
{"lineNum":"  906","line":"            ));","class":"linePartCov","hits":"1","order":"5731","possible_hits":"3",},
{"lineNum":"  907","line":""},
{"lineNum":"  908","line":"            assert_err!(","class":"linePartCov","hits":"1","order":"5742","possible_hits":"2",},
{"lineNum":"  909","line":"                Identity::revoke_claim(","class":"lineCov","hits":"1","order":"5736","possible_hits":"1",},
{"lineNum":"  910","line":"                    issuer.clone(),","class":"lineCov","hits":"2","order":"5732","possible_hits":"2",},
{"lineNum":"  911","line":"                    issuer_did.clone(),","class":"lineCov","hits":"1","order":"5733","possible_hits":"1",},
{"lineNum":"  912","line":"                    claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5734","possible_hits":"1",},
{"lineNum":"  913","line":"                    claim.clone()","class":"lineCov","hits":"1","order":"5735","possible_hits":"1",},
{"lineNum":"  914","line":"                ),","class":"linePartCov","hits":"1","order":"5741","possible_hits":"2",},
{"lineNum":"  915","line":"                \"did_issuer must be a claim issuer for DID\""},
{"lineNum":"  916","line":"            );"},
{"lineNum":"  917","line":"            // TODO Should this fail?"},
{"lineNum":"  918","line":"            assert_err!(","class":"linePartCov","hits":"1","order":"5753","possible_hits":"2",},
{"lineNum":"  919","line":"                Identity::revoke_claim(","class":"lineCov","hits":"1","order":"5751","possible_hits":"1",},
{"lineNum":"  920","line":"                    claim_issuer.clone(),","class":"lineCov","hits":"2","order":"5747","possible_hits":"2",},
{"lineNum":"  921","line":"                    claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5748","possible_hits":"1",},
{"lineNum":"  922","line":"                    claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5749","possible_hits":"1",},
{"lineNum":"  923","line":"                    claim.clone()","class":"lineCov","hits":"1","order":"5750","possible_hits":"1",},
{"lineNum":"  924","line":"                ),","class":"linePartCov","hits":"1","order":"5752","possible_hits":"2",},
{"lineNum":"  925","line":"                \"did_issuer must be a claim issuer for DID\""},
{"lineNum":"  926","line":"            );"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"            assert_ok!(Identity::revoke_claim(","class":"linePartCov","hits":"2","order":"5758","possible_hits":"3",},
{"lineNum":"  929","line":"                owner.clone(),","class":"lineCov","hits":"2","order":"5754","possible_hits":"2",},
{"lineNum":"  930","line":"                owner_did.clone(),","class":"lineCov","hits":"1","order":"5755","possible_hits":"1",},
{"lineNum":"  931","line":"                claim_issuer_did.clone(),","class":"lineCov","hits":"1","order":"5756","possible_hits":"1",},
{"lineNum":"  932","line":"                claim.clone()","class":"lineCov","hits":"1","order":"5757","possible_hits":"1",},
{"lineNum":"  933","line":"            ));","class":"linePartCov","hits":"1","order":"5776","possible_hits":"2",},
{"lineNum":"  934","line":"            // TODO Revoke claim twice??"},
{"lineNum":"  935","line":"            assert_ok!(Identity::revoke_claim(","class":"linePartCov","hits":"2","order":"5781","possible_hits":"3",},
{"lineNum":"  936","line":"                owner,","class":"lineCov","hits":"1","order":"5777","possible_hits":"1",},
{"lineNum":"  937","line":"                owner_did,","class":"lineCov","hits":"1","order":"5778","possible_hits":"1",},
{"lineNum":"  938","line":"                claim_issuer_did,","class":"lineCov","hits":"1","order":"5779","possible_hits":"1",},
{"lineNum":"  939","line":"                claim","class":"lineCov","hits":"1","order":"5780","possible_hits":"1",},
{"lineNum":"  940","line":"            ));"},
{"lineNum":"  941","line":"        });","class":"linePartCov","hits":"3","order":"5785","possible_hits":"8",},
{"lineNum":"  942","line":"    }","class":"linePartCov","hits":"2","order":"5875","possible_hits":"3",},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"    #[test]"},
{"lineNum":"  945","line":"    fn only_master_key_can_add_signing_key_roles() {","class":"linePartCov","hits":"3","order":"6159","possible_hits":"4",},
{"lineNum":"  946","line":"        with_externalities(","class":"lineCov","hits":"1","order":"6162","possible_hits":"1",},
{"lineNum":"  947","line":"            &mut build_ext(),","class":"lineCov","hits":"1","order":"6160","possible_hits":"1",},
{"lineNum":"  948","line":"            &only_master_key_can_add_signing_key_roles_with_externalities,"},
{"lineNum":"  949","line":"        );","class":"lineCov","hits":"1","order":"6405","possible_hits":"1",},
{"lineNum":"  950","line":"    }","class":"linePartCov","hits":"2","order":"6406","possible_hits":"3",},
{"lineNum":"  951","line":""},
{"lineNum":"  952","line":"    fn only_master_key_can_add_signing_key_roles_with_externalities() {","class":"linePartCov","hits":"1","order":"6166","possible_hits":"2",},
{"lineNum":"  953","line":"        let (alice_acc, bob_acc, charlie_acc) = (1u64, 2u64, 3u64);","class":"lineCov","hits":"1","order":"6167","possible_hits":"1",},
{"lineNum":"  954","line":"        let (bob_key, charlie_key) = (","class":"lineCov","hits":"1","order":"6170","possible_hits":"1",},
{"lineNum":"  955","line":"            Key::try_from(bob_acc.encode()).unwrap(),","class":"lineCov","hits":"2","order":"6168","possible_hits":"2",},
{"lineNum":"  956","line":"            Key::try_from(charlie_acc.encode()).unwrap(),","class":"lineCov","hits":"1","order":"6169","possible_hits":"1",},
{"lineNum":"  957","line":"        );"},
{"lineNum":"  958","line":"        let (alice, alice_did) = make_account(alice_acc).unwrap();","class":"lineCov","hits":"1","order":"6171","possible_hits":"1",},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"        assert_ok!(Identity::add_signing_keys(","class":"linePartCov","hits":"2","order":"6180","possible_hits":"3",},
{"lineNum":"  961","line":"            alice.clone(),","class":"lineCov","hits":"2","order":"6175","possible_hits":"2",},
{"lineNum":"  962","line":"            alice_did.clone(),","class":"lineCov","hits":"1","order":"6176","possible_hits":"1",},
{"lineNum":"  963","line":"            vec![","class":"linePartCov","hits":"1","order":"6177","possible_hits":"3",},
{"lineNum":"  964","line":"                SigningKey::from(bob_key.clone()),","class":"lineCov","hits":"1","order":"6178","possible_hits":"1",},
{"lineNum":"  965","line":"                SigningKey::from(charlie_key.clone())","class":"lineCov","hits":"1","order":"6179","possible_hits":"1",},
{"lineNum":"  966","line":"            ]"},
{"lineNum":"  967","line":"        ));","class":"linePartCov","hits":"1","order":"6192","possible_hits":"3",},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"        // Only `alice` is able to update `bob`\'s roles and `charlie`\'s roles."},
{"lineNum":"  970","line":"        assert_ok!(Identity::set_role_to_signing_key(","class":"linePartCov","hits":"2","order":"6197","possible_hits":"3",},
{"lineNum":"  971","line":"            alice.clone(),","class":"lineCov","hits":"2","order":"6193","possible_hits":"2",},
{"lineNum":"  972","line":"            alice_did.clone(),","class":"lineCov","hits":"1","order":"6194","possible_hits":"1",},
{"lineNum":"  973","line":"            bob_key.clone(),","class":"lineCov","hits":"1","order":"6195","possible_hits":"1",},
{"lineNum":"  974","line":"            vec![KeyRole::Operator]","class":"lineCov","hits":"1","order":"6196","possible_hits":"1",},
{"lineNum":"  975","line":"        ));","class":"linePartCov","hits":"1","order":"6266","possible_hits":"2",},
{"lineNum":"  976","line":"        assert_ok!(Identity::set_role_to_signing_key(","class":"linePartCov","hits":"2","order":"6271","possible_hits":"3",},
{"lineNum":"  977","line":"            alice.clone(),","class":"lineCov","hits":"2","order":"6267","possible_hits":"2",},
{"lineNum":"  978","line":"            alice_did.clone(),","class":"lineCov","hits":"1","order":"6268","possible_hits":"1",},
{"lineNum":"  979","line":"            charlie_key.clone(),","class":"lineCov","hits":"1","order":"6269","possible_hits":"1",},
{"lineNum":"  980","line":"            vec![KeyRole::Admin, KeyRole::Operator]","class":"lineCov","hits":"1","order":"6270","possible_hits":"1",},
{"lineNum":"  981","line":"        ));","class":"linePartCov","hits":"1","order":"6327","possible_hits":"2",},
{"lineNum":"  982","line":""},
{"lineNum":"  983","line":"        // Bob tries to get better role by himself at `alice` Identity."},
{"lineNum":"  984","line":"        assert_err!(","class":"linePartCov","hits":"1","order":"6334","possible_hits":"2",},
{"lineNum":"  985","line":"            Identity::set_role_to_signing_key(","class":"lineCov","hits":"1","order":"6332","possible_hits":"1",},
{"lineNum":"  986","line":"                Origin::signed(bob_acc),","class":"lineCov","hits":"2","order":"6328","possible_hits":"2",},
{"lineNum":"  987","line":"                alice_did.clone(),","class":"lineCov","hits":"1","order":"6329","possible_hits":"1",},
{"lineNum":"  988","line":"                bob_key.clone(),","class":"lineCov","hits":"1","order":"6330","possible_hits":"1",},
{"lineNum":"  989","line":"                vec![KeyRole::Full]","class":"lineCov","hits":"1","order":"6331","possible_hits":"1",},
{"lineNum":"  990","line":"            ),","class":"linePartCov","hits":"1","order":"6333","possible_hits":"2",},
{"lineNum":"  991","line":"            \"Only master key of an identity is able to update signing key roles\""},
{"lineNum":"  992","line":"        );"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"        // Bob tries to remove Charlie\'s roles at `alice` Identity."},
{"lineNum":"  995","line":"        assert_err!(","class":"linePartCov","hits":"1","order":"6390","possible_hits":"2",},
{"lineNum":"  996","line":"            Identity::set_role_to_signing_key(","class":"lineCov","hits":"1","order":"6386","possible_hits":"1",},
{"lineNum":"  997","line":"                Origin::signed(bob_acc),","class":"lineCov","hits":"2","order":"6381","possible_hits":"2",},
{"lineNum":"  998","line":"                alice_did.clone(),","class":"lineCov","hits":"1","order":"6382","possible_hits":"1",},
{"lineNum":"  999","line":"                charlie_key,","class":"lineCov","hits":"1","order":"6384","possible_hits":"1",},
{"lineNum":" 1000","line":"                vec![]","class":"lineCov","hits":"1","order":"6385","possible_hits":"1",},
{"lineNum":" 1001","line":"            ),","class":"linePartCov","hits":"1","order":"6388","possible_hits":"3",},
{"lineNum":" 1002","line":"            \"Only master key of an identity is able to update signing key roles\""},
{"lineNum":" 1003","line":"        );"},
{"lineNum":" 1004","line":""},
{"lineNum":" 1005","line":"        // Alice over-write some roles."},
{"lineNum":" 1006","line":"        assert_ok!(Identity::set_role_to_signing_key(","class":"linePartCov","hits":"2","order":"6395","possible_hits":"3",},
{"lineNum":" 1007","line":"            alice.clone(),","class":"lineCov","hits":"2","order":"6391","possible_hits":"2",},
{"lineNum":" 1008","line":"            alice_did,","class":"lineCov","hits":"1","order":"6392","possible_hits":"1",},
{"lineNum":" 1009","line":"            bob_key,","class":"lineCov","hits":"1","order":"6393","possible_hits":"1",},
{"lineNum":" 1010","line":"            vec![]","class":"lineCov","hits":"1","order":"6394","possible_hits":"1",},
{"lineNum":" 1011","line":"        ));","class":"linePartCov","hits":"1","order":"6400","possible_hits":"3",},
{"lineNum":" 1012","line":"    }","class":"linePartCov","hits":"2","order":"6401","possible_hits":"3",},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"    #[test]"},
{"lineNum":" 1015","line":"    fn add_signing_keys_with_specific_type() {","class":"linePartCov","hits":"3","order":"6478","possible_hits":"4",},
{"lineNum":" 1016","line":"        with_externalities(","class":"lineCov","hits":"1","order":"6481","possible_hits":"1",},
{"lineNum":" 1017","line":"            &mut build_ext(),","class":"lineCov","hits":"1","order":"6479","possible_hits":"1",},
{"lineNum":" 1018","line":"            &add_signing_keys_with_specific_type_with_externalities,"},
{"lineNum":" 1019","line":"        );","class":"lineCov","hits":"1","order":"6519","possible_hits":"1",},
{"lineNum":" 1020","line":"    }","class":"linePartCov","hits":"2","order":"6520","possible_hits":"3",},
{"lineNum":" 1021","line":""},
{"lineNum":" 1022","line":"    /// It tests that signing key can be added using non-default key type"},
{"lineNum":" 1023","line":"    /// (`SigningKeyType::External`)."},
{"lineNum":" 1024","line":"    fn add_signing_keys_with_specific_type_with_externalities() {","class":"linePartCov","hits":"1","order":"6482","possible_hits":"2",},
{"lineNum":" 1025","line":"        let (alice_acc, bob_acc, charlie_acc, dave_acc) = (1u64, 2u64, 3u64, 4u64);","class":"lineCov","hits":"1","order":"6483","possible_hits":"1",},
{"lineNum":" 1026","line":"        let (bob_key, charlie_key, dave_key) = (","class":"lineCov","hits":"1","order":"6487","possible_hits":"1",},
{"lineNum":" 1027","line":"            Key::try_from(bob_acc.encode()).unwrap(),","class":"lineCov","hits":"2","order":"6484","possible_hits":"2",},
{"lineNum":" 1028","line":"            Key::try_from(charlie_acc.encode()).unwrap(),","class":"lineCov","hits":"1","order":"6485","possible_hits":"1",},
{"lineNum":" 1029","line":"            Key::try_from(dave_acc.encode()).unwrap(),","class":"lineCov","hits":"1","order":"6486","possible_hits":"1",},
{"lineNum":" 1030","line":"        );"},
{"lineNum":" 1031","line":""},
{"lineNum":" 1032","line":"        // Create keys using non-default type."},
{"lineNum":" 1033","line":"        let bob_signing_key = SigningKey {","class":"lineCov","hits":"1","order":"6491","possible_hits":"1",},
{"lineNum":" 1034","line":"            key: bob_key,","class":"lineCov","hits":"1","order":"6488","possible_hits":"1",},
{"lineNum":" 1035","line":"            roles: vec![],","class":"lineCov","hits":"1","order":"6489","possible_hits":"1",},
{"lineNum":" 1036","line":"            key_type: SigningKeyType::Identity,","class":"lineCov","hits":"1","order":"6490","possible_hits":"1",},
{"lineNum":" 1037","line":"        };"},
{"lineNum":" 1038","line":"        let charlie_signing_key = SigningKey {","class":"lineCov","hits":"1","order":"6495","possible_hits":"1",},
{"lineNum":" 1039","line":"            key: charlie_key,","class":"lineCov","hits":"1","order":"6492","possible_hits":"1",},
{"lineNum":" 1040","line":"            key_type: SigningKeyType::Relayer,","class":"lineCov","hits":"1","order":"6493","possible_hits":"1",},
{"lineNum":" 1041","line":"            roles: vec![],","class":"lineCov","hits":"1","order":"6494","possible_hits":"1",},
{"lineNum":" 1042","line":"        };"},
{"lineNum":" 1043","line":"        let dave_signing_key = SigningKey {","class":"lineCov","hits":"1","order":"6499","possible_hits":"1",},
{"lineNum":" 1044","line":"            key: dave_key,","class":"lineCov","hits":"1","order":"6496","possible_hits":"1",},
{"lineNum":" 1045","line":"            key_type: SigningKeyType::Multisig,","class":"lineCov","hits":"1","order":"6497","possible_hits":"1",},
{"lineNum":" 1046","line":"            roles: vec![],","class":"lineCov","hits":"1","order":"6498","possible_hits":"1",},
{"lineNum":" 1047","line":"        };"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"        // Add signing keys with non-default type."},
{"lineNum":" 1050","line":"        let (alice, alice_did) = make_account(alice_acc).unwrap();","class":"lineCov","hits":"1","order":"6500","possible_hits":"1",},
{"lineNum":" 1051","line":"        assert_ok!(Identity::add_signing_keys(","class":"linePartCov","hits":"2","order":"6504","possible_hits":"3",},
{"lineNum":" 1052","line":"            alice,","class":"lineCov","hits":"1","order":"6501","possible_hits":"1",},
{"lineNum":" 1053","line":"            alice_did,","class":"lineCov","hits":"1","order":"6502","possible_hits":"1",},
{"lineNum":" 1054","line":"            vec![bob_signing_key, charlie_signing_key]","class":"lineCov","hits":"1","order":"6503","possible_hits":"1",},
{"lineNum":" 1055","line":"        ));","class":"linePartCov","hits":"1","order":"6505","possible_hits":"3",},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"        // Register did with non-default type."},
{"lineNum":" 1058","line":"        let bob_did = format!(\"did:poly:{}\", bob_acc).as_bytes().to_vec();","class":"lineCov","hits":"2","order":"6506","possible_hits":"2",},
{"lineNum":" 1059","line":"        assert_ok!(Identity::register_did(","class":"linePartCov","hits":"2","order":"6510","possible_hits":"3",},
{"lineNum":" 1060","line":"            Origin::signed(bob_acc),","class":"lineCov","hits":"1","order":"6507","possible_hits":"1",},
{"lineNum":" 1061","line":"            bob_did,","class":"lineCov","hits":"1","order":"6508","possible_hits":"1",},
{"lineNum":" 1062","line":"            vec![dave_signing_key]","class":"lineCov","hits":"1","order":"6509","possible_hits":"1",},
{"lineNum":" 1063","line":"        ));","class":"linePartCov","hits":"1","order":"6517","possible_hits":"3",},
{"lineNum":" 1064","line":"    }","class":"linePartCov","hits":"1","order":"6518","possible_hits":"6",},
{"lineNum":" 1065","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 400, "covered" : 392,};
var merged_data = [];
