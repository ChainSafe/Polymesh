var data = {lines:[
{"lineNum":"    1","line":"use parity_scale_codec::{Decode, Encode};"},
{"lineNum":"    2","line":"use rstd::{prelude::Vec, vec};"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use crate::Key;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"// use crate::entity::IgnoredCaseString;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// Identity roles."},
{"lineNum":"    9","line":"/// # TODO"},
{"lineNum":"   10","line":"/// 2. Review documents:"},
{"lineNum":"   11","line":"///     - [MESH-235](https://polymath.atlassian.net/browse/MESH-235)"},
{"lineNum":"   12","line":"///     - [Polymesh: Roles/Permissions](https://docs.google.com/document/d/12u-rMavow4fvidsFlLcLe7DAXuqWk8XUHOBV9kw05Z8/)"},
{"lineNum":"   13","line":"#[allow(missing_docs)]"},
{"lineNum":"   14","line":"#[derive(Encode, Decode, Clone, Copy, PartialEq, Eq, Debug, PartialOrd, Ord)]","class":"linePartCov","hits":"14","order":"6208","possible_hits":"27",},
{"lineNum":"   15","line":"pub enum KeyRole {","class":"linePartCov","hits":"3","order":"6263","possible_hits":"5",},
{"lineNum":"   16","line":"    Full,","class":"linePartCov","hits":"1","order":"6272","possible_hits":"2",},
{"lineNum":"   17","line":"    Admin,","class":"lineCov","hits":"2","order":"6273","possible_hits":"2",},
{"lineNum":"   18","line":"    Operator,","class":"lineCov","hits":"2","order":"6274","possible_hits":"2",},
{"lineNum":"   19","line":"    Custom(u8),","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   20","line":"}"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"/// Signing key type."},
{"lineNum":"   23","line":"/// See [MESH-378](https://polymath.atlassian.net/browse/MESH-378)"},
{"lineNum":"   24","line":"#[allow(missing_docs)]"},
{"lineNum":"   25","line":"#[derive(Encode, Decode, Clone, PartialEq, Eq, Debug)]","class":"linePartCov","hits":"8","order":"5580","possible_hits":"23",},
{"lineNum":"   26","line":"pub enum SigningKeyType {","class":"linePartCov","hits":"2","order":"5609","possible_hits":"6",},
{"lineNum":"   27","line":"    External,","class":"lineCov","hits":"2","order":"5698","possible_hits":"2",},
{"lineNum":"   28","line":"    Identity,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"    Multisig,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   30","line":"    Relayer,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   31","line":"    Custom(u8),","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   32","line":"}"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"impl Default for SigningKeyType {"},
{"lineNum":"   35","line":"    fn default() -> Self {"},
{"lineNum":"   36","line":"        SigningKeyType::External"},
{"lineNum":"   37","line":"    }"},
{"lineNum":"   38","line":"}"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"/// A signing key contains a type and a group of roles."},
{"lineNum":"   41","line":"#[allow(missing_docs)]"},
{"lineNum":"   42","line":"#[derive(Encode, Decode, Default, Clone, Eq, Debug)]","class":"linePartCov","hits":"9","order":"5575","possible_hits":"13",},
{"lineNum":"   43","line":"pub struct SigningKey {","class":"lineCov","hits":"1","order":"5699","possible_hits":"1",},
{"lineNum":"   44","line":"    pub key: Key,","class":"linePartCov","hits":"4","order":"5576","possible_hits":"5",},
{"lineNum":"   45","line":"    pub key_type: SigningKeyType,","class":"linePartCov","hits":"3","order":"5577","possible_hits":"4",},
{"lineNum":"   46","line":"    pub roles: Vec<KeyRole>,","class":"linePartCov","hits":"3","order":"5578","possible_hits":"5",},
{"lineNum":"   47","line":"}"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"impl SigningKey {"},
{"lineNum":"   50","line":"    /// It creates an \'External\' signing key."},
{"lineNum":"   51","line":"    pub fn new(key: Key, roles: Vec<KeyRole>) -> Self {","class":"lineCov","hits":"1","order":"5474","possible_hits":"1",},
{"lineNum":"   52","line":"        Self {","class":"lineCov","hits":"1","order":"5478","possible_hits":"1",},
{"lineNum":"   53","line":"            key,","class":"lineCov","hits":"1","order":"5475","possible_hits":"1",},
{"lineNum":"   54","line":"            key_type: SigningKeyType::External,","class":"lineCov","hits":"1","order":"5476","possible_hits":"1",},
{"lineNum":"   55","line":"            roles,","class":"lineCov","hits":"1","order":"5477","possible_hits":"1",},
{"lineNum":"   56","line":"        }"},
{"lineNum":"   57","line":"    }","class":"linePartCov","hits":"1","order":"5479","possible_hits":"2",},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    /// It checks if this key has specified `role` role."},
{"lineNum":"   60","line":"    /// Role `KeyRole::Full` is special and denotates that this key can be used for any role."},
{"lineNum":"   61","line":"    pub fn has_role(&self, role: KeyRole) -> bool {"},
{"lineNum":"   62","line":"        self.roles"},
{"lineNum":"   63","line":"            .iter()"},
{"lineNum":"   64","line":"            .find(|&r| role == *r || *r == KeyRole::Full)"},
{"lineNum":"   65","line":"            .is_some()"},
{"lineNum":"   66","line":"    }"},
{"lineNum":"   67","line":"}"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"impl From<Key> for SigningKey {"},
{"lineNum":"   70","line":"    fn from(s: Key) -> Self {","class":"lineCov","hits":"1","order":"5472","possible_hits":"1",},
{"lineNum":"   71","line":"        Self::new(s, vec![])","class":"lineCov","hits":"1","order":"5473","possible_hits":"1",},
{"lineNum":"   72","line":"    }","class":"linePartCov","hits":"1","order":"5480","possible_hits":"2",},
{"lineNum":"   73","line":"}"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"impl PartialEq for SigningKey {"},
{"lineNum":"   76","line":"    fn eq(&self, other: &Self) -> bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"        self.key == other.key && self.key_type == other.key_type && self.roles == other.roles","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"}"},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"impl PartialEq<Key> for SigningKey {"},
{"lineNum":"   82","line":"    fn eq(&self, other: &Key) -> bool {","class":"lineCov","hits":"1","order":"5701","possible_hits":"1",},
{"lineNum":"   83","line":"        self.key == *other","class":"lineCov","hits":"1","order":"5702","possible_hits":"1",},
{"lineNum":"   84","line":"    }","class":"linePartCov","hits":"1","order":"5709","possible_hits":"2",},
{"lineNum":"   85","line":"}"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"#[cfg(test)]"},
{"lineNum":"   88","line":"mod tests {"},
{"lineNum":"   89","line":"    use super::{Key, KeyRole, SigningKey};"},
{"lineNum":"   90","line":"    use std::convert::TryFrom;"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    #[test]"},
{"lineNum":"   93","line":"    fn build_test() {"},
{"lineNum":"   94","line":"        let key = Key::try_from(\"ABCDABCD\".as_bytes()).unwrap();"},
{"lineNum":"   95","line":"        let rk1 = SigningKey::new(key.clone(), vec![]);"},
{"lineNum":"   96","line":"        let rk2 = SigningKey::from(key.clone());"},
{"lineNum":"   97","line":"        assert_eq!(rk1, rk2);"},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"        let rk3 = SigningKey::new(key.clone(), vec![KeyRole::Operator, KeyRole::Admin]);"},
{"lineNum":"  100","line":"        assert_ne!(rk1, rk3);"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"        let mut rk4 = SigningKey::from(key);"},
{"lineNum":"  103","line":"        rk4.roles = vec![KeyRole::Operator, KeyRole::Admin];"},
{"lineNum":"  104","line":"        assert_eq!(rk3, rk4);"},
{"lineNum":"  105","line":"    }"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"    #[test]"},
{"lineNum":"  108","line":"    fn full_role_test() {"},
{"lineNum":"  109","line":"        let key = Key::try_from(\"ABCDABCD\".as_bytes()).unwrap();"},
{"lineNum":"  110","line":"        let full_key = SigningKey::new(key.clone(), vec![KeyRole::Full]);"},
{"lineNum":"  111","line":"        let not_full_key = SigningKey::new(key, vec![KeyRole::Operator]);"},
{"lineNum":"  112","line":"        assert_eq!(full_key.has_role(KeyRole::Operator), true);"},
{"lineNum":"  113","line":"        assert_eq!(full_key.has_role(KeyRole::Admin), true);"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        assert_eq!(not_full_key.has_role(KeyRole::Operator), true);"},
{"lineNum":"  116","line":"        assert_eq!(not_full_key.has_role(KeyRole::Admin), false);"},
{"lineNum":"  117","line":"    }"},
{"lineNum":"  118","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 33, "covered" : 25,};
var merged_data = [];
