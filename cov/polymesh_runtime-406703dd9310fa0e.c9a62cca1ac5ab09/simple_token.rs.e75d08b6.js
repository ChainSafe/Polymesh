var data = {lines:[
{"lineNum":"    1","line":"//! SimpleToken"},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! This module implements a simple SimpleToken API on top of Polymesh."},
{"lineNum":"    4","line":"use crate::{balances, identity, utils};"},
{"lineNum":"    5","line":"use primitives::Key;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"use codec::Encode;"},
{"lineNum":"    8","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"use sr_primitives::traits::{CheckedAdd, CheckedSub};"},
{"lineNum":"   11","line":"use srml_support::{decl_event, decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"   12","line":"use system::ensure_signed;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"/// The module\'s configuration trait."},
{"lineNum":"   15","line":"pub trait Trait: system::Trait + balances::Trait + utils::Trait + identity::Trait {"},
{"lineNum":"   16","line":"    // TODO: Add other types and constants required configure this module."},
{"lineNum":"   17","line":"    /// The overarching event type."},
{"lineNum":"   18","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"// struct to store the token details"},
{"lineNum":"   22","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Debug)]","class":"lineCov","hits":"2","order":"6685","possible_hits":"2",},
{"lineNum":"   23","line":"pub struct SimpleTokenRecord<U> {"},
{"lineNum":"   24","line":"    pub ticker: Vec<u8>,"},
{"lineNum":"   25","line":"    pub total_supply: U,"},
{"lineNum":"   26","line":"    pub owner_did: Vec<u8>,"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"// This module\'s storage items."},
{"lineNum":"   30","line":"decl_storage! {","class":"lineCov","hits":"19","order":"6673","possible_hits":"19",},
{"lineNum":"   31","line":"    trait Store for Module<T: Trait> as SimpleToken {"},
{"lineNum":"   32","line":"        // ticker, owner DID, spender DID -> allowance amount"},
{"lineNum":"   33","line":"        Allowance get(allowance): map (Vec<u8>, Vec<u8>, Vec<u8>) => T::TokenBalance;"},
{"lineNum":"   34","line":"        // ticker, DID"},
{"lineNum":"   35","line":"        pub BalanceOf get(balance_of): map (Vec<u8>, Vec<u8>) => T::TokenBalance;"},
{"lineNum":"   36","line":"        // How much creating a new SimpleToken token costs in base currency"},
{"lineNum":"   37","line":"        CreationFee get(creation_fee) config(): T::Balance;"},
{"lineNum":"   38","line":"        // Token Details"},
{"lineNum":"   39","line":"        Tokens get(tokens): map Vec<u8> => SimpleTokenRecord<T::TokenBalance>;"},
{"lineNum":"   40","line":"    }"},
{"lineNum":"   41","line":"}","class":"linePartCov","hits":"9","order":"6674","possible_hits":"20",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"// The module\'s dispatchable functions."},
{"lineNum":"   44","line":"decl_module! {"},
{"lineNum":"   45","line":"    /// The module declaration."},
{"lineNum":"   46","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   47","line":"        // Initializing events"},
{"lineNum":"   48","line":"        // this is needed only if you are using events in your module"},
{"lineNum":"   49","line":"        fn deposit_event() = default;"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"        pub fn create_token(origin, did: Vec<u8>, ticker: Vec<u8>, total_supply: T::TokenBalance) -> Result {"},
{"lineNum":"   52","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"6670","possible_hits":"5",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   55","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"2","order":"6671","possible_hits":"4",},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"            ensure!(!<Tokens<T>>::exists(&ticker), \"Ticker with this name already exists\");","class":"linePartCov","hits":"2","order":"6672","possible_hits":"3",},
{"lineNum":"   58","line":"            // ensure!(<identity::Module<T>>::is_simple_token_issuer(&did), \"Sender is not an issuer\");"},
{"lineNum":"   59","line":"            ensure!(ticker.len() <= 32, \"token ticker cannot exceed 32 bytes\");","class":"linePartCov","hits":"2","order":"6675","possible_hits":"3",},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"            <identity::DidRecords<T>>::mutate(&did, |record| -> Result {","class":"linePartCov","hits":"3","order":"6676","possible_hits":"4",},
{"lineNum":"   62","line":"                record.balance = record.balance.checked_sub(&Self::creation_fee()).ok_or(\"Could not charge for token issuance\")?;","class":"linePartCov","hits":"1","order":"6677","possible_hits":"2",},
{"lineNum":"   63","line":"                Ok(())","class":"lineCov","hits":"1","order":"6678","possible_hits":"1",},
{"lineNum":"   64","line":"            })?;","class":"linePartCov","hits":"3","order":"6679","possible_hits":"5",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"            let new_token = SimpleTokenRecord {","class":"lineCov","hits":"1","order":"6683","possible_hits":"1",},
{"lineNum":"   67","line":"                ticker: ticker.clone(),","class":"lineCov","hits":"1","order":"6680","possible_hits":"1",},
{"lineNum":"   68","line":"                total_supply: total_supply.clone(),","class":"lineCov","hits":"1","order":"6681","possible_hits":"1",},
{"lineNum":"   69","line":"                owner_did: did.clone(),","class":"lineCov","hits":"1","order":"6682","possible_hits":"1",},
{"lineNum":"   70","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"            <Tokens<T>>::insert(&ticker, new_token);","class":"lineCov","hits":"1","order":"6684","possible_hits":"1",},
{"lineNum":"   73","line":"            // Let the owner distribute the whole supply of the token"},
{"lineNum":"   74","line":"            <BalanceOf<T>>::insert((ticker.clone(), did.clone()), total_supply);","class":"lineCov","hits":"1","order":"6686","possible_hits":"1",},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"            sr_primitives::print(\"Initialized a new token\");","class":"lineCov","hits":"1","order":"6687","possible_hits":"1",},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"            Self::deposit_event(RawEvent::TokenCreated(ticker, did, total_supply));","class":"lineCov","hits":"1","order":"6688","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"            Ok(())","class":"lineCov","hits":"1","order":"6689","possible_hits":"1",},
{"lineNum":"   81","line":"        }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"        fn approve(origin, did: Vec<u8>, ticker: Vec<u8>, spender_did: Vec<u8>, value: T::TokenBalance) -> Result {"},
{"lineNum":"   84","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"   85","line":"            let ticker_did = (ticker.clone(), did.clone());"},
{"lineNum":"   86","line":"            ensure!(<BalanceOf<T>>::exists(&ticker_did), \"Account does not own this token\");"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   89","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"            let ticker_did_spender_did = (ticker.clone(), did.clone(), spender_did.clone());"},
{"lineNum":"   92","line":"            let allowance = Self::allowance(&ticker_did_spender_did);"},
{"lineNum":"   93","line":"            let updated_allowance = allowance.checked_add(&value).ok_or(\"overflow in calculating allowance\")?;"},
{"lineNum":"   94","line":"            <Allowance<T>>::insert(&ticker_did_spender_did, updated_allowance);"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            Self::deposit_event(RawEvent::Approval(ticker, did, spender_did, value));"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"            Ok(())"},
{"lineNum":"   99","line":"        }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        pub fn transfer(origin, did: Vec<u8>, ticker: Vec<u8>, to_did: Vec<u8>, amount: T::TokenBalance) -> Result {"},
{"lineNum":"  102","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"7030","possible_hits":"5",},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  105","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"2","order":"7031","possible_hits":"4",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            Self::_transfer(&ticker, &did, &to_did, amount)","class":"lineCov","hits":"2","order":"7032","possible_hits":"2",},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        fn transfer_from(origin, did: Vec<u8>, ticker: Vec<u8>, from_did: Vec<u8>, to_did: Vec<u8>, amount: T::TokenBalance) -> Result {"},
{"lineNum":"  111","line":"            let spender = ensure_signed(origin)?;"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"            // Check that spender is allowed to act on behalf of `did`"},
{"lineNum":"  114","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(spender.encode())?), \"spender must be a signing key for DID\");"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"            let ticker_from_did_did = (ticker.clone(), from_did.clone(), did.clone());"},
{"lineNum":"  117","line":"            ensure!(<Allowance<T>>::exists(&ticker_from_did_did), \"Allowance does not exist.\");"},
{"lineNum":"  118","line":"            let allowance = Self::allowance(&ticker_from_did_did);"},
{"lineNum":"  119","line":"            ensure!(allowance >= amount, \"Not enough allowance.\");"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"            // Needs to happen before allowance subtraction so that the from balance is checked in _transfer"},
{"lineNum":"  122","line":"            Self::_transfer(&ticker, &from_did, &to_did, amount)?;"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"            // using checked_sub (safe math) to avoid overflow"},
{"lineNum":"  125","line":"            let updated_allowance = allowance.checked_sub(&amount).ok_or(\"overflow in calculating allowance\")?;"},
{"lineNum":"  126","line":"            <Allowance<T>>::insert((ticker.clone(), from_did.clone(), did.clone()), updated_allowance);"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"            Self::deposit_event(RawEvent::Approval(ticker, from_did, did, updated_allowance));"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"            Ok(())"},
{"lineNum":"  131","line":"        }"},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":"}"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"decl_event!("},
{"lineNum":"  136","line":"    pub enum Event<T>"},
{"lineNum":"  137","line":"    where"},
{"lineNum":"  138","line":"        TokenBalance = <T as utils::Trait>::TokenBalance,"},
{"lineNum":"  139","line":"    {"},
{"lineNum":"  140","line":"        // ticker, from DID, spender DID, amount"},
{"lineNum":"  141","line":"        Approval(Vec<u8>, Vec<u8>, Vec<u8>, TokenBalance),"},
{"lineNum":"  142","line":"        // ticker, owner DID, supply"},
{"lineNum":"  143","line":"        TokenCreated(Vec<u8>, Vec<u8>, TokenBalance),"},
{"lineNum":"  144","line":"        // ticker, from DID, to DID, amount"},
{"lineNum":"  145","line":"        Transfer(Vec<u8>, Vec<u8>, Vec<u8>, TokenBalance),"},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":");"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"pub trait SimpleTokenTrait<V> {"},
{"lineNum":"  150","line":"    fn transfer(sender_did: &Vec<u8>, ticker: &Vec<u8>, to_did: &Vec<u8>, amount: V) -> Result;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"    fn balance_of(ticker: Vec<u8>, owner_did: Vec<u8>) -> V;"},
{"lineNum":"  153","line":"}"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"impl<T: Trait> SimpleTokenTrait<T::TokenBalance> for Module<T> {"},
{"lineNum":"  156","line":"    fn transfer("},
{"lineNum":"  157","line":"        sender_did: &Vec<u8>,"},
{"lineNum":"  158","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  159","line":"        to_did: &Vec<u8>,"},
{"lineNum":"  160","line":"        amount: T::TokenBalance,"},
{"lineNum":"  161","line":"    ) -> Result {"},
{"lineNum":"  162","line":"        Self::_transfer(ticker, sender_did, to_did, amount)"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    fn balance_of(ticker: Vec<u8>, owner_did: Vec<u8>) -> T::TokenBalance {"},
{"lineNum":"  166","line":"        Self::balance_of((ticker, owner_did))"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":"}"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"  171","line":"    fn _transfer(","class":"linePartCov","hits":"1","order":"7033","possible_hits":"2",},
{"lineNum":"  172","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  173","line":"        from_did: &Vec<u8>,"},
{"lineNum":"  174","line":"        to_did: &Vec<u8>,"},
{"lineNum":"  175","line":"        amount: T::TokenBalance,"},
{"lineNum":"  176","line":"    ) -> Result {"},
{"lineNum":"  177","line":"        let ticker_from_did = (ticker.clone(), from_did.clone());","class":"linePartCov","hits":"2","order":"7034","possible_hits":"3",},
{"lineNum":"  178","line":"        ensure!(","class":"linePartCov","hits":"1","order":"7036","possible_hits":"3",},
{"lineNum":"  179","line":"            <BalanceOf<T>>::exists(&ticker_from_did),","class":"lineCov","hits":"1","order":"7035","possible_hits":"1",},
{"lineNum":"  180","line":"            \"Sender doesn\'t own this token\""},
{"lineNum":"  181","line":"        );"},
{"lineNum":"  182","line":"        let from_balance = Self::balance_of(&ticker_from_did);","class":"lineCov","hits":"2","order":"7037","possible_hits":"2",},
{"lineNum":"  183","line":"        ensure!(from_balance >= amount, \"Insufficient balance\");","class":"linePartCov","hits":"1","order":"7038","possible_hits":"2",},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        let new_from_balance = from_balance","class":"linePartCov","hits":"3","order":"7039","possible_hits":"4",},
{"lineNum":"  186","line":"            .checked_sub(&amount)"},
{"lineNum":"  187","line":"            .ok_or(\"overflow in calculating from balance\")?;","class":"linePartCov","hits":"1","order":"7040","possible_hits":"2",},
{"lineNum":"  188","line":"        let ticker_to_did = (ticker.clone(), to_did.clone());","class":"linePartCov","hits":"1","order":"7041","possible_hits":"2",},
{"lineNum":"  189","line":"        let to_balance = Self::balance_of(&ticker_to_did);","class":"lineCov","hits":"2","order":"7042","possible_hits":"2",},
{"lineNum":"  190","line":"        let new_to_balance = to_balance","class":"linePartCov","hits":"3","order":"7043","possible_hits":"4",},
{"lineNum":"  191","line":"            .checked_add(&amount)"},
{"lineNum":"  192","line":"            .ok_or(\"overflow in calculating to balanc\")?;","class":"linePartCov","hits":"1","order":"7044","possible_hits":"3",},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"        <BalanceOf<T>>::insert(&ticker_from_did, new_from_balance);","class":"lineCov","hits":"1","order":"7045","possible_hits":"1",},
{"lineNum":"  195","line":"        <BalanceOf<T>>::insert(&ticker_to_did, new_to_balance);","class":"lineCov","hits":"1","order":"7046","possible_hits":"1",},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        Self::deposit_event(RawEvent::Transfer(","class":"lineCov","hits":"1","order":"7051","possible_hits":"1",},
{"lineNum":"  198","line":"            ticker.clone(),","class":"lineCov","hits":"1","order":"7047","possible_hits":"1",},
{"lineNum":"  199","line":"            from_did.clone(),","class":"lineCov","hits":"1","order":"7048","possible_hits":"1",},
{"lineNum":"  200","line":"            to_did.clone(),","class":"lineCov","hits":"1","order":"7049","possible_hits":"1",},
{"lineNum":"  201","line":"            amount,","class":"lineCov","hits":"1","order":"7050","possible_hits":"1",},
{"lineNum":"  202","line":"        ));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  203","line":"        Ok(())","class":"lineCov","hits":"1","order":"7052","possible_hits":"1",},
{"lineNum":"  204","line":"    }","class":"linePartCov","hits":"2","order":"7053","possible_hits":"5",},
{"lineNum":"  205","line":"}"},
{"lineNum":"  206","line":""},
{"lineNum":"  207","line":"/// tests for this module"},
{"lineNum":"  208","line":"#[cfg(test)]"},
{"lineNum":"  209","line":"mod tests {"},
{"lineNum":"  210","line":"    /*"},
{"lineNum":"  211","line":"     *    use super::*;"},
{"lineNum":"  212","line":"     *"},
{"lineNum":"  213","line":"     *    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  214","line":"     *    use sr_io::with_externalities;"},
{"lineNum":"  215","line":"     *    use sr_primitives::{"},
{"lineNum":"  216","line":"     *        testing::{Digest, DigestItem, Header},"},
{"lineNum":"  217","line":"     *        traits::{BlakeTwo256, IdentityLookup},"},
{"lineNum":"  218","line":"     *        BuildStorage,"},
{"lineNum":"  219","line":"     *    };"},
{"lineNum":"  220","line":"     *    use srml_support::{assert_ok, impl_outer_origin};"},
{"lineNum":"  221","line":"     *"},
{"lineNum":"  222","line":"     *    impl_outer_origin! {"},
{"lineNum":"  223","line":"     *        pub enum Origin for Test {}"},
{"lineNum":"  224","line":"     *    }"},
{"lineNum":"  225","line":"     *"},
{"lineNum":"  226","line":"     *    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  227","line":"     *    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  228","line":"     *    // configuration traits of modules we want to use."},
{"lineNum":"  229","line":"     *    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  230","line":"     *    pub struct Test;"},
{"lineNum":"  231","line":"     *    impl system::Trait for Test {"},
{"lineNum":"  232","line":"     *        type Origin = Origin;"},
{"lineNum":"  233","line":"     *        type Index = u64;"},
{"lineNum":"  234","line":"     *        type BlockNumber = u64;"},
{"lineNum":"  235","line":"     *        type Hash = H256;"},
{"lineNum":"  236","line":"     *        type Hashing = BlakeTwo256;"},
{"lineNum":"  237","line":"     *        type Digest = H256;"},
{"lineNum":"  238","line":"     *        type AccountId = u64;"},
{"lineNum":"  239","line":"     *        type Lookup = IdentityLookup<Self::AccountId>;"},
{"lineNum":"  240","line":"     *        type Header = Header;"},
{"lineNum":"  241","line":"     *        type Event = ();"},
{"lineNum":"  242","line":"     *        type Log = DigestItem;"},
{"lineNum":"  243","line":"     *    }"},
{"lineNum":"  244","line":"     *    impl Trait for Test {"},
{"lineNum":"  245","line":"     *        type Event = ();"},
{"lineNum":"  246","line":"     *    }"},
{"lineNum":"  247","line":"     *    type SimpleToken = Module<Test>;"},
{"lineNum":"  248","line":"     *"},
{"lineNum":"  249","line":"     *    // This function basically just builds a genesis storage key/value store according to"},
{"lineNum":"  250","line":"     *    // our desired mockup."},
{"lineNum":"  251","line":"     *    fn new_test_ext() -> sr_io::TestExternalities<Blake2Hasher> {"},
{"lineNum":"  252","line":"     *        system::GenesisConfig::default()"},
{"lineNum":"  253","line":"     *            .build_storage()"},
{"lineNum":"  254","line":"     *            .unwrap()"},
{"lineNum":"  255","line":"     *            .0"},
{"lineNum":"  256","line":"     *            .into()"},
{"lineNum":"  257","line":"     *    }"},
{"lineNum":"  258","line":"     *"},
{"lineNum":"  259","line":"     *    #[test]"},
{"lineNum":"  260","line":"     *    fn it_works_for_default_value() {"},
{"lineNum":"  261","line":"     *        with_externalities(&mut new_test_ext(), || {"},
{"lineNum":"  262","line":"     *            // Just a dummy test for the dummy funtion `do_something`"},
{"lineNum":"  263","line":"     *            // calling the `do_something` function with a value 42"},
{"lineNum":"  264","line":"     *            assert_ok!(SimpleToken::do_something(Origin::signed(1), 42));"},
{"lineNum":"  265","line":"     *            // asserting that the stored value is equal to what we stored"},
{"lineNum":"  266","line":"     *            assert_eq!(SimpleToken::something(), Some(42));"},
{"lineNum":"  267","line":"     *        });"},
{"lineNum":"  268","line":"     *    }"},
{"lineNum":"  269","line":"     */"},
{"lineNum":"  270","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 46, "covered" : 44,};
var merged_data = [];
