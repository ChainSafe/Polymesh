var data = {lines:[
{"lineNum":"    1","line":"use parity_scale_codec::{Decode, Encode};"},
{"lineNum":"    2","line":"use rstd::{convert::TryFrom, default::Default, prelude::Vec};"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"/// Size of key, when it is u64"},
{"lineNum":"    5","line":"const KEY_SIZE_TEST: usize = 8;"},
{"lineNum":"    6","line":"const KEY_SIZE: usize = 32;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// It stores a simple key."},
{"lineNum":"    9","line":"/// It uses fixed size to avoid dynamic memory allocation."},
{"lineNum":"   10","line":"#[derive(Encode, Decode, Default, Eq, Clone, Debug)]","class":"linePartCov","hits":"10","order":"5212","possible_hits":"12",},
{"lineNum":"   11","line":"pub struct Key([u8; KEY_SIZE]);","class":"linePartCov","hits":"6","order":"5213","possible_hits":"7",},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"impl TryFrom<Vec<u8>> for Key {"},
{"lineNum":"   14","line":"    type Error = &\'static str;"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    fn try_from(v: Vec<u8>) -> Result<Self, Self::Error> {","class":"linePartCov","hits":"1","order":"5205","possible_hits":"2",},
{"lineNum":"   17","line":"        Key::try_from(v.as_slice())","class":"lineCov","hits":"2","order":"5206","possible_hits":"2",},
{"lineNum":"   18","line":"    }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"impl TryFrom<&Vec<u8>> for Key {"},
{"lineNum":"   22","line":"    type Error = &\'static str;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    fn try_from(v: &Vec<u8>) -> Result<Self, Self::Error> {"},
{"lineNum":"   25","line":"        Key::try_from(v.as_slice())"},
{"lineNum":"   26","line":"    }"},
{"lineNum":"   27","line":"}"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"impl TryFrom<&str> for Key {"},
{"lineNum":"   30","line":"    type Error = &\'static str;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    fn try_from(s: &str) -> Result<Self, Self::Error> {"},
{"lineNum":"   33","line":"        Key::try_from(s.as_bytes())"},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":"}"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"impl TryFrom<&[u8]> for Key {"},
{"lineNum":"   38","line":"    type Error = &\'static str;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    fn try_from(s: &[u8]) -> Result<Self, Self::Error> {","class":"lineCov","hits":"1","order":"5210","possible_hits":"1",},
{"lineNum":"   41","line":"        let mut k = Key::default();","class":"lineCov","hits":"1","order":"5211","possible_hits":"1",},
{"lineNum":"   42","line":"        match s.len() {","class":"linePartCov","hits":"2","order":"5214","possible_hits":"3",},
{"lineNum":"   43","line":"            KEY_SIZE => k.0.copy_from_slice(s),","class":"linePartCov","hits":"1","order":"5215","possible_hits":"2",},
{"lineNum":"   44","line":"            KEY_SIZE_TEST => k.0[..KEY_SIZE_TEST].copy_from_slice(s),","class":"lineCov","hits":"1","order":"5216","possible_hits":"1",},
{"lineNum":"   45","line":"            _ => return Err(\"Invalid size for a key\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"        };"},
{"lineNum":"   47","line":"        Ok(k)","class":"lineCov","hits":"1","order":"5217","possible_hits":"1",},
{"lineNum":"   48","line":"    }","class":"linePartCov","hits":"2","order":"5218","possible_hits":"3",},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"impl From<[u8; KEY_SIZE]> for Key {"},
{"lineNum":"   52","line":"    fn from(s: [u8; KEY_SIZE]) -> Self {"},
{"lineNum":"   53","line":"        Key(s)"},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":"}"},
{"lineNum":"   56","line":""},
{"lineNum":"   57","line":"impl PartialEq for Key {"},
{"lineNum":"   58","line":"    fn eq(&self, other: &Self) -> bool {","class":"lineCov","hits":"1","order":"5703","possible_hits":"1",},
{"lineNum":"   59","line":"        self.0 == other.0","class":"lineCov","hits":"1","order":"5704","possible_hits":"1",},
{"lineNum":"   60","line":"    }","class":"linePartCov","hits":"1","order":"5708","possible_hits":"2",},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"impl PartialEq<&[u8]> for Key {"},
{"lineNum":"   64","line":"    fn eq(&self, other: &&[u8]) -> bool {","class":"lineCov","hits":"1","order":"5525","possible_hits":"1",},
{"lineNum":"   65","line":"        match other.len() {","class":"linePartCov","hits":"2","order":"5526","possible_hits":"4",},
{"lineNum":"   66","line":"            KEY_SIZE => self.0 == *other,","class":"linePartCov","hits":"1","order":"5527","possible_hits":"2",},
{"lineNum":"   67","line":"            KEY_SIZE_TEST => {"},
{"lineNum":"   68","line":"                self.0[..KEY_SIZE_TEST] == **other","class":"lineCov","hits":"3","order":"5528","possible_hits":"3",},
{"lineNum":"   69","line":"                    && self.0[KEY_SIZE_TEST..] == [0u8; KEY_SIZE - KEY_SIZE_TEST]","class":"lineCov","hits":"2","order":"5529","possible_hits":"2",},
{"lineNum":"   70","line":"            }"},
{"lineNum":"   71","line":"            _ => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"        }"},
{"lineNum":"   73","line":"    }","class":"linePartCov","hits":"1","order":"5533","possible_hits":"2",},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"impl PartialEq<Vec<u8>> for Key {"},
{"lineNum":"   77","line":"    fn eq(&self, other: &Vec<u8>) -> bool {","class":"lineCov","hits":"1","order":"5523","possible_hits":"1",},
{"lineNum":"   78","line":"        self == &other.as_slice()","class":"lineCov","hits":"1","order":"5524","possible_hits":"1",},
{"lineNum":"   79","line":"    }","class":"linePartCov","hits":"1","order":"5534","possible_hits":"2",},
{"lineNum":"   80","line":"}"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"#[cfg(test)]"},
{"lineNum":"   83","line":"mod tests {"},
{"lineNum":"   84","line":"    use super::{Key, KEY_SIZE};"},
{"lineNum":"   85","line":"    use std::convert::TryFrom;"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"    #[test]"},
{"lineNum":"   88","line":"    fn build_test() {"},
{"lineNum":"   89","line":"        let k: [u8; KEY_SIZE] = [1u8; KEY_SIZE];"},
{"lineNum":"   90","line":"        let k2 = \"ABCDABCD\".as_bytes().to_vec();"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        assert!(Key::try_from(k).is_ok());"},
{"lineNum":"   93","line":"        assert!(Key::try_from(k2.as_slice()).is_ok());"},
{"lineNum":"   94","line":"        assert!(Key::try_from(k2).is_ok());"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"        assert!(Key::try_from(\"ABCDABCDx\".as_bytes()).is_err());"},
{"lineNum":"   97","line":"    }"},
{"lineNum":"   98","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 26, "covered" : 23,};
var merged_data = [];
