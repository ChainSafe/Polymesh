var data = {lines:[
{"lineNum":"    1","line":"use crate::{asset, balances, identity, simple_token, utils};"},
{"lineNum":"    2","line":"use primitives::Key;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use codec::Encode;"},
{"lineNum":"    5","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"    6","line":"/// A runtime module template with necessary imports"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"/// Feel free to remove or edit this file as needed."},
{"lineNum":"    9","line":"/// If you change the name of this file, make sure to update its references in runtime/src/lib.rs"},
{"lineNum":"   10","line":"/// If you remove this file, you can remove those references"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"/// For more guidance on Substrate modules, see the example module"},
{"lineNum":"   13","line":"/// https://github.com/paritytech/substrate/blob/master/srml/example/src/lib.rs"},
{"lineNum":"   14","line":"use sr_primitives::traits::{CheckedAdd, CheckedDiv, CheckedMul, CheckedSub};"},
{"lineNum":"   15","line":"use srml_support::{decl_event, decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"   16","line":"use system::ensure_signed;"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"/// The module\'s configuration trait."},
{"lineNum":"   19","line":"pub trait Trait:"},
{"lineNum":"   20","line":"    asset::Trait"},
{"lineNum":"   21","line":"    + balances::Trait"},
{"lineNum":"   22","line":"    + simple_token::Trait"},
{"lineNum":"   23","line":"    + system::Trait"},
{"lineNum":"   24","line":"    + utils::Trait"},
{"lineNum":"   25","line":"    + timestamp::Trait"},
{"lineNum":"   26","line":"{"},
{"lineNum":"   27","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   28","line":"}"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"#[derive(codec::Encode, codec::Decode, Default, Clone, PartialEq, Debug)]","class":"linePartCov","hits":"15","order":"7104","possible_hits":"47",},
{"lineNum":"   31","line":"pub struct Dividend<U, V> {","class":"lineCov","hits":"1","order":"7125","possible_hits":"1",},
{"lineNum":"   32","line":"    /// Total amount to be distributed","class":"linePartCov","hits":"2","order":"7116","possible_hits":"4",},
{"lineNum":"   33","line":"    amount: U,","class":"linePartCov","hits":"5","order":"7128","possible_hits":"8",},
{"lineNum":"   34","line":"    /// Amount left to distribute","class":"linePartCov","hits":"2","order":"7117","possible_hits":"6",},
{"lineNum":"   35","line":"    amount_left: U,","class":"linePartCov","hits":"6","order":"7129","possible_hits":"9",},
{"lineNum":"   36","line":"    /// Whether the owner has claimed remaining funds","class":"linePartCov","hits":"2","order":"7118","possible_hits":"5",},
{"lineNum":"   37","line":"    remaining_claimed: bool,","class":"linePartCov","hits":"6","order":"7130","possible_hits":"9",},
{"lineNum":"   38","line":"    /// Whether claiming dividends is enabled","class":"linePartCov","hits":"1","order":"7119","possible_hits":"3",},
{"lineNum":"   39","line":"    active: bool,","class":"linePartCov","hits":"6","order":"7131","possible_hits":"9",},
{"lineNum":"   40","line":"    /// Whether the dividend was cancelled","class":"linePartCov","hits":"1","order":"7120","possible_hits":"3",},
{"lineNum":"   41","line":"    canceled: bool,","class":"linePartCov","hits":"6","order":"7132","possible_hits":"9",},
{"lineNum":"   42","line":"    /// An optional timestamp of payout start","class":"linePartCov","hits":"1","order":"7121","possible_hits":"4",},
{"lineNum":"   43","line":"    matures_at: Option<V>,","class":"linePartCov","hits":"7","order":"7133","possible_hits":"10",},
{"lineNum":"   44","line":"    /// An optional timestamp for payout end","class":"linePartCov","hits":"2","order":"7122","possible_hits":"6",},
{"lineNum":"   45","line":"    expires_at: Option<V>,","class":"linePartCov","hits":"7","order":"7134","possible_hits":"10",},
{"lineNum":"   46","line":"    /// The payout SimpleToken currency ticker. None means POLY","class":"linePartCov","hits":"2","order":"7123","possible_hits":"6",},
{"lineNum":"   47","line":"    payout_currency: Option<Vec<u8>>,","class":"linePartCov","hits":"7","order":"7135","possible_hits":"11",},
{"lineNum":"   48","line":"    /// The checkpoint","class":"linePartCov","hits":"2","order":"7124","possible_hits":"5",},
{"lineNum":"   49","line":"    checkpoint_id: u64,","class":"linePartCov","hits":"6","order":"7136","possible_hits":"9",},
{"lineNum":"   50","line":"}","class":"lineNoCov","hits":"0","possible_hits":"13",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"// This module\'s storage items."},
{"lineNum":"   53","line":"decl_storage! {","class":"linePartCov","hits":"15","order":"7099","possible_hits":"17",},
{"lineNum":"   54","line":"    trait Store for Module<T: Trait> as dividend {"},
{"lineNum":"   55","line":"        // Dividend records; (ticker, dividend ID) => dividend entry"},
{"lineNum":"   56","line":"        // Note: contrary to checkpoint IDs, dividend IDs are 0-indexed."},
{"lineNum":"   57","line":"        Dividends get(dividends): map (Vec<u8>, u32) => Dividend<T::TokenBalance, T::Moment>;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        // How many dividends were created for a ticker so far; (ticker) => count"},
{"lineNum":"   60","line":"        DividendCount get(dividend_count): map (Vec<u8>) => u32;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        // Payout flags, decide whether a user already was paid their dividend"},
{"lineNum":"   63","line":"        // (DID, ticker, dividend_id) -> whether they got their payout"},
{"lineNum":"   64","line":"        UserPayoutCompleted get(payout_completed): map (Vec<u8>, Vec<u8>, u32) => bool;"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}","class":"linePartCov","hits":"9","order":"7100","possible_hits":"20",},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"// The module\'s dispatchable functions."},
{"lineNum":"   69","line":"decl_module! {"},
{"lineNum":"   70","line":"    /// The module declaration."},
{"lineNum":"   71","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   72","line":"        // Initializing events"},
{"lineNum":"   73","line":"        // this is needed only if you are using events in your module"},
{"lineNum":"   74","line":"        fn deposit_event() = default;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"        /// Creates a new dividend entry without payout. Token must have at least one checkpoint."},
{"lineNum":"   77","line":"        /// None in payout_currency means POLY payout."},
{"lineNum":"   78","line":"        pub fn new(origin,"},
{"lineNum":"   79","line":"                   did: Vec<u8>,"},
{"lineNum":"   80","line":"                   amount: T::TokenBalance,"},
{"lineNum":"   81","line":"                   ticker: Vec<u8>,"},
{"lineNum":"   82","line":"                   matures_at: T::Moment,"},
{"lineNum":"   83","line":"                   expires_at: T::Moment,"},
{"lineNum":"   84","line":"                   payout_ticker: Vec<u8>,"},
{"lineNum":"   85","line":"                   checkpoint_id: u64"},
{"lineNum":"   86","line":"                  ) -> Result {"},
{"lineNum":"   87","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"7066","possible_hits":"5",},
{"lineNum":"   88","line":"            let ticker = utils::bytes_to_upper(ticker.as_slice());","class":"lineCov","hits":"2","order":"7067","possible_hits":"2",},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   91","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"1","order":"7068","possible_hits":"3",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"            // Check that sender owns the asset token"},
{"lineNum":"   94","line":"            ensure!(<asset::Module<T>>::_is_owner(&ticker, &did), \"User is not the owner of the asset\");","class":"linePartCov","hits":"2","order":"7069","possible_hits":"3",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"            // Check if sender has enough funds in payout currency"},
{"lineNum":"   97","line":"            // TODO: Change to checking DID balance"},
{"lineNum":"   98","line":"            let balance = if payout_ticker.is_empty() {","class":"linePartCov","hits":"2","order":"7070","possible_hits":"3",},
{"lineNum":"   99","line":"                // Check for POLY"},
{"lineNum":"  100","line":"                <T as utils::Trait>::balance_to_token_balance(<identity::DidRecords<T>>::get(&did).balance)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"            } else {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"                // Check for token"},
{"lineNum":"  103","line":"                <simple_token::BalanceOf<T>>::get((payout_ticker.clone(), did.clone()))","class":"lineCov","hits":"2","order":"7071","possible_hits":"2",},
{"lineNum":"  104","line":"            };"},
{"lineNum":"  105","line":"            ensure!(balance >= amount, \"Insufficient funds for payout\");","class":"linePartCov","hits":"1","order":"7072","possible_hits":"2",},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"            // Unpack the checkpoint ID, use the latest or create a new one, in that order"},
{"lineNum":"  108","line":"            let checkpoint_id = if checkpoint_id > 0 {","class":"linePartCov","hits":"2","order":"7073","possible_hits":"3",},
{"lineNum":"  109","line":"                checkpoint_id","class":"lineCov","hits":"1","order":"7074","possible_hits":"1",},
{"lineNum":"  110","line":"            } else {"},
{"lineNum":"  111","line":"                let count = <asset::TotalCheckpoints>::get(&ticker);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"                if count > 0 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"                    count","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"                } else {"},
{"lineNum":"  115","line":"                    <asset::Module<T>>::_create_checkpoint(&ticker)?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"                    1 // Caution: relies on 1-indexing","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  117","line":"                }"},
{"lineNum":"  118","line":"            };"},
{"lineNum":"  119","line":"            // Check if checkpoint exists"},
{"lineNum":"  120","line":"            ensure!(<asset::Module<T>>::total_checkpoints_of(&ticker) >= checkpoint_id,","class":"linePartCov","hits":"1","order":"7075","possible_hits":"2",},
{"lineNum":"  121","line":"            \"Checkpoint for dividend does not exist\");"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"            let now = <timestamp::Module<T>>::get();","class":"lineCov","hits":"2","order":"7076","possible_hits":"2",},
{"lineNum":"  124","line":"            let zero_ts = now - now; // A 0 timestamp","class":"lineCov","hits":"1","order":"7077","possible_hits":"1",},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"            // Check maturity/expiration dates"},
{"lineNum":"  127","line":"            match (&matures_at, &expires_at) {","class":"linePartCov","hits":"2","order":"7078","possible_hits":"5",},
{"lineNum":"  128","line":"                (_start, end) if  end == &zero_ts => {","class":"lineCov","hits":"1","order":"7079","possible_hits":"1",},
{"lineNum":"  129","line":"                },"},
{"lineNum":"  130","line":"                (start, end) if start == &zero_ts => {","class":"lineCov","hits":"1","order":"7080","possible_hits":"1",},
{"lineNum":"  131","line":"                    // Ends in the future"},
{"lineNum":"  132","line":"                    ensure!(end > &now, \"Dividend payout must end in the future\");","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  133","line":"                },"},
{"lineNum":"  134","line":"                (start, end) if start == &zero_ts && end == &zero_ts => {}","class":"linePartCov","hits":"1","order":"7081","possible_hits":"2",},
{"lineNum":"  135","line":"                (start, end) => {","class":"lineCov","hits":"1","order":"7082","possible_hits":"1",},
{"lineNum":"  136","line":"                    // Ends in the future"},
{"lineNum":"  137","line":"                    ensure!(end > &now, \"Dividend payout should end in the future\");","class":"linePartCov","hits":"1","order":"7083","possible_hits":"2",},
{"lineNum":"  138","line":"                    // Ends after start"},
{"lineNum":"  139","line":"                    ensure!(end > start, \"Dividend payout must end after it starts\");","class":"linePartCov","hits":"2","order":"7085","possible_hits":"3",},
{"lineNum":"  140","line":"                },"},
{"lineNum":"  141","line":"            }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"            // Subtract the amount"},
{"lineNum":"  144","line":"            let new_balance = balance.checked_sub(&amount).ok_or(\"Overflow calculating new owner balance\")?;","class":"lineCov","hits":"1","order":"7086","possible_hits":"1",},
{"lineNum":"  145","line":"            if payout_ticker.is_empty() {","class":"linePartCov","hits":"2","order":"7087","possible_hits":"3",},
{"lineNum":"  146","line":"                let new_balance = <T as utils::Trait>::token_balance_to_balance(new_balance);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"                <identity::DidRecords<T>>::mutate(&did, |record| record.balance = new_balance );","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  148","line":"            } else {"},
{"lineNum":"  149","line":"                <simple_token::BalanceOf<T>>::insert((payout_ticker.clone(), did.clone()), new_balance);","class":"lineCov","hits":"2","order":"7088","possible_hits":"2",},
{"lineNum":"  150","line":"            }"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"            // Insert dividend entry into storage"},
{"lineNum":"  153","line":"            let new_dividend = Dividend {","class":"lineCov","hits":"1","order":"7095","possible_hits":"1",},
{"lineNum":"  154","line":"                amount,","class":"lineCov","hits":"1","order":"7089","possible_hits":"1",},
{"lineNum":"  155","line":"                amount_left: amount,","class":"lineCov","hits":"1","order":"7090","possible_hits":"1",},
{"lineNum":"  156","line":"                remaining_claimed: false,"},
{"lineNum":"  157","line":"                active: false,"},
{"lineNum":"  158","line":"                canceled: false,"},
{"lineNum":"  159","line":"                matures_at: if matures_at > zero_ts { Some(matures_at) } else { None },","class":"lineCov","hits":"1","order":"7091","possible_hits":"1",},
{"lineNum":"  160","line":"                expires_at: if expires_at > zero_ts { Some(expires_at) } else { None },","class":"lineCov","hits":"1","order":"7092","possible_hits":"1",},
{"lineNum":"  161","line":"                payout_currency: if payout_ticker.is_empty() { None } else { Some(payout_ticker.clone())},","class":"lineCov","hits":"1","order":"7093","possible_hits":"1",},
{"lineNum":"  162","line":"                checkpoint_id,","class":"lineCov","hits":"1","order":"7094","possible_hits":"1",},
{"lineNum":"  163","line":"            };"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"            let dividend_id = Self::add_dividend_entry(&ticker, new_dividend)?;","class":"lineCov","hits":"1","order":"7096","possible_hits":"1",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"            // Dispatch event"},
{"lineNum":"  168","line":"            Self::deposit_event(RawEvent::DividendCreated(ticker, amount, dividend_id));","class":"lineCov","hits":"1","order":"7108","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"            Ok(())","class":"lineCov","hits":"1","order":"7109","possible_hits":"1",},
{"lineNum":"  171","line":"        }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"        /// Lets the owner cancel a dividend before start date or activation"},
{"lineNum":"  174","line":"        pub fn cancel(origin, did: Vec<u8>, ticker: Vec<u8>, dividend_id: u32) -> Result {"},
{"lineNum":"  175","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  178","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"            // Check that sender owns the asset token"},
{"lineNum":"  181","line":"            ensure!(<asset::Module<T>>::_is_owner(&ticker, &did), \"User is not the owner of the asset\");"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"            // Check that the dividend has not started yet or is not active"},
{"lineNum":"  184","line":"            let entry: Dividend<_, _> = Self::get_dividend(&ticker, dividend_id).ok_or(\"Dividend not found\")?;"},
{"lineNum":"  185","line":"            let now = <timestamp::Module<T>>::get();"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"            let starts_in_future = if let Some(ref start) = entry.matures_at {"},
{"lineNum":"  188","line":"                (*start) > now"},
{"lineNum":"  189","line":"            } else {"},
{"lineNum":"  190","line":"                false"},
{"lineNum":"  191","line":"            };"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"            ensure!(starts_in_future || !entry.active, \"Cancellable dividend must mature in the future or be inactive\");"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"            // Flip `canceled`"},
{"lineNum":"  196","line":"            <Dividends<T>>::mutate((ticker.clone(), dividend_id), |entry| -> Result {"},
{"lineNum":"  197","line":"                entry.canceled = true;"},
{"lineNum":"  198","line":"                Ok(())"},
{"lineNum":"  199","line":"            })?;"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"            // Pay amount back to owner"},
{"lineNum":"  202","line":"            if let Some(ref payout_ticker) = entry.payout_currency {"},
{"lineNum":"  203","line":"                <simple_token::BalanceOf<T>>::mutate((payout_ticker.clone(), did.clone()), |balance: &mut T::TokenBalance| -> Result {"},
{"lineNum":"  204","line":"                    *balance  = balance"},
{"lineNum":"  205","line":"                        .checked_add(&entry.amount)"},
{"lineNum":"  206","line":"                        .ok_or(\"Could not add amount back to asset owner account\")?;"},
{"lineNum":"  207","line":"                    Ok(())"},
{"lineNum":"  208","line":"                })?;"},
{"lineNum":"  209","line":"            } else {"},
{"lineNum":"  210","line":"                <identity::DidRecords<T>>::mutate(&did, |record| -> Result {"},
{"lineNum":"  211","line":"                    let new_balance = record.balance.checked_add(&<T as utils::Trait>::token_balance_to_balance(entry.amount)).ok_or(\"Could not add amount back to asset owner DID\")?;"},
{"lineNum":"  212","line":"                    record.balance = new_balance;"},
{"lineNum":"  213","line":"                    Ok(())"},
{"lineNum":"  214","line":"                })?;"},
{"lineNum":"  215","line":"            }"},
{"lineNum":"  216","line":"            Ok(())"},
{"lineNum":"  217","line":"        }"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        /// Enables withdrawal of dividend funds for asset `ticker`."},
{"lineNum":"  220","line":"        pub fn activate(origin, did: Vec<u8>, ticker: Vec<u8>, dividend_id: u32) -> Result {"},
{"lineNum":"  221","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"7142","possible_hits":"5",},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  224","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"2","order":"7143","possible_hits":"4",},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"            // Check that sender owns the asset token"},
{"lineNum":"  227","line":"            ensure!(<asset::Module<T>>::_is_owner(&ticker, &did), \"User is not the owner of the asset\");","class":"linePartCov","hits":"2","order":"7144","possible_hits":"3",},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            // Check that the dividend exists"},
{"lineNum":"  230","line":"            let ticker_dividend_id = (ticker.clone(), dividend_id);","class":"lineCov","hits":"2","order":"7145","possible_hits":"2",},
{"lineNum":"  231","line":"            ensure!(<Dividends<T>>::exists(&ticker_dividend_id), \"No dividend entry for supplied ticker and ID\");","class":"linePartCov","hits":"1","order":"7146","possible_hits":"3",},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"            // Flip `active`"},
{"lineNum":"  234","line":"            <Dividends<T>>::mutate(&ticker_dividend_id, |entry| -> Result {","class":"linePartCov","hits":"3","order":"7147","possible_hits":"4",},
{"lineNum":"  235","line":"                entry.active = true;","class":"lineCov","hits":"1","order":"7148","possible_hits":"1",},
{"lineNum":"  236","line":"                Ok(())","class":"lineCov","hits":"1","order":"7149","possible_hits":"1",},
{"lineNum":"  237","line":"            })?;","class":"linePartCov","hits":"2","order":"7150","possible_hits":"4",},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            // Dispatch event"},
{"lineNum":"  240","line":"            Self::deposit_event(RawEvent::DividendActivated(ticker, dividend_id));","class":"lineCov","hits":"1","order":"7151","possible_hits":"1",},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"            Ok(())","class":"lineCov","hits":"1","order":"7152","possible_hits":"1",},
{"lineNum":"  243","line":"        }"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"        /// Withdraws from a dividend the adequate share of the `amount` field. All dividend shares"},
{"lineNum":"  246","line":"        /// are rounded by truncation (down to first integer below)"},
{"lineNum":"  247","line":"        pub fn claim(origin, did: Vec<u8>, ticker: Vec<u8>, dividend_id: u32) -> Result {"},
{"lineNum":"  248","line":"            let sender = ensure_signed(origin)?;","class":"linePartCov","hits":"3","order":"7158","possible_hits":"5",},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  251","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");","class":"linePartCov","hits":"2","order":"7159","possible_hits":"4",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"            // Check if sender wasn\'t already paid their share"},
{"lineNum":"  254","line":"            ensure!(!<UserPayoutCompleted>::get((did.clone(), ticker.clone(), dividend_id)), \"User was already paid their share\");","class":"linePartCov","hits":"2","order":"7160","possible_hits":"3",},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"            // Look dividend entry up"},
{"lineNum":"  257","line":"            let dividend = Self::get_dividend(&ticker, dividend_id).ok_or(\"Dividend not found\")?;","class":"linePartCov","hits":"2","order":"7161","possible_hits":"3",},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"            let balance_at_checkpoint ="},
{"lineNum":"  260","line":"                <asset::Module<T>>::get_balance_at(&ticker, &did, dividend.checkpoint_id);","class":"lineCov","hits":"2","order":"7162","possible_hits":"2",},
{"lineNum":"  261","line":""},
{"lineNum":"  262","line":"            // Check if the owner hadn\'t yanked the remaining amount out"},
{"lineNum":"  263","line":"            ensure!(!dividend.remaining_claimed, \"The remaining payout funds were already claimed\");","class":"linePartCov","hits":"1","order":"7172","possible_hits":"3",},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            // Check if the dividend is active"},
{"lineNum":"  266","line":"            ensure!(dividend.active, \"Dividend not active\");","class":"linePartCov","hits":"1","order":"7173","possible_hits":"2",},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"            // Check if the dividend was not canceled"},
{"lineNum":"  269","line":"            ensure!(!dividend.canceled, \"Dividend was canceled\");","class":"linePartCov","hits":"1","order":"7174","possible_hits":"2",},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"            let now = <timestamp::Module<T>>::get();","class":"lineCov","hits":"2","order":"7175","possible_hits":"2",},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"            // Check if the current time is within maturity/expiration bounds"},
{"lineNum":"  274","line":"            if let Some(start) = dividend.matures_at.as_ref() {","class":"lineCov","hits":"2","order":"7176","possible_hits":"2",},
{"lineNum":"  275","line":"                ensure!(now > *start, \"Attempted payout before maturity\");","class":"linePartCov","hits":"1","order":"7177","possible_hits":"2",},
{"lineNum":"  276","line":"            }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"            if let Some(end) = dividend.expires_at.as_ref() {","class":"lineCov","hits":"2","order":"7178","possible_hits":"2",},
{"lineNum":"  279","line":"                ensure!(*end > now, \"Attempted payout after expiration\");","class":"linePartCov","hits":"1","order":"7179","possible_hits":"2",},
{"lineNum":"  280","line":"            }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"            // Compute the share"},
{"lineNum":"  283","line":"            ensure!(<asset::Tokens<T>>::exists(&ticker), \"Dividend token entry not found\");","class":"linePartCov","hits":"1","order":"7180","possible_hits":"2",},
{"lineNum":"  284","line":"            let supply_at_checkpoint = <asset::CheckpointTotalSupply<T>>::get((ticker.clone(), dividend.checkpoint_id));","class":"lineCov","hits":"2","order":"7181","possible_hits":"2",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"            let balance_amount_product = balance_at_checkpoint","class":"linePartCov","hits":"2","order":"7182","possible_hits":"3",},
{"lineNum":"  287","line":"                .checked_mul(&dividend.amount)"},
{"lineNum":"  288","line":"                .ok_or(\"multiplying balance and total payout amount failed\")?;","class":"linePartCov","hits":"1","order":"7183","possible_hits":"2",},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"            let share = balance_amount_product","class":"linePartCov","hits":"2","order":"7184","possible_hits":"3",},
{"lineNum":"  291","line":"                .checked_div(&supply_at_checkpoint)"},
{"lineNum":"  292","line":"                .ok_or(\"balance_amount_product division failed\")?;","class":"linePartCov","hits":"1","order":"7185","possible_hits":"2",},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"            // Adjust the paid_out amount"},
{"lineNum":"  295","line":"            <Dividends<T>>::mutate((ticker.clone(), dividend_id), |entry| -> Result {","class":"linePartCov","hits":"2","order":"7186","possible_hits":"3",},
{"lineNum":"  296","line":"                entry.amount_left = entry.amount_left.checked_sub(&share).ok_or(\"Could not increase paid_out\")?;","class":"linePartCov","hits":"1","order":"7187","possible_hits":"2",},
{"lineNum":"  297","line":"                Ok(())","class":"lineCov","hits":"1","order":"7188","possible_hits":"1",},
{"lineNum":"  298","line":"            })?;","class":"linePartCov","hits":"3","order":"7189","possible_hits":"5",},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"            // Perform the payout in designated tokens or base currency depending on setting"},
{"lineNum":"  301","line":"            if let Some(payout_ticker) = dividend.payout_currency.as_ref() {","class":"linePartCov","hits":"3","order":"7190","possible_hits":"4",},
{"lineNum":"  302","line":"                <simple_token::BalanceOf<T>>::mutate(","class":"linePartCov","hits":"2","order":"7193","possible_hits":"3",},
{"lineNum":"  303","line":"                    (payout_ticker.clone(), did.clone()),","class":"linePartCov","hits":"1","order":"7191","possible_hits":"2",},
{"lineNum":"  304","line":"                    |balance| -> Result {","class":"lineCov","hits":"2","order":"7192","possible_hits":"2",},
{"lineNum":"  305","line":"                        *balance = balance","class":"linePartCov","hits":"3","order":"7194","possible_hits":"4",},
{"lineNum":"  306","line":"                            .checked_add(&share)","class":"lineCov","hits":"1","order":"7195","possible_hits":"1",},
{"lineNum":"  307","line":"                            .ok_or(\"Could not add share to sender balance\")?;","class":"linePartCov","hits":"1","order":"7196","possible_hits":"3",},
{"lineNum":"  308","line":"                        Ok(())","class":"lineCov","hits":"1","order":"7197","possible_hits":"1",},
{"lineNum":"  309","line":"                    })?;","class":"linePartCov","hits":"3","order":"7198","possible_hits":"5",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"            } else {"},
{"lineNum":"  312","line":"                // Convert to balances::Trait::Balance"},
{"lineNum":"  313","line":"                let share = <T as utils::Trait>::token_balance_to_balance(share);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  314","line":"                <identity::DidRecords<T>>::mutate(&did, |record| -> Result {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  315","line":"                    let new_balance = record.balance.checked_add(&share).ok_or(\"Could not add amount back to asset owner DID\")?;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  316","line":"                    record.balance = new_balance;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"                    Ok(())","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"                })?;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  319","line":"            }"},
{"lineNum":"  320","line":"            // Create payout entry"},
{"lineNum":"  321","line":"            <UserPayoutCompleted>::insert((did.clone(), ticker.clone(), dividend_id), true);","class":"lineCov","hits":"1","order":"7199","possible_hits":"1",},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"            // Dispatch event"},
{"lineNum":"  324","line":"            Self::deposit_event(RawEvent::DividendPaidOutToUser(did, ticker, dividend_id, share));","class":"lineCov","hits":"1","order":"7200","possible_hits":"1",},
{"lineNum":"  325","line":"            Ok(())","class":"lineCov","hits":"1","order":"7201","possible_hits":"1",},
{"lineNum":"  326","line":"        }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"        /// After a dividend had expired, collect the remaining amount to owner address"},
{"lineNum":"  329","line":"        pub fn claim_unclaimed(origin, did: Vec<u8>, ticker: Vec<u8>, dividend_id: u32) -> Result {"},
{"lineNum":"  330","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"  331","line":""},
{"lineNum":"  332","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"  333","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"            // Check that sender owns the asset token"},
{"lineNum":"  336","line":"            ensure!(<asset::Module<T>>::_is_owner(&ticker, &did), \"User is not the owner of the asset\");"},
{"lineNum":"  337","line":""},
{"lineNum":"  338","line":"            let entry = Self::get_dividend(&ticker, dividend_id).ok_or(\"Could not retrieve dividend\")?;"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"            // Check that the expiry date had passed"},
{"lineNum":"  341","line":"            let now = <timestamp::Module<T>>::get();"},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"            if let Some(ref end) = entry.expires_at {"},
{"lineNum":"  344","line":"                ensure!(*end < now, \"Dividend not finished for returning unclaimed payout\");"},
{"lineNum":"  345","line":"            } else {"},
{"lineNum":"  346","line":"                return Err(\"Claiming unclaimed payouts requires an end date\");"},
{"lineNum":"  347","line":"            }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"            // Transfer the computed amount"},
{"lineNum":"  351","line":"            if let Some(ref payout_ticker) = entry.payout_currency {"},
{"lineNum":"  352","line":"                <simple_token::BalanceOf<T>>::mutate((payout_ticker.clone(), did.clone()), |balance: &mut T::TokenBalance| -> Result {"},
{"lineNum":"  353","line":"                    let new_balance = balance.checked_add(&entry.amount_left).ok_or(\"Could not add amount back to asset owner DID\")?;"},
{"lineNum":"  354","line":"                    *balance  = new_balance;"},
{"lineNum":"  355","line":"                    Ok(())"},
{"lineNum":"  356","line":"                })?;"},
{"lineNum":"  357","line":"            } else {"},
{"lineNum":"  358","line":"                <identity::DidRecords<T>>::mutate(&did, |record| -> Result {"},
{"lineNum":"  359","line":"                    let new_balance = record.balance.checked_add(&<T as utils::Trait>::token_balance_to_balance(entry.amount_left)).ok_or(\"Could not add amount back to asset owner DID\")?;"},
{"lineNum":"  360","line":"                    record.balance = new_balance;"},
{"lineNum":"  361","line":"                    Ok(())"},
{"lineNum":"  362","line":"                })?;"},
{"lineNum":"  363","line":"            }"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"            // Set amount_left, flip remaining_claimed"},
{"lineNum":"  366","line":"            <Dividends<T>>::mutate((ticker.clone(), dividend_id), |entry| -> Result {"},
{"lineNum":"  367","line":"                entry.amount_left = 0.into();"},
{"lineNum":"  368","line":"                entry.remaining_claimed = true;"},
{"lineNum":"  369","line":"                Ok(())"},
{"lineNum":"  370","line":"            })?;"},
{"lineNum":"  371","line":""},
{"lineNum":"  372","line":"            Self::deposit_event(RawEvent::DividendRemainingClaimed(ticker, dividend_id, entry.amount_left));"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"            Ok(())"},
{"lineNum":"  375","line":"        }"},
{"lineNum":"  376","line":"    }"},
{"lineNum":"  377","line":"}"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"decl_event!("},
{"lineNum":"  380","line":"    pub enum Event<T>"},
{"lineNum":"  381","line":"    where"},
{"lineNum":"  382","line":"        TokenBalance = <T as utils::Trait>::TokenBalance,"},
{"lineNum":"  383","line":"    {"},
{"lineNum":"  384","line":"        // ticker, amount, dividend ID"},
{"lineNum":"  385","line":"        DividendCreated(Vec<u8>, TokenBalance, u32),"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"        // ticker, dividend ID"},
{"lineNum":"  388","line":"        DividendActivated(Vec<u8>, u32),"},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"        // who, ticker, dividend ID, share"},
{"lineNum":"  391","line":"        DividendPaidOutToUser(Vec<u8>, Vec<u8>, u32, TokenBalance),"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"        // ticker, dividend ID, amount"},
{"lineNum":"  394","line":"        DividendRemainingClaimed(Vec<u8>, u32, TokenBalance),"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":");"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"  399","line":"    /// A helper method for dividend creation. Returns dividend ID"},
{"lineNum":"  400","line":"    /// #[inline]"},
{"lineNum":"  401","line":"    fn add_dividend_entry(","class":"linePartCov","hits":"1","order":"7097","possible_hits":"2",},
{"lineNum":"  402","line":"        ticker: &Vec<u8>,"},
{"lineNum":"  403","line":"        d: Dividend<T::TokenBalance, T::Moment>,"},
{"lineNum":"  404","line":"    ) -> core::result::Result<u32, &\'static str> {"},
{"lineNum":"  405","line":"        let old_count = <DividendCount>::get(ticker);","class":"lineCov","hits":"2","order":"7098","possible_hits":"2",},
{"lineNum":"  406","line":"        let new_count = old_count","class":"linePartCov","hits":"2","order":"7101","possible_hits":"3",},
{"lineNum":"  407","line":"            .checked_add(1)"},
{"lineNum":"  408","line":"            .ok_or(\"Could not add 1 to dividend count\")?;","class":"linePartCov","hits":"1","order":"7102","possible_hits":"3",},
{"lineNum":"  409","line":""},
{"lineNum":"  410","line":"        <Dividends<T>>::insert((ticker.clone(), old_count), d);","class":"lineCov","hits":"1","order":"7103","possible_hits":"1",},
{"lineNum":"  411","line":"        <DividendCount>::insert(ticker, new_count);","class":"lineCov","hits":"1","order":"7105","possible_hits":"1",},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"        Ok(old_count)","class":"lineCov","hits":"1","order":"7106","possible_hits":"1",},
{"lineNum":"  414","line":"    }","class":"linePartCov","hits":"2","order":"7107","possible_hits":"3",},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    /// Retrieves a dividend checking that it exists beforehand."},
{"lineNum":"  417","line":"    pub fn get_dividend(","class":"linePartCov","hits":"1","order":"7112","possible_hits":"2",},
{"lineNum":"  418","line":"        ticker: &[u8],"},
{"lineNum":"  419","line":"        dividend_id: u32,"},
{"lineNum":"  420","line":"    ) -> Option<Dividend<T::TokenBalance, T::Moment>> {"},
{"lineNum":"  421","line":"        // Check that the dividend entry exists"},
{"lineNum":"  422","line":"        let ticker_div_id = (ticker.to_vec(), dividend_id);","class":"lineCov","hits":"2","order":"7113","possible_hits":"2",},
{"lineNum":"  423","line":"        if <Dividends<T>>::exists(&ticker_div_id) {","class":"linePartCov","hits":"1","order":"7114","possible_hits":"2",},
{"lineNum":"  424","line":"            Some(<Dividends<T>>::get(&ticker_div_id))","class":"lineCov","hits":"1","order":"7115","possible_hits":"1",},
{"lineNum":"  425","line":"        } else {"},
{"lineNum":"  426","line":"            None","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        }"},
{"lineNum":"  428","line":"    }","class":"linePartCov","hits":"1","order":"7126","possible_hits":"2",},
{"lineNum":"  429","line":"}"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"/// tests for this module"},
{"lineNum":"  432","line":"#[cfg(test)]"},
{"lineNum":"  433","line":"mod tests {"},
{"lineNum":"  434","line":"    use super::*;"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    use chrono::{prelude::*, Duration};"},
{"lineNum":"  437","line":"    use lazy_static::lazy_static;"},
{"lineNum":"  438","line":"    use sr_io::with_externalities;"},
{"lineNum":"  439","line":"    use sr_primitives::{"},
{"lineNum":"  440","line":"        testing::{Header, UintAuthorityId},"},
{"lineNum":"  441","line":"        traits::{BlakeTwo256, ConvertInto, IdentityLookup, OpaqueKeys},"},
{"lineNum":"  442","line":"        Perbill,"},
{"lineNum":"  443","line":"    };"},
{"lineNum":"  444","line":"    use srml_support::traits::Currency;"},
{"lineNum":"  445","line":"    use srml_support::{assert_ok, impl_outer_origin, parameter_types};"},
{"lineNum":"  446","line":"    use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"    use std::{"},
{"lineNum":"  449","line":"        collections::HashMap,"},
{"lineNum":"  450","line":"        sync::{Arc, Mutex},"},
{"lineNum":"  451","line":"    };"},
{"lineNum":"  452","line":""},
{"lineNum":"  453","line":"    use crate::{"},
{"lineNum":"  454","line":"        asset::SecurityToken, balances, exemption, general_tm, identity, percentage_tm, registry,"},
{"lineNum":"  455","line":"        simple_token::SimpleTokenRecord,"},
{"lineNum":"  456","line":"    };"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    type SessionIndex = u32;"},
{"lineNum":"  459","line":"    type AuthorityId = u64;"},
{"lineNum":"  460","line":"    type BlockNumber = u64;"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"    pub struct TestOnSessionEnding;"},
{"lineNum":"  463","line":"    impl session::OnSessionEnding<AuthorityId> for TestOnSessionEnding {"},
{"lineNum":"  464","line":"        fn on_session_ending(_: SessionIndex, _: SessionIndex) -> Option<Vec<AuthorityId>> {"},
{"lineNum":"  465","line":"            None"},
{"lineNum":"  466","line":"        }"},
{"lineNum":"  467","line":"    }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    pub struct TestSessionHandler;"},
{"lineNum":"  470","line":"    impl session::SessionHandler<AuthorityId> for TestSessionHandler {"},
{"lineNum":"  471","line":"        fn on_new_session<Ks: OpaqueKeys>("},
{"lineNum":"  472","line":"            _changed: bool,"},
{"lineNum":"  473","line":"            _validators: &[(AuthorityId, Ks)],"},
{"lineNum":"  474","line":"            _queued_validators: &[(AuthorityId, Ks)],"},
{"lineNum":"  475","line":"        ) {"},
{"lineNum":"  476","line":"        }"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"        fn on_disabled(_validator_index: usize) {}"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"        fn on_genesis_session<Ks: OpaqueKeys>(_validators: &[(AuthorityId, Ks)]) {}"},
{"lineNum":"  481","line":"    }"},
{"lineNum":"  482","line":""},
{"lineNum":"  483","line":"    impl_outer_origin! {","class":"lineCov","hits":"1","order":"6572","possible_hits":"1",},
{"lineNum":"  484","line":"        pub enum Origin for Test {}"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  488","line":"    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  489","line":"    // configuration traits of modules we want to use."},
{"lineNum":"  490","line":"    #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  491","line":"    pub struct Test;"},
{"lineNum":"  492","line":"    parameter_types! {"},
{"lineNum":"  493","line":"        pub const BlockHashCount: u32 = 250;"},
{"lineNum":"  494","line":"        pub const MaximumBlockWeight: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  495","line":"        pub const MaximumBlockLength: u32 = 4 * 1024 * 1024;"},
{"lineNum":"  496","line":"        pub const AvailableBlockRatio: Perbill = Perbill::from_percent(75);"},
{"lineNum":"  497","line":"    }"},
{"lineNum":"  498","line":"    impl system::Trait for Test {"},
{"lineNum":"  499","line":"        type Origin = Origin;"},
{"lineNum":"  500","line":"        type Call = ();"},
{"lineNum":"  501","line":"        type Index = u64;"},
{"lineNum":"  502","line":"        type BlockNumber = u64;"},
{"lineNum":"  503","line":"        type Hash = H256;"},
{"lineNum":"  504","line":"        type Hashing = BlakeTwo256;"},
{"lineNum":"  505","line":"        type AccountId = u64;"},
{"lineNum":"  506","line":"        type Lookup = IdentityLookup<u64>;"},
{"lineNum":"  507","line":"        type WeightMultiplierUpdate = ();"},
{"lineNum":"  508","line":"        type Header = Header;"},
{"lineNum":"  509","line":"        type Event = ();"},
{"lineNum":"  510","line":"        type BlockHashCount = BlockHashCount;"},
{"lineNum":"  511","line":"        type MaximumBlockWeight = MaximumBlockWeight;"},
{"lineNum":"  512","line":"        type AvailableBlockRatio = AvailableBlockRatio;"},
{"lineNum":"  513","line":"        type MaximumBlockLength = MaximumBlockLength;"},
{"lineNum":"  514","line":"        type Version = ();"},
{"lineNum":"  515","line":"    }"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"    parameter_types! {"},
{"lineNum":"  518","line":"        pub const Period: BlockNumber = 1;"},
{"lineNum":"  519","line":"        pub const Offset: BlockNumber = 0;"},
{"lineNum":"  520","line":"        pub const ExistentialDeposit: u64 = 0;"},
{"lineNum":"  521","line":"        pub const TransferFee: u64 = 0;"},
{"lineNum":"  522","line":"        pub const CreationFee: u64 = 0;"},
{"lineNum":"  523","line":"        pub const TransactionBaseFee: u64 = 0;"},
{"lineNum":"  524","line":"        pub const TransactionByteFee: u64 = 0;"},
{"lineNum":"  525","line":"    }"},
{"lineNum":"  526","line":""},
{"lineNum":"  527","line":"    parameter_types! {"},
{"lineNum":"  528","line":"        pub const DisabledValidatorsThreshold: Perbill = Perbill::from_percent(33);"},
{"lineNum":"  529","line":"    }"},
{"lineNum":"  530","line":""},
{"lineNum":"  531","line":"    impl session::Trait for Test {"},
{"lineNum":"  532","line":"        type OnSessionEnding = TestOnSessionEnding;"},
{"lineNum":"  533","line":"        type Keys = UintAuthorityId;"},
{"lineNum":"  534","line":"        type ShouldEndSession = session::PeriodicSessions<Period, Offset>;"},
{"lineNum":"  535","line":"        type SessionHandler = TestSessionHandler;"},
{"lineNum":"  536","line":"        type Event = ();"},
{"lineNum":"  537","line":"        type ValidatorId = AuthorityId;"},
{"lineNum":"  538","line":"        type ValidatorIdOf = ConvertInto;"},
{"lineNum":"  539","line":"        type SelectInitialValidators = ();"},
{"lineNum":"  540","line":"        type DisabledValidatorsThreshold = DisabledValidatorsThreshold;"},
{"lineNum":"  541","line":"    }"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"    impl session::historical::Trait for Test {"},
{"lineNum":"  544","line":"        type FullIdentification = ();"},
{"lineNum":"  545","line":"        type FullIdentificationOf = ();"},
{"lineNum":"  546","line":"    }"},
{"lineNum":"  547","line":""},
{"lineNum":"  548","line":"    impl balances::Trait for Test {"},
{"lineNum":"  549","line":"        type Balance = u128;"},
{"lineNum":"  550","line":"        type OnFreeBalanceZero = ();"},
{"lineNum":"  551","line":"        type OnNewAccount = ();"},
{"lineNum":"  552","line":"        type Event = ();"},
{"lineNum":"  553","line":"        type TransactionPayment = ();"},
{"lineNum":"  554","line":"        type DustRemoval = ();"},
{"lineNum":"  555","line":"        type TransferPayment = ();"},
{"lineNum":"  556","line":"        type ExistentialDeposit = ExistentialDeposit;"},
{"lineNum":"  557","line":"        type TransferFee = TransferFee;"},
{"lineNum":"  558","line":"        type CreationFee = CreationFee;"},
{"lineNum":"  559","line":"        type TransactionBaseFee = TransactionBaseFee;"},
{"lineNum":"  560","line":"        type TransactionByteFee = TransactionByteFee;"},
{"lineNum":"  561","line":"        type WeightToFee = ConvertInto;"},
{"lineNum":"  562","line":"        type Identity = identity::Module<Test>;"},
{"lineNum":"  563","line":"    }"},
{"lineNum":"  564","line":""},
{"lineNum":"  565","line":"    impl simple_token::Trait for Test {"},
{"lineNum":"  566","line":"        type Event = ();"},
{"lineNum":"  567","line":"    }"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"    impl asset::Trait for Test {"},
{"lineNum":"  570","line":"        type Event = ();"},
{"lineNum":"  571","line":"        type Currency = balances::Module<Test>;"},
{"lineNum":"  572","line":"    }"},
{"lineNum":"  573","line":""},
{"lineNum":"  574","line":"    impl identity::Trait for Test {"},
{"lineNum":"  575","line":"        type Event = ();"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    impl exemption::Trait for Test {"},
{"lineNum":"  579","line":"        type Event = ();"},
{"lineNum":"  580","line":"        type Asset = Module<Test>;"},
{"lineNum":"  581","line":"    }"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"    impl general_tm::Trait for Test {"},
{"lineNum":"  584","line":"        type Event = ();"},
{"lineNum":"  585","line":"        type Asset = Module<Test>;"},
{"lineNum":"  586","line":"    }"},
{"lineNum":"  587","line":""},
{"lineNum":"  588","line":"    impl percentage_tm::Trait for Test {"},
{"lineNum":"  589","line":"        type Event = ();"},
{"lineNum":"  590","line":"    }"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"    parameter_types! {"},
{"lineNum":"  593","line":"        pub const MinimumPeriod: u64 = 3;"},
{"lineNum":"  594","line":"    }"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"    impl timestamp::Trait for Test {"},
{"lineNum":"  597","line":"        type Moment = u64;"},
{"lineNum":"  598","line":"        type OnTimestampSet = ();"},
{"lineNum":"  599","line":"        type MinimumPeriod = MinimumPeriod;"},
{"lineNum":"  600","line":"    }"},
{"lineNum":"  601","line":""},
{"lineNum":"  602","line":"    impl utils::Trait for Test {"},
{"lineNum":"  603","line":"        type TokenBalance = u128;"},
{"lineNum":"  604","line":"        fn as_u128(v: Self::TokenBalance) -> u128 {","class":"lineCov","hits":"1","order":"6603","possible_hits":"1",},
{"lineNum":"  605","line":"            v","class":"lineCov","hits":"1","order":"6604","possible_hits":"1",},
{"lineNum":"  606","line":"        }","class":"linePartCov","hits":"1","order":"6605","possible_hits":"2",},
{"lineNum":"  607","line":"        fn as_tb(v: u128) -> Self::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  608","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  609","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  610","line":"        fn token_balance_to_balance(v: Self::TokenBalance) -> <Self as balances::Trait>::Balance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  611","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  612","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  613","line":"        fn balance_to_token_balance(v: <Self as balances::Trait>::Balance) -> Self::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  615","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  616","line":"        fn validator_id_to_account_id(v: <Self as session::Trait>::ValidatorId) -> Self::AccountId {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  617","line":"            v","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"    impl registry::Trait for Test {}"},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"    impl Trait for Test {"},
{"lineNum":"  624","line":"        type Event = ();"},
{"lineNum":"  625","line":"    }"},
{"lineNum":"  626","line":"    impl asset::AssetTrait<<Test as utils::Trait>::TokenBalance> for Module<Test> {"},
{"lineNum":"  627","line":"        fn is_owner(ticker: &Vec<u8>, sender_did: &Vec<u8>) -> bool {","class":"linePartCov","hits":"1","order":"6855","possible_hits":"2",},
{"lineNum":"  628","line":"            if let Some(token) = TOKEN_MAP.lock().unwrap().get(ticker) {","class":"linePartCov","hits":"3","order":"6856","possible_hits":"4",},
{"lineNum":"  629","line":"                token.owner_did == *sender_did","class":"lineCov","hits":"1","order":"6861","possible_hits":"1",},
{"lineNum":"  630","line":"            } else {"},
{"lineNum":"  631","line":"                false","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"            }"},
{"lineNum":"  633","line":"        }","class":"linePartCov","hits":"1","order":"6862","possible_hits":"2",},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"        fn _mint_from_sto("},
{"lineNum":"  636","line":"            _ticker: &[u8],"},
{"lineNum":"  637","line":"            _sender_did: &Vec<u8>,"},
{"lineNum":"  638","line":"            _tokens_purchased: <Test as utils::Trait>::TokenBalance,"},
{"lineNum":"  639","line":"        ) -> Result {"},
{"lineNum":"  640","line":"            unimplemented!();"},
{"lineNum":"  641","line":"        }"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"        /// Get the asset `id` balance of `who`."},
{"lineNum":"  644","line":"        fn balance(_ticker: &[u8], _did: Vec<u8>) -> <Test as utils::Trait>::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  645","line":"            unimplemented!();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  646","line":"        }","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"        // Get the total supply of an asset `id`"},
{"lineNum":"  649","line":"        fn total_supply(_ticker: &[u8]) -> <Test as utils::Trait>::TokenBalance {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"            unimplemented!();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  651","line":"        }"},
{"lineNum":"  652","line":"    }"},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"    lazy_static! {"},
{"lineNum":"  655","line":"        static ref TOKEN_MAP: Arc<"},
{"lineNum":"  656","line":"            Mutex<"},
{"lineNum":"  657","line":"            HashMap<"},
{"lineNum":"  658","line":"            Vec<u8>,"},
{"lineNum":"  659","line":"            SecurityToken<"},
{"lineNum":"  660","line":"                <Test as utils::Trait>::TokenBalance,"},
{"lineNum":"  661","line":"                >,"},
{"lineNum":"  662","line":"                >,"},
{"lineNum":"  663","line":"                >,"},
{"lineNum":"  664","line":"                > = Arc::new(Mutex::new(HashMap::new()));","class":"lineCov","hits":"1","order":"6807","possible_hits":"1",},
{"lineNum":"  665","line":"        /// Because Rust\'s Mutex is not recursive a second symbolic lock is necessary"},
{"lineNum":"  666","line":"        static ref TOKEN_MAP_OUTER_LOCK: Arc<Mutex<()>> = Arc::new(Mutex::new(()));","class":"lineCov","hits":"1","order":"6730","possible_hits":"1",},
{"lineNum":"  667","line":"    }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"    type DividendModule = Module<Test>;"},
{"lineNum":"  670","line":"    type Balances = balances::Module<Test>;"},
{"lineNum":"  671","line":"    type Asset = asset::Module<Test>;"},
{"lineNum":"  672","line":"    type SimpleToken = simple_token::Module<Test>;"},
{"lineNum":"  673","line":"    type Identity = identity::Module<Test>;"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    /// Build a genesis identity instance owned by the specified account"},
{"lineNum":"  676","line":"    fn identity_owned_by(id: u64) -> sr_io::TestExternalities<Blake2Hasher> {","class":"linePartCov","hits":"1","order":"6527","possible_hits":"2",},
{"lineNum":"  677","line":"        let mut t = system::GenesisConfig::default()","class":"lineCov","hits":"2","order":"6528","possible_hits":"2",},
{"lineNum":"  678","line":"            .build_storage::<Test>()"},
{"lineNum":"  679","line":"            .unwrap();","class":"lineCov","hits":"1","order":"6529","possible_hits":"1",},
{"lineNum":"  680","line":"        identity::GenesisConfig::<Test> {","class":"lineCov","hits":"1","order":"6531","possible_hits":"1",},
{"lineNum":"  681","line":"            owner: id,","class":"lineCov","hits":"1","order":"6530","possible_hits":"1",},
{"lineNum":"  682","line":"            did_creation_fee: 250,"},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":"        .assimilate_storage(&mut t)"},
{"lineNum":"  685","line":"        .unwrap();"},
{"lineNum":"  686","line":"        sr_io::TestExternalities::new(t)","class":"lineCov","hits":"1","order":"6532","possible_hits":"1",},
{"lineNum":"  687","line":"    }","class":"lineCov","hits":"1","order":"6533","possible_hits":"1",},
{"lineNum":"  688","line":""},
{"lineNum":"  689","line":"    #[test]"},
{"lineNum":"  690","line":"    fn correct_dividend_must_work() {","class":"linePartCov","hits":"3","order":"6524","possible_hits":"4",},
{"lineNum":"  691","line":"        let identity_owner_id = 1;","class":"lineCov","hits":"1","order":"6525","possible_hits":"1",},
{"lineNum":"  692","line":"        with_externalities(&mut identity_owned_by(identity_owner_id), || {","class":"linePartCov","hits":"3","order":"6526","possible_hits":"4",},
{"lineNum":"  693","line":"            let token_owner_acc = 1;","class":"lineCov","hits":"1","order":"6534","possible_hits":"1",},
{"lineNum":"  694","line":"            let _token_owner_key = Key::try_from(token_owner_acc.encode()).unwrap();","class":"lineCov","hits":"2","order":"6535","possible_hits":"2",},
{"lineNum":"  695","line":"            let payout_owner_acc = 2;","class":"lineCov","hits":"1","order":"6536","possible_hits":"1",},
{"lineNum":"  696","line":"            let token_owner_did = \"did:poly:1\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"6537","possible_hits":"1",},
{"lineNum":"  697","line":"            let payout_owner_did = \"did:poly:2\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"6538","possible_hits":"1",},
{"lineNum":"  698","line":""},
{"lineNum":"  699","line":"            // A token representing 1M shares"},
{"lineNum":"  700","line":"            let token = SecurityToken {","class":"lineCov","hits":"1","order":"6541","possible_hits":"1",},
{"lineNum":"  701","line":"                name: vec![0x01],","class":"lineCov","hits":"1","order":"6539","possible_hits":"1",},
{"lineNum":"  702","line":"                owner_did: token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6540","possible_hits":"1",},
{"lineNum":"  703","line":"                total_supply: 1_000_000,"},
{"lineNum":"  704","line":"                granularity: 1,"},
{"lineNum":"  705","line":"                decimals: 18,"},
{"lineNum":"  706","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"            // A token used for payout"},
{"lineNum":"  709","line":"            let payout_token = SimpleTokenRecord {","class":"lineCov","hits":"1","order":"6544","possible_hits":"1",},
{"lineNum":"  710","line":"                ticker: vec![0x02],","class":"lineCov","hits":"1","order":"6542","possible_hits":"1",},
{"lineNum":"  711","line":"                owner_did: payout_owner_did.clone(),","class":"lineCov","hits":"1","order":"6543","possible_hits":"1",},
{"lineNum":"  712","line":"                total_supply: 200_000_000,"},
{"lineNum":"  713","line":"            };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"            Balances::make_free_balance_be(&token_owner_acc, 1_000_000);","class":"lineCov","hits":"1","order":"6545","possible_hits":"1",},
{"lineNum":"  716","line":"            Identity::register_did(","class":"lineCov","hits":"2","order":"6575","possible_hits":"2",},
{"lineNum":"  717","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"1","order":"6571","possible_hits":"1",},
{"lineNum":"  718","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6573","possible_hits":"1",},
{"lineNum":"  719","line":"                vec![],","class":"lineCov","hits":"1","order":"6574","possible_hits":"1",},
{"lineNum":"  720","line":"            )","class":"linePartCov","hits":"1","order":"6576","possible_hits":"3",},
{"lineNum":"  721","line":"            .expect(\"Could not create token_owner_did\");"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"            Balances::make_free_balance_be(&payout_owner_acc, 1_000_000);","class":"lineCov","hits":"1","order":"6577","possible_hits":"1",},
{"lineNum":"  724","line":"            Identity::register_did(","class":"lineCov","hits":"2","order":"6581","possible_hits":"2",},
{"lineNum":"  725","line":"                Origin::signed(payout_owner_acc),","class":"lineCov","hits":"1","order":"6578","possible_hits":"1",},
{"lineNum":"  726","line":"                payout_owner_did.clone(),","class":"lineCov","hits":"1","order":"6579","possible_hits":"1",},
{"lineNum":"  727","line":"                vec![],","class":"lineCov","hits":"1","order":"6580","possible_hits":"1",},
{"lineNum":"  728","line":"            )","class":"linePartCov","hits":"1","order":"6582","possible_hits":"3",},
{"lineNum":"  729","line":"            .expect(\"Could not create payout_owner_did\");"},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"            // Raise the owners\' base currency balance"},
{"lineNum":"  732","line":"            <identity::DidRecords<Test>>::mutate(&token_owner_did, |record| {","class":"lineCov","hits":"2","order":"6583","possible_hits":"2",},
{"lineNum":"  733","line":"                record.balance = 1_000_000;","class":"lineCov","hits":"1","order":"6584","possible_hits":"1",},
{"lineNum":"  734","line":"            });","class":"linePartCov","hits":"1","order":"6585","possible_hits":"2",},
{"lineNum":"  735","line":"            <identity::DidRecords<Test>>::mutate(&payout_owner_did, |record| {","class":"lineCov","hits":"2","order":"6586","possible_hits":"2",},
{"lineNum":"  736","line":"                record.balance = 1_000_000;","class":"lineCov","hits":"1","order":"6587","possible_hits":"1",},
{"lineNum":"  737","line":"            });","class":"linePartCov","hits":"1","order":"6588","possible_hits":"2",},
{"lineNum":"  738","line":""},
{"lineNum":"  739","line":"            // identity::Module::<Test>::do_create_issuer(&token.owner_did, &token_owner_key)"},
{"lineNum":"  740","line":"            //    .expect(\"Could not make token.owner_did an issuer\");"},
{"lineNum":"  741","line":"            // identity::Module::<Test>::do_create_simple_token_issuer("},
{"lineNum":"  742","line":"            //    &payout_token.owner_did,"},
{"lineNum":"  743","line":"            //    &token_owner_key,"},
{"lineNum":"  744","line":"            //)"},
{"lineNum":"  745","line":"            //.expect(\"Could not make payout_token.owner_did an issuer\");"},
{"lineNum":"  746","line":"            //identity::Module::<Test>::do_create_investor(&token.owner_did, &token_owner_key)"},
{"lineNum":"  747","line":"            //    .expect(\"Could not make token.owner_did an investor\");"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"            // Share issuance is successful"},
{"lineNum":"  750","line":"            assert_ok!(Asset::create_token(","class":"linePartCov","hits":"2","order":"6594","possible_hits":"3",},
{"lineNum":"  751","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"1","order":"6589","possible_hits":"1",},
{"lineNum":"  752","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6590","possible_hits":"1",},
{"lineNum":"  753","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"6591","possible_hits":"1",},
{"lineNum":"  754","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"6592","possible_hits":"1",},
{"lineNum":"  755","line":"                token.total_supply,","class":"lineCov","hits":"1","order":"6593","possible_hits":"1",},
{"lineNum":"  756","line":"                true"},
{"lineNum":"  757","line":"            ));","class":"linePartCov","hits":"1","order":"6664","possible_hits":"2",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"            // Issuance for payout token is successful"},
{"lineNum":"  760","line":"            assert_ok!(SimpleToken::create_token(","class":"linePartCov","hits":"2","order":"6669","possible_hits":"3",},
{"lineNum":"  761","line":"                Origin::signed(payout_owner_acc),","class":"lineCov","hits":"2","order":"6665","possible_hits":"2",},
{"lineNum":"  762","line":"                payout_owner_did.clone(),","class":"lineCov","hits":"1","order":"6666","possible_hits":"1",},
{"lineNum":"  763","line":"                payout_token.ticker.clone(),","class":"lineCov","hits":"1","order":"6667","possible_hits":"1",},
{"lineNum":"  764","line":"                payout_token.total_supply","class":"lineCov","hits":"1","order":"6668","possible_hits":"1",},
{"lineNum":"  765","line":"            ));","class":"linePartCov","hits":"1","order":"6690","possible_hits":"2",},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"            // Prepare a whitelisted investor"},
{"lineNum":"  768","line":"            let investor_acc = 3;","class":"lineCov","hits":"1","order":"6691","possible_hits":"1",},
{"lineNum":"  769","line":"            Balances::make_free_balance_be(&investor_acc, 1_000_000);","class":"lineCov","hits":"2","order":"6692","possible_hits":"2",},
{"lineNum":"  770","line":"            let investor_did = \"did:poly:3\".as_bytes().to_vec();","class":"lineCov","hits":"1","order":"6693","possible_hits":"1",},
{"lineNum":"  771","line":"            Identity::register_did(Origin::signed(investor_acc), investor_did.clone(), vec![])","class":"linePartCov","hits":"2","order":"6694","possible_hits":"3",},
{"lineNum":"  772","line":"                .expect(\"Could not create investor_did\");"},
{"lineNum":"  773","line":"            <identity::DidRecords<Test>>::mutate(investor_did.clone(), |record| {","class":"lineCov","hits":"2","order":"6695","possible_hits":"2",},
{"lineNum":"  774","line":"                record.balance = 1_000_000;","class":"lineCov","hits":"1","order":"6696","possible_hits":"1",},
{"lineNum":"  775","line":"            });","class":"linePartCov","hits":"1","order":"6697","possible_hits":"2",},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"            // identity::Module::<Test>::do_create_investor(&investor_did, &token_owner_key)"},
{"lineNum":"  778","line":"            //    .expect(\"Could not create an investor\");"},
{"lineNum":"  779","line":"            let amount_invested = 50_000;","class":"lineCov","hits":"1","order":"6698","possible_hits":"1",},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"            let now = Utc::now();","class":"lineCov","hits":"1","order":"6699","possible_hits":"1",},
{"lineNum":"  782","line":"            <timestamp::Module<Test>>::set_timestamp(now.timestamp() as u64);","class":"lineCov","hits":"1","order":"6707","possible_hits":"1",},
{"lineNum":"  783","line":""},
{"lineNum":"  784","line":"            // We need a lock to exist till assertions are done"},
{"lineNum":"  785","line":"            let outer = TOKEN_MAP_OUTER_LOCK.lock().unwrap();","class":"lineCov","hits":"1","order":"6708","possible_hits":"1",},
{"lineNum":"  786","line":"            *TOKEN_MAP.lock().unwrap() = {","class":"linePartCov","hits":"3","order":"6806","possible_hits":"4",},
{"lineNum":"  787","line":"                let mut map = HashMap::new();","class":"lineCov","hits":"1","order":"6797","possible_hits":"1",},
{"lineNum":"  788","line":"                map.insert(token.name.clone(), token.clone());","class":"linePartCov","hits":"2","order":"6798","possible_hits":"3",},
{"lineNum":"  789","line":"                map","class":"lineCov","hits":"1","order":"6805","possible_hits":"1",},
{"lineNum":"  790","line":"            };","class":"linePartCov","hits":"1","order":"6810","possible_hits":"5",},
{"lineNum":"  791","line":""},
{"lineNum":"  792","line":"            // Add all whitelist entries for investor, token owner and payout_token owner"},
{"lineNum":"  793","line":"            assert_ok!(general_tm::Module::<Test>::add_to_whitelist(","class":"linePartCov","hits":"2","order":"6847","possible_hits":"3",},
{"lineNum":"  794","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"1","order":"6818","possible_hits":"1",},
{"lineNum":"  795","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6819","possible_hits":"1",},
{"lineNum":"  796","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"6820","possible_hits":"1",},
{"lineNum":"  797","line":"                0,"},
{"lineNum":"  798","line":"                investor_did.clone(),","class":"lineCov","hits":"1","order":"6821","possible_hits":"1",},
{"lineNum":"  799","line":"                (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"6822","possible_hits":"1",},
{"lineNum":"  800","line":"            ));","class":"linePartCov","hits":"1","order":"6888","possible_hits":"2",},
{"lineNum":"  801","line":"            assert_ok!(general_tm::Module::<Test>::add_to_whitelist(","class":"linePartCov","hits":"2","order":"6894","possible_hits":"3",},
{"lineNum":"  802","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"2","order":"6889","possible_hits":"2",},
{"lineNum":"  803","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6890","possible_hits":"1",},
{"lineNum":"  804","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"6891","possible_hits":"1",},
{"lineNum":"  805","line":"                0,"},
{"lineNum":"  806","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6892","possible_hits":"1",},
{"lineNum":"  807","line":"                (now - Duration::hours(1)).timestamp() as u64,","class":"lineCov","hits":"1","order":"6893","possible_hits":"1",},
{"lineNum":"  808","line":"            ));","class":"linePartCov","hits":"1","order":"6896","possible_hits":"2",},
{"lineNum":"  809","line":"            drop(outer);","class":"lineCov","hits":"1","order":"6897","possible_hits":"1",},
{"lineNum":"  810","line":""},
{"lineNum":"  811","line":"            // Transfer tokens to investor"},
{"lineNum":"  812","line":"            assert_ok!(Asset::transfer(","class":"linePartCov","hits":"2","order":"6903","possible_hits":"3",},
{"lineNum":"  813","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"1","order":"6898","possible_hits":"1",},
{"lineNum":"  814","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6899","possible_hits":"1",},
{"lineNum":"  815","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"6900","possible_hits":"1",},
{"lineNum":"  816","line":"                investor_did.clone(),","class":"lineCov","hits":"1","order":"6901","possible_hits":"1",},
{"lineNum":"  817","line":"                amount_invested","class":"lineCov","hits":"1","order":"6902","possible_hits":"1",},
{"lineNum":"  818","line":"            ));","class":"linePartCov","hits":"1","order":"6991","possible_hits":"2",},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"            // Create checkpoint for token"},
{"lineNum":"  821","line":"            assert_ok!(Asset::create_checkpoint(","class":"linePartCov","hits":"2","order":"6995","possible_hits":"3",},
{"lineNum":"  822","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"2","order":"6992","possible_hits":"2",},
{"lineNum":"  823","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"6993","possible_hits":"1",},
{"lineNum":"  824","line":"                token.name.clone()","class":"lineCov","hits":"1","order":"6994","possible_hits":"1",},
{"lineNum":"  825","line":"            ));","class":"linePartCov","hits":"1","order":"7017","possible_hits":"2",},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"            // Checkpoints are 1-indexed"},
{"lineNum":"  828","line":"            let checkpoint_id = 1;","class":"lineCov","hits":"1","order":"7018","possible_hits":"1",},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"            let dividend = Dividend {","class":"lineCov","hits":"1","order":"7023","possible_hits":"1",},
{"lineNum":"  831","line":"                amount: 500_000,"},
{"lineNum":"  832","line":"                amount_left: 500_000,"},
{"lineNum":"  833","line":"                remaining_claimed: false,"},
{"lineNum":"  834","line":"                active: false,"},
{"lineNum":"  835","line":"                canceled: false,"},
{"lineNum":"  836","line":"                matures_at: Some((now - Duration::hours(1)).timestamp() as u64),","class":"lineCov","hits":"2","order":"7019","possible_hits":"2",},
{"lineNum":"  837","line":"                expires_at: Some((now + Duration::hours(1)).timestamp() as u64),","class":"lineCov","hits":"1","order":"7020","possible_hits":"1",},
{"lineNum":"  838","line":"                payout_currency: Some(payout_token.ticker.clone()),","class":"lineCov","hits":"1","order":"7021","possible_hits":"1",},
{"lineNum":"  839","line":"                checkpoint_id,","class":"lineCov","hits":"1","order":"7022","possible_hits":"1",},
{"lineNum":"  840","line":"            };"},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"            // Transfer payout tokens to asset owner"},
{"lineNum":"  843","line":"            assert_ok!(SimpleToken::transfer(","class":"linePartCov","hits":"2","order":"7029","possible_hits":"3",},
{"lineNum":"  844","line":"                Origin::signed(payout_owner_acc),","class":"lineCov","hits":"1","order":"7024","possible_hits":"1",},
{"lineNum":"  845","line":"                payout_owner_did.clone(),","class":"lineCov","hits":"2","order":"7025","possible_hits":"2",},
{"lineNum":"  846","line":"                payout_token.ticker.clone(),","class":"lineCov","hits":"1","order":"7026","possible_hits":"1",},
{"lineNum":"  847","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"7027","possible_hits":"1",},
{"lineNum":"  848","line":"                dividend.amount","class":"lineCov","hits":"1","order":"7028","possible_hits":"1",},
{"lineNum":"  849","line":"            ));","class":"linePartCov","hits":"1","order":"7054","possible_hits":"2",},
{"lineNum":"  850","line":""},
{"lineNum":"  851","line":"            // Create the dividend for asset"},
{"lineNum":"  852","line":"            assert_ok!(DividendModule::new(","class":"linePartCov","hits":"2","order":"7065","possible_hits":"3",},
{"lineNum":"  853","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"2","order":"7055","possible_hits":"2",},
{"lineNum":"  854","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"7056","possible_hits":"1",},
{"lineNum":"  855","line":"                dividend.amount,","class":"lineCov","hits":"1","order":"7057","possible_hits":"1",},
{"lineNum":"  856","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7058","possible_hits":"1",},
{"lineNum":"  857","line":"                dividend.matures_at.clone().unwrap(),","class":"lineCov","hits":"1","order":"7059","possible_hits":"1",},
{"lineNum":"  858","line":"                dividend.expires_at.clone().unwrap(),","class":"lineCov","hits":"1","order":"7062","possible_hits":"1",},
{"lineNum":"  859","line":"                dividend.payout_currency.clone().unwrap(),","class":"lineCov","hits":"1","order":"7063","possible_hits":"1",},
{"lineNum":"  860","line":"                dividend.checkpoint_id","class":"lineCov","hits":"1","order":"7064","possible_hits":"1",},
{"lineNum":"  861","line":"            ));","class":"linePartCov","hits":"1","order":"7110","possible_hits":"2",},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"            // Compare created dividend with the expected structure"},
{"lineNum":"  864","line":"            assert_eq!(","class":"lineCov","hits":"1","order":"7137","possible_hits":"1",},
{"lineNum":"  865","line":"                DividendModule::get_dividend(&token.name, 0),","class":"lineCov","hits":"2","order":"7111","possible_hits":"2",},
{"lineNum":"  866","line":"                Some(dividend.clone())","class":"lineCov","hits":"1","order":"7127","possible_hits":"1",},
{"lineNum":"  867","line":"            );"},
{"lineNum":"  868","line":""},
{"lineNum":"  869","line":"            // Start payout"},
{"lineNum":"  870","line":"            assert_ok!(DividendModule::activate(","class":"linePartCov","hits":"2","order":"7141","possible_hits":"3",},
{"lineNum":"  871","line":"                Origin::signed(token_owner_acc),","class":"lineCov","hits":"1","order":"7138","possible_hits":"1",},
{"lineNum":"  872","line":"                token_owner_did.clone(),","class":"lineCov","hits":"1","order":"7139","possible_hits":"1",},
{"lineNum":"  873","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7140","possible_hits":"1",},
{"lineNum":"  874","line":"                0"},
{"lineNum":"  875","line":"            ));","class":"linePartCov","hits":"1","order":"7153","possible_hits":"2",},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"            // Claim investor\'s share"},
{"lineNum":"  878","line":"            assert_ok!(DividendModule::claim(","class":"linePartCov","hits":"2","order":"7157","possible_hits":"3",},
{"lineNum":"  879","line":"                Origin::signed(investor_acc),","class":"lineCov","hits":"2","order":"7154","possible_hits":"2",},
{"lineNum":"  880","line":"                investor_did.clone(),","class":"lineCov","hits":"1","order":"7155","possible_hits":"1",},
{"lineNum":"  881","line":"                token.name.clone(),","class":"lineCov","hits":"1","order":"7156","possible_hits":"1",},
{"lineNum":"  882","line":"                0,"},
{"lineNum":"  883","line":"            ));","class":"linePartCov","hits":"1","order":"7202","possible_hits":"2",},
{"lineNum":"  884","line":""},
{"lineNum":"  885","line":"            // Check if the correct amount was added to investor balance"},
{"lineNum":"  886","line":"            let share = dividend.amount * amount_invested / token.total_supply;","class":"linePartCov","hits":"2","order":"7203","possible_hits":"3",},
{"lineNum":"  887","line":"            assert_eq!(","class":"linePartCov","hits":"1","order":"7205","possible_hits":"2",},
{"lineNum":"  888","line":"                SimpleToken::balance_of((payout_token.ticker.clone(), investor_did.clone())),","class":"lineCov","hits":"1","order":"7204","possible_hits":"1",},
{"lineNum":"  889","line":"                share"},
{"lineNum":"  890","line":"            );"},
{"lineNum":"  891","line":""},
{"lineNum":"  892","line":"            // Check if amount_left was adjusted correctly"},
{"lineNum":"  893","line":"            let current_entry ="},
{"lineNum":"  894","line":"                DividendModule::get_dividend(&token.name, 0).expect(\"Could not retrieve dividend\");","class":"lineCov","hits":"2","order":"7206","possible_hits":"2",},
{"lineNum":"  895","line":"            assert_eq!(current_entry.amount_left, current_entry.amount - share);","class":"linePartCov","hits":"1","order":"7207","possible_hits":"3",},
{"lineNum":"  896","line":"        });","class":"linePartCov","hits":"2","order":"7208","possible_hits":"10",},
{"lineNum":"  897","line":"    }","class":"linePartCov","hits":"2","order":"7213","possible_hits":"3",},
{"lineNum":"  898","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 299, "covered" : 261,};
var merged_data = [];
