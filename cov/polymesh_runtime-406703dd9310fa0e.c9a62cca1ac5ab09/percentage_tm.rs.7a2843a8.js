var data = {lines:[
{"lineNum":"    1","line":"use crate::{asset::AssetTrait, constants::*, exemption, identity, utils};"},
{"lineNum":"    2","line":"use primitives::Key;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"use codec::Encode;"},
{"lineNum":"    5","line":"use core::result::Result as StdResult;"},
{"lineNum":"    6","line":"use rstd::{convert::TryFrom, prelude::*};"},
{"lineNum":"    7","line":"use sr_primitives::traits::{CheckedAdd, CheckedDiv, CheckedMul};"},
{"lineNum":"    8","line":"use srml_support::{decl_event, decl_module, decl_storage, dispatch::Result, ensure};"},
{"lineNum":"    9","line":"use system::{self, ensure_signed};"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// The module\'s configuration trait."},
{"lineNum":"   12","line":"pub trait Trait: system::Trait + utils::Trait + exemption::Trait {"},
{"lineNum":"   13","line":"    /// The overarching event type."},
{"lineNum":"   14","line":"    type Event: From<Event<Self>> + Into<<Self as system::Trait>::Event>;"},
{"lineNum":"   15","line":"}"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"decl_event!("},
{"lineNum":"   18","line":"    pub enum Event<T>"},
{"lineNum":"   19","line":"    where"},
{"lineNum":"   20","line":"        Balance = <T as utils::Trait>::TokenBalance,"},
{"lineNum":"   21","line":"    {"},
{"lineNum":"   22","line":"        TogglePercentageRestriction(Vec<u8>, u16, bool),"},
{"lineNum":"   23","line":"        DoSomething(Balance),"},
{"lineNum":"   24","line":"    }"},
{"lineNum":"   25","line":");"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"decl_storage! {","class":"lineCov","hits":"9","order":"6940","possible_hits":"9",},
{"lineNum":"   28","line":"    trait Store for Module<T: Trait> as PercentageTM {"},
{"lineNum":"   29","line":"        MaximumPercentageEnabledForToken get(maximum_percentage_enabled_for_token): map Vec<u8> => u16;"},
{"lineNum":"   30","line":"    }"},
{"lineNum":"   31","line":"}","class":"linePartCov","hits":"3","order":"6941","possible_hits":"8",},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"decl_module! {"},
{"lineNum":"   34","line":"    /// The module declaration."},
{"lineNum":"   35","line":"    pub struct Module<T: Trait> for enum Call where origin: T::Origin {"},
{"lineNum":"   36","line":"        // Initializing events"},
{"lineNum":"   37","line":"        // this is needed only if you are using events in your module"},
{"lineNum":"   38","line":"        fn deposit_event() = default;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"        fn toggle_maximum_percentage_restriction(origin, did: Vec<u8>, _ticker: Vec<u8>, max_percentage: u16) -> Result  {"},
{"lineNum":"   41","line":"            let upper_ticker = utils::bytes_to_upper(_ticker.as_slice());"},
{"lineNum":"   42","line":"            let sender = ensure_signed(origin)?;"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"            // Check that sender is allowed to act on behalf of `did`"},
{"lineNum":"   45","line":"            ensure!(<identity::Module<T>>::is_signing_key(&did, &Key::try_from(sender.encode())?), \"sender must be a signing key for DID\");"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"            ensure!(Self::is_owner(&upper_ticker, &did),\"Sender DID must be the token owner\");"},
{"lineNum":"   48","line":"            // if max_percentage == 0 then it means we are disallowing the percentage transfer restriction to that ticker."},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"            //PABLO: TODO: Move all the max % logic to a new module and call that one instead of holding all the different logics in just one module."},
{"lineNum":"   51","line":"            //SATYAM: TODO: Add the decimal restriction"},
{"lineNum":"   52","line":"            <MaximumPercentageEnabledForToken>::insert(&upper_ticker, max_percentage);"},
{"lineNum":"   53","line":"            // Emit an event with values (Ticker of asset, max percentage, restriction enabled or not)"},
{"lineNum":"   54","line":"            Self::deposit_event(RawEvent::TogglePercentageRestriction(upper_ticker, max_percentage, max_percentage != 0));"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"            if max_percentage != 0 {"},
{"lineNum":"   57","line":"                sr_primitives::print(\"Maximum percentage restriction enabled!\");"},
{"lineNum":"   58","line":"            } else {"},
{"lineNum":"   59","line":"                sr_primitives::print(\"Maximum percentage restriction disabled!\");"},
{"lineNum":"   60","line":"            }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"            Ok(())"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"impl<T: Trait> Module<T> {"},
{"lineNum":"   69","line":"    pub fn is_owner(ticker: &Vec<u8>, sender_did: &Vec<u8>) -> bool {"},
{"lineNum":"   70","line":"        let upper_ticker = utils::bytes_to_upper(ticker);"},
{"lineNum":"   71","line":"        T::Asset::is_owner(&upper_ticker, sender_did)"},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    // Transfer restriction verification logic"},
{"lineNum":"   75","line":"    pub fn verify_restriction(","class":"linePartCov","hits":"2","order":"6937","possible_hits":"4",},
{"lineNum":"   76","line":"        ticker: &[u8],"},
{"lineNum":"   77","line":"        _from_did: &Vec<u8>,"},
{"lineNum":"   78","line":"        to_did: &Vec<u8>,"},
{"lineNum":"   79","line":"        value: T::TokenBalance,"},
{"lineNum":"   80","line":"    ) -> StdResult<u8, &\'static str> {"},
{"lineNum":"   81","line":"        let upper_ticker = utils::bytes_to_upper(ticker);","class":"lineCov","hits":"2","order":"6938","possible_hits":"2",},
{"lineNum":"   82","line":"        let max_percentage = Self::maximum_percentage_enabled_for_token(&upper_ticker);","class":"lineCov","hits":"2","order":"6939","possible_hits":"2",},
{"lineNum":"   83","line":"        // check whether the to address is in the exemption list or not"},
{"lineNum":"   84","line":"        // 2 refers to percentageTM"},
{"lineNum":"   85","line":"        // TODO: Mould the integer into the module identity"},
{"lineNum":"   86","line":"        let is_exempted = <exemption::Module<T>>::is_exempted(&upper_ticker, 2, to_did.clone());","class":"lineCov","hits":"4","order":"6942","possible_hits":"4",},
{"lineNum":"   87","line":"        if max_percentage != 0 && !is_exempted {","class":"linePartCov","hits":"2","order":"6949","possible_hits":"4",},
{"lineNum":"   88","line":"            let new_balance = (T::Asset::balance(&upper_ticker, to_did.clone()))","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"   89","line":"                .checked_add(&value)"},
{"lineNum":"   90","line":"                .ok_or(\"Balance of to will get overflow\")?;","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   91","line":"            let total_supply = T::Asset::total_supply(&upper_ticker);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"            let percentage_balance = (new_balance","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"   94","line":"                .checked_mul(&(<T as utils::Trait>::as_tb((10 as u128).pow(18))))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"                .ok_or(\"unsafe multiplication\")?)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   96","line":"            .checked_div(&total_supply)"},
{"lineNum":"   97","line":"            .ok_or(\"unsafe division\")?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   98","line":""},
{"lineNum":"   99","line":"            let allowed_token_amount = (<T as utils::Trait>::as_tb(max_percentage as u128))","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"  100","line":"                .checked_mul(&(<T as utils::Trait>::as_tb((10 as u128).pow(16))))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"                .ok_or(\"unsafe percentage multiplication\")?;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"            if percentage_balance > allowed_token_amount {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"                sr_primitives::print(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"                    \"It is failing because it is not validating the PercentageTM restrictions\","},
{"lineNum":"  106","line":"                );"},
{"lineNum":"  107","line":"                return Ok(APP_FUNDS_LIMIT_REACHED);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"            }"},
{"lineNum":"  109","line":"        }"},
{"lineNum":"  110","line":"        //sr_primitives::print(\"It is passing thorugh the PercentageTM\");"},
{"lineNum":"  111","line":"        Ok(ERC1400_TRANSFER_SUCCESS)","class":"lineCov","hits":"2","order":"6950","possible_hits":"2",},
{"lineNum":"  112","line":"    }","class":"linePartCov","hits":"4","order":"6951","possible_hits":"8",},
{"lineNum":"  113","line":"}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"/// tests for this module"},
{"lineNum":"  116","line":"#[cfg(test)]"},
{"lineNum":"  117","line":"mod tests {"},
{"lineNum":"  118","line":"    // use super::*;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    // use crate::asset::SecurityToken;"},
{"lineNum":"  121","line":"    // use lazy_static::lazy_static;"},
{"lineNum":"  122","line":"    // use substrate_primitives::{Blake2Hasher, H256};"},
{"lineNum":"  123","line":"    // use sr_io::with_externalities;"},
{"lineNum":"  124","line":"    // use sr_primitives::{"},
{"lineNum":"  125","line":"    //     testing::{Digest, DigestItem, Header},"},
{"lineNum":"  126","line":"    //     traits::{BlakeTwo256, IdentityLookup},"},
{"lineNum":"  127","line":"    //     BuildStorage,"},
{"lineNum":"  128","line":"    // };"},
{"lineNum":"  129","line":"    // use srml_support::{assert_noop, assert_ok, impl_outer_origin};"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"    // use std::{"},
{"lineNum":"  132","line":"    //     collections::HashMap,"},
{"lineNum":"  133","line":"    //     sync::{Arc, Mutex},"},
{"lineNum":"  134","line":"    // };"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    // impl_outer_origin! {"},
{"lineNum":"  137","line":"    //     pub enum Origin for Test {}"},
{"lineNum":"  138","line":"    // }"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    // For testing the module, we construct most of a mock runtime. This means"},
{"lineNum":"  141","line":"    // first constructing a configuration type (`Test`) which `impl`s each of the"},
{"lineNum":"  142","line":"    // configuration traits of modules we want to use."},
{"lineNum":"  143","line":"    // #[derive(Clone, Eq, PartialEq)]"},
{"lineNum":"  144","line":"    // pub struct Test;"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    // impl system::Trait for Test {"},
{"lineNum":"  147","line":"    //     type Origin = Origin;"},
{"lineNum":"  148","line":"    //     type Index = u64;"},
{"lineNum":"  149","line":"    //     type BlockNumber = u64;"},
{"lineNum":"  150","line":"    //     type Hash = H256;"},
{"lineNum":"  151","line":"    //     type Hashing = BlakeTwo256;"},
{"lineNum":"  152","line":"    //     type Digest = H256;"},
{"lineNum":"  153","line":"    //     type AccountId = u64;"},
{"lineNum":"  154","line":"    //     type Lookup = IdentityLookup<Self::AccountId>;"},
{"lineNum":"  155","line":"    //     type Header = Header;"},
{"lineNum":"  156","line":"    //     type Event = ();"},
{"lineNum":"  157","line":"    //     type Log = DigestItem;"},
{"lineNum":"  158","line":"    // }"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"    // impl Trait for Test {"},
{"lineNum":"  161","line":"    //     type Event = ();"},
{"lineNum":"  162","line":"    //     type OnFreeBalanceZero = ();"},
{"lineNum":"  163","line":"    //     type OnNewAccount = ();"},
{"lineNum":"  164","line":"    //     type TransactionPayment = ();"},
{"lineNum":"  165","line":"    //     type TransferPayment = ();"},
{"lineNum":"  166","line":"    // }"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    // impl utils::Trait for Test {"},
{"lineNum":"  169","line":"    //     type TokenBalance = u128;"},
{"lineNum":"  170","line":"    // }"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    // impl timestamp::Trait for Test {"},
{"lineNum":"  173","line":"    //     type Moment = u64;"},
{"lineNum":"  174","line":"    //     type OnTimestampSet = ();"},
{"lineNum":"  175","line":"    // }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    // impl asset::HasOwner<<Test as system::Trait>::AccountId> for Module<Test> {"},
{"lineNum":"  178","line":"    //     fn is_owner(_ticker: Vec<u8>, sender: <Test as system::Trait>::AccountId) -> bool {"},
{"lineNum":"  179","line":"    //         if let Some(token) = TOKEN_MAP.lock().unwrap().get(&_ticker) {"},
{"lineNum":"  180","line":"    //             token.owner == sender"},
{"lineNum":"  181","line":"    //         } else {"},
{"lineNum":"  182","line":"    //             false"},
{"lineNum":"  183","line":"    //         }"},
{"lineNum":"  184","line":"    //     }"},
{"lineNum":"  185","line":"    // }"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    // impl Trait for Test {"},
{"lineNum":"  188","line":"    //     type Event = ();"},
{"lineNum":"  189","line":"    //     type Asset = Module<Test>;"},
{"lineNum":"  190","line":"    // }"},
{"lineNum":"  191","line":"    // // This function basically just builds a genesis storage key/value store according to"},
{"lineNum":"  192","line":"    // // our desired mockup."},
{"lineNum":"  193","line":"    // fn new_test_ext() -> sr_io::TestExternalities<Blake2Hasher> {"},
{"lineNum":"  194","line":"    //     system::GenesisConfig::default()"},
{"lineNum":"  195","line":"    //         .build_storage()"},
{"lineNum":"  196","line":"    //         .unwrap()"},
{"lineNum":"  197","line":"    //         .0"},
{"lineNum":"  198","line":"    //         .into()"},
{"lineNum":"  199","line":"    // }"},
{"lineNum":"  200","line":"    //type PercentageTM = Module<Test>;"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    // lazy_static! {"},
{"lineNum":"  203","line":"    //     static ref TOKEN_MAP: Arc<"},
{"lineNum":"  204","line":"    //         Mutex<"},
{"lineNum":"  205","line":"    //             HashMap<"},
{"lineNum":"  206","line":"    //                 Vec<u8>,"},
{"lineNum":"  207","line":"    //                 SecurityToken<"},
{"lineNum":"  208","line":"    //                     <Test as utils::Trait>::TokenBalance,"},
{"lineNum":"  209","line":"    //                     <Test as system::Trait>::AccountId,"},
{"lineNum":"  210","line":"    //                 >,"},
{"lineNum":"  211","line":"    //             >,"},
{"lineNum":"  212","line":"    //         >,"},
{"lineNum":"  213","line":"    //     > = Arc::new(Mutex::new(HashMap::new()));"},
{"lineNum":"  214","line":"    //     /// Because Rust\'s Mutex is not recursive a second symbolic lock is necessary"},
{"lineNum":"  215","line":"    //     static ref TOKEN_MAP_OUTER_LOCK: Arc<Mutex<()>> = Arc::new(Mutex::new(()));"},
{"lineNum":"  216","line":"    // }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    // #[test]"},
{"lineNum":"  219","line":"    // fn discards_non_owners() {"},
{"lineNum":"  220","line":"    //     with_externalities(&mut new_test_ext(), || {"},
{"lineNum":"  221","line":"    //         let ticker = vec![0x01];"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"    //         // We need the lock to exist till assertions are done"},
{"lineNum":"  224","line":"    //         let outer = TOKEN_MAP_OUTER_LOCK.lock().unwrap();"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"    //         // Prepare a token entry with mismatched owner"},
{"lineNum":"  227","line":"    //         *TOKEN_MAP.lock().unwrap() = {"},
{"lineNum":"  228","line":"    //             let mut map = HashMap::new();"},
{"lineNum":"  229","line":"    //             let token = SecurityToken {"},
{"lineNum":"  230","line":"    //                 name: ticker.clone(),"},
{"lineNum":"  231","line":"    //                 owner: 1337,"},
{"lineNum":"  232","line":"    //                 total_supply: 1_000_000,"},
{"lineNum":"  233","line":"    //             };"},
{"lineNum":"  234","line":"    //             map.insert(ticker.clone(), token);"},
{"lineNum":"  235","line":"    //             map"},
{"lineNum":"  236","line":"    //         };"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    //         // But look up against 1"},
{"lineNum":"  239","line":"    //         assert_noop!("},
{"lineNum":"  240","line":"    //             PercentageTM::toggle_maximum_percentage_restriction("},
{"lineNum":"  241","line":"    //                 Origin::signed(1),"},
{"lineNum":"  242","line":"    //                 ticker,"},
{"lineNum":"  243","line":"    //                 true,"},
{"lineNum":"  244","line":"    //                 15"},
{"lineNum":"  245","line":"    //             ),"},
{"lineNum":"  246","line":"    //             \"Sender must be the token owner\""},
{"lineNum":"  247","line":"    //         );"},
{"lineNum":"  248","line":"    //         drop(outer);"},
{"lineNum":"  249","line":"    //     });"},
{"lineNum":"  250","line":"    // }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"    // #[test]"},
{"lineNum":"  253","line":"    // fn accepts_real_owners() {"},
{"lineNum":"  254","line":"    //     with_externalities(&mut new_test_ext(), || {"},
{"lineNum":"  255","line":"    //         let ticker = vec![0x01];"},
{"lineNum":"  256","line":"    //         let matching_owner = 1;"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"    //         // We need the lock to exist till assertions are done"},
{"lineNum":"  259","line":"    //         let outer = TOKEN_MAP_OUTER_LOCK.lock().unwrap();"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    //         *TOKEN_MAP.lock().unwrap() = {"},
{"lineNum":"  262","line":"    //             let mut map = HashMap::new();"},
{"lineNum":"  263","line":"    //             let token = SecurityToken {"},
{"lineNum":"  264","line":"    //                 name: ticker.clone(),"},
{"lineNum":"  265","line":"    //                 owner: matching_owner,"},
{"lineNum":"  266","line":"    //                 total_supply: 1_000_000,"},
{"lineNum":"  267","line":"    //             };"},
{"lineNum":"  268","line":"    //             map.insert(ticker.clone(), token);"},
{"lineNum":"  269","line":"    //             map"},
{"lineNum":"  270","line":"    //         };"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"    //         assert_ok!(PercentageTM::toggle_maximum_percentage_restriction("},
{"lineNum":"  273","line":"    //             Origin::signed(matching_owner),"},
{"lineNum":"  274","line":"    //             ticker.clone(),"},
{"lineNum":"  275","line":"    //             true,"},
{"lineNum":"  276","line":"    //             15"},
{"lineNum":"  277","line":"    //         ));"},
{"lineNum":"  278","line":"    //         assert_eq!("},
{"lineNum":"  279","line":"    //             PercentageTM::maximum_percentage_enabled_for_token(ticker.clone()),"},
{"lineNum":"  280","line":"    //             (true, 15)"},
{"lineNum":"  281","line":"    //         );"},
{"lineNum":"  282","line":"    //         drop(outer);"},
{"lineNum":"  283","line":"    //     });"},
{"lineNum":"  284","line":"    // }"},
{"lineNum":"  285","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "polymesh_runtime-406703dd9310fa0e", "date" : "2019-11-06 13:35:33", "instrumented" : 22, "covered" : 9,};
var merged_data = [];
